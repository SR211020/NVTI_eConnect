@model eConnectV2.ViewModels.EISViewModel
@{
    ViewData["Title"] = "EIS Dashboard";
    string crntYear = DateTime.Now.Year.ToString();
    string prvYear = DateTime.Now.AddYears(-1).Year.ToString();
}

@section HeadBlock {
    <link rel="stylesheet" media="screen, print" href="~/css/statistics/chartjs/chartjs.css">
    <link rel="stylesheet" media="screen, print" href="~/css/statistics/c3/c3.css">
    <link rel="stylesheet" media="screen, print" href="~/css/statistics/chartist/chartist.css">

    <link href="~/css/statistics/c3/c3.css" rel="stylesheet" />
    <link href="~/css/statistics/chartjs/chartjs.css" rel="stylesheet" />
    <style>
        .dateCntrl {
            padding: 2px;
            width: 110px;
            border-color: lightgray;
            border: ridge;
        }

        .ddlCntrl {
            padding: 2px;
            width: 70px;
            border: ridge;
            border-color: lightgray;
        }

        .ddlCntrl2 {
            padding: 2px;
            width: 85px;
            border: ridge;
            border-color: lightgray;
        }

        input[type="date"]::-webkit-calendar-picker-indicator,
        input[type="date"]::-webkit-inner-spin-button {
            padding: 0px;
            margin: 0px;
        }
    </style>
}

<div class="subheader mb-2">
    <h1 class="subheader-title">
        <i class="subheader-icon fal fa-chart-area"></i> EIS <span class="fw-300">Dashboard</span>
    </h1>
    <div class="float-right pr-2 col-sm-1">
        <select asp-for="Plant" class="ddlCntrl" onchange="BoxOnChange()">
            <option selected value="NVTI">NVTI</option>
            <option value="BAWAL">Bawal</option>
            <option value="MANESAR">Manesar</option>
        </select>
    </div>
</div>
<script type="text/javascript">
    function BoxOnChange() {
        var requestUrl = 'EIS/GetBoxData';
        var plant = $('#Plant').val();
        $.ajax({
            url: requestUrl,
            type: "POST",
            data: { plant: plant },
            success: function (data) {
                $('#bs1').text(data.box1);
                $('#bs2').text(data.box2);
                $('#bs3').text(data.box3);
                $('#bs4').text(data.box4);
            },
            error: function () {

            }
        });
    }
</script>

<div class="row">
    <div class="col-sm-4">
        <div class="p-3 bg-primary-300 rounded overflow-hidden position-relative text-white mb-g">
            <div class="">
                <h3 class="display-4 d-block l-h-n m-0 fw-500">
                    <small class="m-0 l-h-n">Total Pcs Shipped (Current Month)</small>
                    <span id="bs1"> @Model.Box1</span>
                </h3>
            </div>
            <i class="fas fa-boxes-alt position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n1" style="font-size:6rem"></i>
        </div>
    </div>
    <div class="col-sm-4">
        <div class="p-3 bg-info-200 rounded overflow-hidden position-relative text-white mb-g">
            <div class="">
                <h3 class="display-4 d-block l-h-n m-0 fw-500">
                    <small class="m-0 l-h-n">Total Invoice Amount (Current Month)</small>
                    <span id="bs2"> @Model.Box2 (INR)</span>
                </h3>
            </div>
            <i class="fas fa-inbox-out position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n4" style="font-size: 6rem;"></i>
        </div>
    </div>
    <div class="col-sm-4">
        @*<div class="p-3 bg-success-200 rounded overflow-hidden position-relative text-white mb-g">
                <div class="">
                    <h3 class="display-4 d-block l-h-n m-0 fw-500">
                        <small class="m-0 l-h-n">Total Inventory Amount (As on Today)</small>
                        <span id="bs3"> @Model.Box3 (INR)</span>
                    </h3>
                </div>
                <i class="fas fa-inbox-out position-absolute pos-right pos-bottom opacity-15 mb-n5 mr-n6" style="font-size: 8rem;"></i>
            </div>*@
    </div>
</div>

<div class="alert bg-info-500 text-white" role="alert">
    <strong>Sales :- </strong> Sales Quantity, Sales Amount, Cell Revenue, Pack Revenue
</div>
<div class="row">
    <div class="col-md-6">
        <div id="panel-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Sales Quantity
                            </h2>
                        </td>
                        <td width="12%">
                            <select asp-for="SqPlant" class="ddlCntrl2" onchange="fnShipmentQtyData('qty')">
                                <option selected value="NVTI">NVTI</option>
                                <option value="BAWAL">Bawal</option>
                                <option value="MANESAR">Manesar</option>
                            </select>
                        </td>
                        <td width="15%">
                            <select asp-for="SqMatCode" class="ddlCntrl2" onchange="fnShipmentQtyData()" asp-items="@(new SelectList(Model.MatCodeList, "Value", "Text"))">
                                <option selected value="0">-- ALL --</option>
                                <option value="OTHERS">OTHERS</option>
                            </select>
                        </td>
                        <td width="15%">
                            <input asp-for="SqDate1" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                   onchange="fnShipmentQtyData('1')" />
                        </td>
                        <td width="15%" class="pr-2">
                            <input asp-for="SqDate2" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                   onchange="fnShipmentQtyData('2')" />
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="ShipQtyChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnShipmentQtyData(t) {
                    var plant = $('#SqPlant').val();
                    var materialCode = $('#SqMatCode').val();
                    var date1 = $('#SqDate1').val();
                    var date2 = $('#SqDate2').val();
                    if (date1 != '' && date2 != '') {
                        if (date2 >= date1) {
                            document.getElementById("ShipQtyChart").innerHTML = '&nbsp;';
                            document.getElementById("ShipQtyChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                            GetShipmentData(plant, materialCode, date1, date2, 'qty');
                        }
                        else {
                            if (t == 1) {
                                $('#SqDate1').val('');
                                Swal.fire("Oops...", "Invalid Date Selection!", "error");
                            }
                            if (t == 2) {
                                $('#SqDate2').val('');
                                Swal.fire("Oops...", "Invalid Date Selection!", "error");
                            }
                        }
                    }
                }
            </script>
        </div>
    </div>
    <div class="col-md-6">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Sales Amount
                            </h2>
                        </td>
                        <td style="text-align:right" class="pr-2">
                            From :&nbsp;
                            <select asp-for="SalesFromYr" class="ddlCntrl" onchange="fnSalesData()">
                                <option value="@crntYear" selected>@crntYear</option>
                                <option value="@prvYear">@prvYear</option>
                            </select>
                            &nbsp;&nbsp;
                            <select asp-for="SalesFromMon" class="ddlCntrl" onchange="fnSalesData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                            </select>
                        </td>
                        <td style="text-align:right" class="pr-2">
                            To :&nbsp;
                            <select asp-for="SalesToYr" class="ddlCntrl" onchange="fnSalesData()">
                                <option value="@crntYear" selected>@crntYear</option>
                                <option value="@prvYear">@prvYear</option>
                            </select>
                            &nbsp;&nbsp;
                            <select asp-for="SalesToMon" class="ddlCntrl" onchange="fnSalesData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                            </select>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="SalesAmtChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnSalesData() {
                    var fromYear = $('#SalesFromYr').val();
                    var fromMonth = $('#SalesFromMon').val();
                    var toYear = $('#SalesToYr').val();
                    var toMonth = $('#SalesToMon').val();
                    document.getElementById("SalesAmtChart").innerHTML = '&nbsp;';
                    document.getElementById("SalesAmtChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetSalesAmtData('SAL', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Cell Revenue <br />
                            </h2>
                        </td>
                        <td style="text-align:right" class="pr-2">
                            From :&nbsp;
                            <select asp-for="CellRevFromYr" class="ddlCntrl" onchange="fnCellRevenueData()">
                                <option value="@crntYear" selected>@crntYear</option>
                                <option value="@prvYear">@prvYear</option>
                            </select>
                            &nbsp;&nbsp;
                            <select asp-for="CellRevFromMon" class="ddlCntrl" onchange="fnCellRevenueData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                            </select>
                        </td>
                        <td style="text-align:right" class="pr-2">
                            To :&nbsp;
                            <select asp-for="CellRevToYr" class="ddlCntrl" onchange="fnCellRevenueData()">
                                <option value="@crntYear" selected>@crntYear</option>
                                <option value="@prvYear">@prvYear</option>
                            </select>
                            &nbsp;&nbsp;
                            <select asp-for="CellRevToMon" class="ddlCntrl" onchange="fnCellRevenueData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="pl-2"><small>(Sales with Cell)</small></td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray">
                    <div id="CellRevenueChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnCellRevenueData() {
                    var fromYear = $('#CellRevFromYr').val();
                    var fromMonth = $('#CellRevFromMon').val();
                    var toYear = $('#CellRevToYr').val();
                    var toMonth = $('#CellRevToMon').val();
                    document.getElementById("CellRevenueChart").innerHTML = '&nbsp;';
                    document.getElementById("CellRevenueChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetCellRevenueData('CELL_REVENUE', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-6">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Pack Revenue
                            </h2>
                        </td>
                        <td style="text-align:right" class="pr-2">
                            From :&nbsp;
                            <select asp-for="PackRevFromYr" class="ddlCntrl" onchange="fnPackRevenueData()">
                                <option value="@crntYear" selected>@crntYear</option>
                                <option value="@prvYear">@prvYear</option>
                            </select>
                            &nbsp;&nbsp;
                            <select asp-for="PackRevFromMon" class="ddlCntrl" onchange="fnPackRevenueData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                            </select>
                        </td>
                        <td style="text-align:right" class="pr-2">
                            To :&nbsp;
                            <select asp-for="PackRevToYr" class="ddlCntrl" onchange="fnPackRevenueData()">
                                <option value="@crntYear" selected>@crntYear</option>
                                <option value="@prvYear">@prvYear</option>
                            </select>
                            &nbsp;&nbsp;
                            <select asp-for="PackRevToMon" class="ddlCntrl" onchange="fnPackRevenueData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="pl-2"><small>(Sales without Cell)</small></td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="PackRevenueChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnPackRevenueData() {
                    var fromYear = $('#PackRevFromYr').val();
                    var fromMonth = $('#PackRevFromMon').val();
                    var toYear = $('#PackRevToYr').val();
                    var toMonth = $('#PackRevToMon').val();
                    document.getElementById("PackRevenueChart").innerHTML = '&nbsp;';
                    document.getElementById("PackRevenueChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetPackRevenueData('PACK_REVENUE', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
</div>
<div class="alert bg-info-500 text-white" role="alert">
    <strong>GP Factors :- </strong>Scrap Revenue, Material Cost, Freight Inward, DL, MOH, Depreciation
</div>
<div class="row">
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Scrap Revenue
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="ScrFromYr" class="ddlCntrl" onchange="fnScrapData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="ScrFromMon" class="ddlCntrl" onchange="fnScrapData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="ScrToYr" class="ddlCntrl" onchange="fnScrapData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="ScrToMon" class="ddlCntrl" onchange="fnScrapData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="ScrapChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnScrapData() {
                    var fromYear = $('#ScrFromYr').val();
                    var fromMonth = $('#ScrFromMon').val();
                    var toYear = $('#ScrToYr').val();
                    var toMonth = $('#ScrToMon').val();
                    document.getElementById("ScrapChart").innerHTML = '&nbsp;';
                    document.getElementById("ScrapChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetScrapData('SCR', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Material Cost
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="MatFromYr" class="ddlCntrl" onchange="fnMatData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="MatFromMon" class="ddlCntrl" onchange="fnMatData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="MatToYr" class="ddlCntrl" onchange="fnMatData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="MatToMon" class="ddlCntrl" onchange="fnMatData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="MatChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnMatData() {
                    var fromYear = $('#MatFromYr').val();
                    var fromMonth = $('#MatFromMon').val();
                    var toYear = $('#MatToYr').val();
                    var toMonth = $('#MatToMon').val();
                    document.getElementById("MatChart").innerHTML = '&nbsp;';
                    document.getElementById("MatChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetMaterialData('MAT', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Freight Inward
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="IFRFromYr" class="ddlCntrl" onchange="fnIFRData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="IFRFromMon" class="ddlCntrl" onchange="fnIFRData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="IFRToYr" class="ddlCntrl" onchange="fnIFRData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="IFRToMon" class="ddlCntrl" onchange="fnIFRData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="IFRChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnIFRData() {
                    var fromYear = $('#IFRFromYr').val();
                    var fromMonth = $('#IFRFromMon').val();
                    var toYear = $('#IFRToYr').val();
                    var toMonth = $('#IFRToMon').val();
                    document.getElementById("IFRChart").innerHTML = '&nbsp;';
                    document.getElementById("IFRChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetIFRData('INF', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                DL
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="DLFromYr" class="ddlCntrl" onchange="fnDLData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="DLFromMon" class="ddlCntrl" onchange="fnDLData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="DLToYr" class="ddlCntrl" onchange="fnDLData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="DLToMon" class="ddlCntrl" onchange="fnDLData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="DLChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnDLData() {
                    var fromYear = $('#DLFromYr').val();
                    var fromMonth = $('#DLFromMon').val();
                    var toYear = $('#DLToYr').val();
                    var toMonth = $('#DLToMon').val();
                    document.getElementById("DLChart").innerHTML = '&nbsp;';
                    document.getElementById("DLChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetDLData('DL', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                MOH
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="MOHFromYr" class="ddlCntrl" onchange="fnMOHData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="MOHFromMon" class="ddlCntrl" onchange="fnMOHData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="MOHToYr" class="ddlCntrl" onchange="fnMOHData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="MOHToMon" class="ddlCntrl" onchange="fnMOHData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="MOHChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnMOHData() {
                    var fromYear = $('#MOHFromYr').val();
                    var fromMonth = $('#MOHFromMon').val();
                    var toYear = $('#MOHToYr').val();
                    var toMonth = $('#MOHToMon').val();
                    document.getElementById("MOHChart").innerHTML = '&nbsp;';
                    document.getElementById("MOHChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetMOHData('MOH', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Depreciation
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="DepFromYr" class="ddlCntrl" onchange="fnDepData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="DepFromMon" class="ddlCntrl" onchange="fnDepData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="DepToYr" class="ddlCntrl" onchange="fnDepData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="DepToMon" class="ddlCntrl" onchange="fnDepData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="DepChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnDepData() {
                    var fromYear = $('#DepFromYr').val();
                    var fromMonth = $('#DepFromMon').val();
                    var toYear = $('#DepToYr').val();
                    var toMonth = $('#DepToMon').val();
                    document.getElementById("DepChart").innerHTML = '&nbsp;';
                    document.getElementById("DepChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetDepreciationData('DEP', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
</div>
<div class="alert bg-info-500 text-white" role="alert">
    <strong>OP Factors :- </strong> SGA (including Freight Outward), IDL, Freight Outward, Royalty
</div>
<div class="row">
    <div class="col-md-6">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                SGA
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="SGAFromYr" class="ddlCntrl" onchange="fnSGAData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="SGAFromMon" class="ddlCntrl" onchange="fnSGAData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="SGAToYr" class="ddlCntrl" onchange="fnSGAData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="SGAToMon" class="ddlCntrl" onchange="fnSGAData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="SGAChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnSGAData() {
                    var fromYear = $('#SGAFromYr').val();
                    var fromMonth = $('#SGAFromMon').val();
                    var toYear = $('#SGAToYr').val();
                    var toMonth = $('#SGAToMon').val();
                    document.getElementById("SGAChart").innerHTML = '&nbsp;';
                    document.getElementById("SGAChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetSGAData('SGA', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-6">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                IDL
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="IDLFromYr" class="ddlCntrl" onchange="fnIDLData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="IDLFromMon" class="ddlCntrl" onchange="fnIDLData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="IDLToYr" class="ddlCntrl" onchange="fnIDLData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="IDLToMon" class="ddlCntrl" onchange="fnIDLData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="IDLChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnIDLData() {
                    var fromYear = $('#IDLFromYr').val();
                    var fromMonth = $('#IDLFromMon').val();
                    var toYear = $('#IDLToYr').val();
                    var toMonth = $('#IDLToMon').val();
                    document.getElementById("IDLChart").innerHTML = '&nbsp;';
                    document.getElementById("IDLChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetIDLData('LAB', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Freight Outward
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="OFRFromYr" class="ddlCntrl" onchange="fnOFRData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OFRFromMon" class="ddlCntrl" onchange="fnOFRData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="OFRToYr" class="ddlCntrl" onchange="fnOFRData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OFRToMon" class="ddlCntrl" onchange="fnOFRData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="OFRChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnOFRData() {
                    var fromYear = $('#OFRFromYr').val();
                    var fromMonth = $('#OFRFromMon').val();
                    var toYear = $('#OFRToYr').val();
                    var toMonth = $('#OFRToMon').val();
                    document.getElementById("OFRChart").innerHTML = '&nbsp;';
                    document.getElementById("OFRChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetOFRData(fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-6">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Royality
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="RlyFromYr" class="ddlCntrl" onchange="fnRoyalityData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="RlyFromMon" class="ddlCntrl" onchange="fnRoyalityData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="RlyToYr" class="ddlCntrl" onchange="fnRoyalityData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="RlyToMon" class="ddlCntrl" onchange="fnRoyalityData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="RoyalityChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnRoyalityData() {
                    var fromYear = $('#RlyFromYr').val();
                    var fromMonth = $('#RlyFromMon').val();
                    var toYear = $('#RlyToYr').val();
                    var toMonth = $('#RlyToMon').val();
                    document.getElementById("RoyalityChart").innerHTML = '&nbsp;';
                    document.getElementById("RoyalityChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetRoyalityData('RLY', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
</div>
<div class="alert bg-info-500 text-white" role="alert">
    <strong>PBT Factors :- </strong> Forex Cost, Other Cost, Other Income
</div>
<div class="row">
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Forex Cost
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="FrxFromYr" class="ddlCntrl" onchange="fnForexData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="FrxFromMon" class="ddlCntrl" onchange="fnForexData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="FrxToYr" class="ddlCntrl" onchange="fnForexData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="FrxToMon" class="ddlCntrl" onchange="fnForexData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="ForexChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnForexData() {
                    var fromYear = $('#FrxFromYr').val();
                    var fromMonth = $('#FrxFromMon').val();
                    var toYear = $('#FrxToYr').val();
                    var toMonth = $('#FrxToMon').val();
                    document.getElementById("ForexChart").innerHTML = '&nbsp;';
                    document.getElementById("ForexChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetForexData('FXC', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Other Cost
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="OtcFromYr" class="ddlCntrl" onchange="fnOTCData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OtcFromMon" class="ddlCntrl" onchange="fnOTCData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="OtcToYr" class="ddlCntrl" onchange="fnOTCData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OtcToMon" class="ddlCntrl" onchange="fnOTCData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="OTCChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnOTCData() {
                    var fromYear = $('#OtcFromYr').val();
                    var fromMonth = $('#OtcFromMon').val();
                    var toYear = $('#OtcToYr').val();
                    var toMonth = $('#OtcToMon').val();
                    document.getElementById("OTCChart").innerHTML = '&nbsp;';
                    document.getElementById("OTCChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetOtherCostData('OTC', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                Other Income
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="OicFromYr" class="ddlCntrl" onchange="fnOICData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OicFromMon" class="ddlCntrl" onchange="fnOICData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="OicToYr" class="ddlCntrl" onchange="fnOICData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OicToMon" class="ddlCntrl" onchange="fnOICData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="OICChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnOICData() {
                    var fromYear = $('#OicFromYr').val();
                    var fromMonth = $('#OicFromMon').val();
                    var toYear = $('#OicToYr').val();
                    var toMonth = $('#OicToMon').val();
                    document.getElementById("OICChart").innerHTML = '&nbsp;';
                    document.getElementById("OICChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetOtherIncomeData('OIC', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
</div>
<div class="alert bg-info-500 text-white" role="alert">
    <strong>NP Factor :- </strong> Tax
</div>
<div class="row">
    <div class="col-md-6">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                TAX
                            </h2>
                        </td>
                        <td style="text-align:right" class="pr-2">
                            From :&nbsp;
                            <select asp-for="TaxFromYr" class="ddlCntrl" onchange="fnTaxData()">
                                <option value="@crntYear" selected>@crntYear</option>
                                <option value="@prvYear">@prvYear</option>
                            </select>
                            &nbsp;&nbsp;
                            <select asp-for="TaxFromMon" class="ddlCntrl" onchange="fnTaxData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                            </select>
                        </td>
                        <td style="text-align:right" class="pr-2">
                            To :&nbsp;
                            <select asp-for="TaxToYr" class="ddlCntrl" onchange="fnTaxData()">
                                <option value="@crntYear" selected>@crntYear</option>
                                <option value="@prvYear">@prvYear</option>
                            </select>
                            &nbsp;&nbsp;
                            <select asp-for="TaxToMon" class="ddlCntrl" onchange="fnTaxData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                            </select>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="TaxChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnTaxData() {
                    var fromYear = $('#TaxFromYr').val();
                    var fromMonth = $('#TaxFromMon').val();
                    var toYear = $('#TaxToYr').val();
                    var toMonth = $('#TaxToMon').val();
                    document.getElementById("TaxChart").innerHTML = '&nbsp;';
                    document.getElementById("TaxChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetTaxData('TAX', fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
</div>
<div class="alert bg-info-500 text-white" role="alert">
    <strong>Profit :- </strong> GP, OP, NP
</div>
<div class="row">
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                GP
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="GPFromYr" class="ddlCntrl" onchange="fnGPData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="GPFromMon" class="ddlCntrl" onchange="fnGPData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="GPToYr" class="ddlCntrl" onchange="fnGPData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="GPToMon" class="ddlCntrl" onchange="fnGPData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="GPChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnGPData() {
                    var fromYear = $('#GPFromYr').val();
                    var fromMonth = $('#GPFromMon').val();
                    var toYear = $('#GPToYr').val();
                    var toMonth = $('#GPToMon').val();
                    document.getElementById("GPChart").innerHTML = '&nbsp;';
                    document.getElementById("GPChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetGPData(fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                OP
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="OPFromYr" class="ddlCntrl" onchange="fnOPData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OPFromMon" class="ddlCntrl" onchange="fnOPData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="OPToYr" class="ddlCntrl" onchange="fnOPData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OPToMon" class="ddlCntrl" onchange="fnOPData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="OPChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnOPData() {
                    var fromYear = $('#OPFromYr').val();
                    var fromMonth = $('#OPFromMon').val();
                    var toYear = $('#OPToYr').val();
                    var toMonth = $('#OPToMon').val();
                    document.getElementById("OPChart").innerHTML = '&nbsp;';
                    document.getElementById("OPChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetOPData(fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                NP
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="NPFromYr" class="ddlCntrl" onchange="fnNPData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="NPFromMon" class="ddlCntrl" onchange="fnNPData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="NPToYr" class="ddlCntrl" onchange="fnNPData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="NPToMon" class="ddlCntrl" onchange="fnNPData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="NPChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnNPData() {
                    var fromYear = $('#NPFromYr').val();
                    var fromMonth = $('#NPFromMon').val();
                    var toYear = $('#NPToYr').val();
                    var toMonth = $('#NPToMon').val();
                    document.getElementById("NPChart").innerHTML = '&nbsp;';
                    document.getElementById("NPChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetNPData(fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                GP % Total Sale
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="GPFromYr2" class="ddlCntrl" onchange="fnGPPercentSaleData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="GPFromMon2" class="ddlCntrl" onchange="fnGPPercentSaleData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="GPToYr2" class="ddlCntrl" onchange="fnGPPercentSaleData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="GPToMon2" class="ddlCntrl" onchange="fnGPPercentSaleData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="GPPercentSaleChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnGPPercentSaleData() {
                    var fromYear = $('#GPFromYr2').val();
                    var fromMonth = $('#GPFromMon2').val();
                    var toYear = $('#GPToYr2').val();
                    var toMonth = $('#GPToMon2').val();
                    document.getElementById("GPPercentSaleChart").innerHTML = '&nbsp;';
                    document.getElementById("GPPercentSaleChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetGPPercentSaleData(fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                OP % Total Sale
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="OPFromYr2" class="ddlCntrl" onchange="fnOPPercentSaleData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OPFromMon2" class="ddlCntrl" onchange="fnOPPercentSaleData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="OPToYr2" class="ddlCntrl" onchange="fnOPPercentSaleData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OPToMon2" class="ddlCntrl" onchange="fnOPPercentSaleData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="OPPercentSaleChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnOPPercentSaleData() {
                    var fromYear = $('#OPFromYr2').val();
                    var fromMonth = $('#OPFromMon2').val();
                    var toYear = $('#OPToYr2').val();
                    var toMonth = $('#OPToMon2').val();
                    document.getElementById("OPPercentSaleChart").innerHTML = '&nbsp;';
                    document.getElementById("OPPercentSaleChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetOPPercentSaleData(fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                NP % Total Sale
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="NPFromYr2" class="ddlCntrl" onchange="fnNPPercentSaleData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="NPFromMon2" class="ddlCntrl" onchange="fnNPPercentSaleData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="NPToYr2" class="ddlCntrl" onchange="fnNPPercentSaleData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="NPToMon2" class="ddlCntrl" onchange="fnNPPercentSaleData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="NPPercentSaleChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnNPPercentSaleData() {
                    var fromYear = $('#NPFromYr2').val();
                    var fromMonth = $('#NPFromMon2').val();
                    var toYear = $('#NPToYr2').val();
                    var toMonth = $('#NPToMon2').val();
                    document.getElementById("NPPercentSaleChart").innerHTML = '&nbsp;';
                    document.getElementById("NPPercentSaleChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetNPPercentSaleData(fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                GP % Without Cell
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="GPFromYr3" class="ddlCntrl" onchange="fnGPPercentWithoutCellData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="GPFromMon3" class="ddlCntrl" onchange="fnGPPercentWithoutCellData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="GPToYr3" class="ddlCntrl" onchange="fnGPPercentWithoutCellData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="GPToMon3" class="ddlCntrl" onchange="fnGPPercentWithoutCellData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="GPPercentWithoutCellChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnGPPercentWithoutCellData() {
                    var fromYear = $('#GPFromYr3').val();
                    var fromMonth = $('#GPFromMon3').val();
                    var toYear = $('#GPToYr3').val();
                    var toMonth = $('#GPToMon3').val();
                    document.getElementById("GPPercentWithoutCellChart").innerHTML = '&nbsp;';
                    document.getElementById("GPPercentWithoutCellChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetGPPercentWithoutCellData(fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                OP % Without Cell
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="OPFromYr3" class="ddlCntrl" onchange="fnOPPercentWithoutCellData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OPFromMon3" class="ddlCntrl" onchange="fnOPPercentWithoutCellData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="OPToYr3" class="ddlCntrl" onchange="fnOPPercentWithoutCellData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="OPToMon3" class="ddlCntrl" onchange="fnOPPercentWithoutCellData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="OPPercentWithoutCellChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnOPPercentWithoutCellData() {
                    var fromYear = $('#OPFromYr3').val();
                    var fromMonth = $('#OPFromMon3').val();
                    var toYear = $('#OPToYr3').val();
                    var toMonth = $('#OPToMon3').val();
                    document.getElementById("OPPercentWithoutCellChart").innerHTML = '&nbsp;';
                    document.getElementById("OPPercentWithoutCellChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetOPPercentWithoutCellData(fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
    <div class="col-md-4">
        <div id="panel-1-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-2 font-weight-bold">
                                NP % Without Cell
                            </h2>
                        </td>
                        <td>
                            <table class="w-100">
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        From :&nbsp;
                                        <select asp-for="NPFromYr3" class="ddlCntrl" onchange="fnNPPercentWithoutCellData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="NPFromMon3" class="ddlCntrl" onchange="fnNPPercentWithoutCellData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align:right" class="pr-2">
                                        To :&nbsp;
                                        <select asp-for="NPToYr3" class="ddlCntrl" onchange="fnNPPercentWithoutCellData()">
                                            <option value="@crntYear" selected>@crntYear</option>
                                            <option value="@prvYear">@prvYear</option>
                                        </select>
                                        &nbsp;&nbsp;
                                        <select asp-for="NPToMon3" class="ddlCntrl" onchange="fnNPPercentWithoutCellData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                                        </select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="NPPercentWithoutCellChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Sunny Arora
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;sunny.arora@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnNPPercentWithoutCellData() {
                    var fromYear = $('#NPFromYr3').val();
                    var fromMonth = $('#NPFromMon3').val();
                    var toYear = $('#NPToYr3').val();
                    var toMonth = $('#NPToMon3').val();
                    document.getElementById("NPPercentWithoutCellChart").innerHTML = '&nbsp;';
                    document.getElementById("NPPercentWithoutCellChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetNPPercentWithoutCellData(fromYear, fromMonth, toYear, toMonth);
                }
            </script>
        </div>
    </div>
</div>

@*<div class="alert bg-info-100 text-white" role="alert">
        <strong>Inventory :-</strong> Inventory Quantity, Inventory Amount, FG Inventory Quantity, OQA Confirmation
</div>*@
<div class="row">
    @*<div class="col-md-6">
                <div id="panel-1" class="panel">
                    <div class="panel-hdr bg-gray-100">
                        <table class="w-100">
                            <tr>
                                <td>
                                    <h2 class="pl-3 font-weight-bold">
                                        Inventory (Pcs)
                                    </h2>
                                </td>
                                <td width="12%">
                                    <select asp-for="InvPlant" class="ddlCntrl2" onchange="fnInvData('inv')">
                                        <option selected value="NVTI">NVTI</option>
                                        <option value="BAWAL">Bawal</option>
                                        <option value="MANESAR">Manesar</option>
                                    </select>
                                </td>
                                <td width="12%">
                                    <select asp-for="InvDivision" class="ddlCntrl2" onchange="fnInvData('inv')">
                                        <option value="PACK">PACK</option>
                                        <option value="SMT">SMT</option>
                                    </select>
                                </td>
                                <td width="15%">
                                    <input asp-for="InvDate1" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                           onchange="fnInvData('1')" />
                                </td>
                                <td width="15%" class="pr-2">
                                    <input asp-for="InvDate2" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                           onchange="fnInvData('2')" />
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-container show">
                        <div class="panel-content bg-gray p-2">
                            <div id="InvChart">
                                <canvas style="width:100%; height:300px;"></canvas>
                            </div>
                        </div>
                    </div>
                    <script type="text/javascript">
                        function fnInvData(t) {
                            var plant = $('#InvPlant').val();
                            var division = $('#InvDivision').val();
                            var date1 = $('#InvDate1').val();
                            var date2 = $('#InvDate2').val();
                            if (date1 != '' && date2 != '') {
                                if (date2 >= date1) {
                                    document.getElementById("InvChart").innerHTML = '&nbsp;';
                                    document.getElementById("InvChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                                    GetInventoryData(plant, division, date1, date2, 'inv');
                                }
                                else {
                                    if (t == 1) {
                                        $('#InvDate1').val('');
                                        Swal.fire("Oops...", "Invalid Date Selection!", "error");
                                    }
                                    if (t == 2) {
                                        $('#InvDate2').val('');
                                        Swal.fire("Oops...", "Invalid Date Selection!", "error");
                                    }
                                }
                            }
                        }
                    </script>
                </div>
            </div>
            <div class="col-md-6">
                <div id="panel-1-1" class="panel">
                    <div class="panel-hdr bg-gray-100">
                        <table class="w-100">
                            <tr>
                                <td>
                                    <h2 class="pl-3">
                                        Inventory (Amt)
                                    </h2>
                                </td>
                                <td width="12%">
                                    <select asp-for="InvPlant2" class="ddlCntrl" onchange="fnInvAmtData('amt')">
                                        <option selected value="NVTI">NVTI</option>
                                        <option value="BAWAL">Bawal</option>
                                        <option value="MANESAR">Manesar</option>
                                    </select>
                                </td>
                                <td width="12%">
                                    <select asp-for="InvDivision2" class="ddlCntrl" onchange="fnInvAmtData('amt')">
                                        <option value="PACK">PACK</option>
                                        <option value="SMT">SMT</option>
                                    </select>
                                </td>
                                <td width="15%">
                                    <input asp-for="InvAmtDate1" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                           onchange="fnInvAmtData('1')" />
                                </td>
                                <td width="15%" class="pr-2">
                                    <input asp-for="InvAmtDate2" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                           onchange="fnInvAmtData('2')" />
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-container show">
                        <div class="panel-content bg-gray p-2">
                            <div id="InvAmtChart">
                                <canvas style="width:100%; height:300px;"></canvas>
                            </div>
                        </div>
                    </div>
                    <script type="text/javascript">
                        function fnInvAmtData(t) {
                            var plant = $('#InvPlant2').val();
                            var division = $('#InvDivision2').val();
                            var date1 = $('#InvAmtDate1').val();
                            var date2 = $('#InvAmtDate2').val();
                            if (date1 != '' && date2 != '') {
                                if (date2 >= date1) {
                                    document.getElementById("InvAmtChart").innerHTML = '&nbsp;';
                                    document.getElementById("InvAmtChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                                    GetInventoryData(plant, division, date1, date2, 'amt');
                                }
                                else {
                                    if (t == 1) {
                                        $('#InvAmtDate1').val('');
                                        Swal.fire("Oops...", "Invalid Date Selection!", "error");
                                    }
                                    if (t == 2) {
                                        $('#InvAmtDate2').val('');
                                        Swal.fire("Oops...", "Invalid Date Selection!", "error");
                                    }
                                }
                            }
                        }
                    </script>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div id="panel-1" class="panel">
                    <div class="panel-hdr bg-gray-100">
                        <table class="w-100">
                            <tr>
                                <td>
                                    <h2 class="pl-3 font-weight-bold">
                                        FG Inventory
                                    </h2>
                                </td>
                                <td width="12%">
                                    <select asp-for="InvPlant3" class="ddlCntrl" onchange="fnInvFGData('0')">
                                        <option selected value="NVTI">NVTI</option>
                                        <option value="BAWAL">Bawal</option>
                                        <option value="MANESAR">Manesar</option>
                                    </select>
                                </td>
                                <td width="12%">
                                    <select asp-for="InvDivision3" class="ddlCntrl" onchange="fnInvFGData('0')">
                                        <option value="PACK">PACK</option>
                                        <option value="SMT">SMT</option>
                                    </select>
                                </td>
                                <td width="15%">
                                    <input asp-for="InvFGDate1" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                           onchange="fnInvFGData('1')" />
                                </td>
                                <td width="15%" class="pr-2">
                                    <input asp-for="InvFGDate2" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                           onchange="fnInvFGData('2')" />
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-container show">
                        <div class="panel-content bg-gray p-2">
                            <div id="InvFGChart">
                                <canvas style="width:100%; height:300px;"></canvas>
                            </div>
                        </div>
                    </div>
                    <script type="text/javascript">
                        function fnInvFGData(t) {
                            var plant = $('#InvPlant3').val();
                            var division = $('#InvDivision3').val();
                            var date1 = $('#InvFGDate1').val();
                            var date2 = $('#InvFGDate2').val();
                            if (date1 != '' && date2 != '') {
                                if (date2 >= date1) {
                                    document.getElementById("InvFGChart").innerHTML = '&nbsp;';
                                    document.getElementById("InvFGChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                                    GetInvFGData(plant, division, date1, date2);
                                }
                                else {
                                    if (t == 1) {
                                        $('#InvFGDate1').val('');
                                        Swal.fire("Oops...", "Invalid Date Selection!", "error");
                                    }
                                    if (t == 2) {
                                        $('#InvFGDate2').val('');
                                        Swal.fire("Oops...", "Invalid Date Selection!", "error");
                                    }
                                }
                            }
                        }
                    </script>
                </div>
            </div>
            <div class="col-md-6">
                <div id="panel-1-1" class="panel">
                    <div class="panel-hdr bg-gray-100">
                        <table class="w-100">
                            <tr>
                                <td>
                                    <h2 class="pl-3 font-weight-bold">
                                        OQA
                                    </h2>
                                </td>
                                <td width="12%">
                                    <select asp-for="OQAPlant" class="ddlCntrl" onchange="fnOQAData('0')">
                                        <option selected value="NVTI">NVTI</option>
                                        <option value="BAWAL">Bawal</option>
                                        <option value="MANESAR">Manesar</option>
                                    </select>
                                </td>
                                <td width="15%">
                                    <input asp-for="OQADate1" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                           onchange="fnOQAData('1')" />
                                </td>
                                <td width="15%" class="pr-2">
                                    <input asp-for="OQADate2" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                           onchange="fnOQAData('2')" />
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-container show">
                        <div class="panel-content bg-gray p-2">
                            <div id="OQAChart">
                                <canvas style="width:100%; height:300px;"></canvas>
                            </div>
                        </div>
                    </div>
                    <script type="text/javascript">
                        function fnOQAData(t) {
                            var plant = $('#OQAPlant').val();
                            var date1 = $('#OQADate1').val();
                            var date2 = $('#OQADate2').val();
                            if (date1 != '' && date2 != '') {
                                if (date2 >= date1) {
                                    document.getElementById("OQAChart").innerHTML = '&nbsp;';
                                    document.getElementById("OQAChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                                    GetOQAConfirmationData(plant, date1, date2);
                                }
                                else {
                                    if (t == 1) {
                                        $('#OQADate1').val('');
                                        Swal.fire("Oops...", "Invalid Date Selection!", "error");
                                    }
                                    if (t == 2) {
                                        $('#OQADate2').val('');
                                        Swal.fire("Oops...", "Invalid Date Selection!", "error");
                                    }
                                }
                            }
                        }
                    </script>
                </div>
     </div>*@
</div>
<div class="alert bg-info-500 text-white" role="alert">
    <strong>Production :-</strong> UPH, UPPH, Auto LU
</div>
<div class="row">
    <div class="col-md-6">
        <div id="panel-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-3 font-weight-bold">
                                UPH
                            </h2>
                        </td>
                        <td width="15%">
                            <select asp-for="UPHPlant" class="ddlCntrl" onchange="fnUPHData('0')">
                                <option selected value="NVTI">NVTI</option>
                                <option value="BAWAL">Bawal</option>
                                <option value="MANESAR">Manesar</option>
                            </select>
                        </td>
                        <td width="15%">
                            <select asp-for="UPHLineType" class="ddlCntrl" onchange="fnUPHData()" asp-items="@(new SelectList(Model.LineList, "Value", "Text"))">
                                <option selected value="0">-- All --</option>
                            </select>
                        </td>
                        <td width="15%" class="pr-2">
                            <input asp-for="UPHDate1" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                   onchange="fnUPHData('1')" />
                        </td>
                    </tr>
                    <tr>
                        <td></td>
                        <td width="15%">
                            <select asp-for="UPHDivision" class="ddlCntrl" onchange="fnUPHData('0')">
                                <option value="PACK">PACK</option>
                                <option value="SMT">SMT</option>
                            </select>
                        </td>
                        <td></td>
                        <td width="15%" class="pr-2 pb-2">
                            <input asp-for="UPHDate2" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                   onchange="fnUPHData('2')" />
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="UPHChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Arun Saini
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;arun.saini@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnUPHData(t) {
                    var plant = $('#UPHPlant').val();
                    var division = $('#UPHDivision').val();
                    var date1 = $('#UPHDate1').val();
                    var date2 = $('#UPHDate2').val();
                    var lineType = $('#UPHLineType').val();
                    if (date1 != '' && date2 != '') {
                        if (date2 >= date1) {
                            document.getElementById("UPHChart").innerHTML = '&nbsp;';
                            document.getElementById("UPHChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                            GetUPHData(plant, division, date1, date2, lineType);
                        }
                        else {
                            if (t == 1) {
                                $('#UPHDate1').val('');
                                Swal.fire("Oops...", "Invalid Date Selection!", "error");
                            }
                            if (t == 2) {
                                $('#UPHDate2').val('');
                                Swal.fire("Oops...", "Invalid Date Selection!", "error");
                            }
                        }
                    }
                }
            </script>
        </div>
    </div>
    <div class="col-md-6">
        <div id="panel-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-3 font-weight-bold">
                                UPPH
                            </h2>
                        </td>
                        <td width="15%">
                            <select asp-for="UPPHPlant" class="ddlCntrl" onchange="fnUPPHData('0')">
                                <option selected value="NVTI">NVTI</option>
                                <option value="BAWAL">Bawal</option>
                                <option value="MANESAR">Manesar</option>
                            </select>
                        </td>
                        <td width="15%">
                            <select class="ddlCntrl" onchange="fnUPPHData()" asp-for="UPPHLineType" asp-items="@(new SelectList(Model.LineList2, "Value", "Text"))">
                                <option selected value="0">-- All --</option>
                            </select>
                        </td>
                        <td width="15%" class="pr-2">
                            <input asp-for="UPPHDate1" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                   onchange="fnUPPHData('1')" />
                        </td>
                    </tr>
                    <tr>
                        <td></td>
                        <td width="15%">
                            <select asp-for="UPPHDivision" class="ddlCntrl" onchange="fnUPPHData('0')">
                                <option value="PACK">PACK</option>
                                <option value="SMT">SMT</option>
                            </select>
                        </td>
                        <td width="15%">
                            <select class="ddlCntrl" onchange="fnUPPHData()" asp-for="UPPHCust" asp-items="@(new SelectList(Model.CustomerList, "Value", "Text"))">
                            </select>
                        </td>
                        <td width="15%" class="pr-2 pb-2">
                            <input asp-for="UPPHDate2" autocomplete="off" class="dateCntrl" type="date" placeholder="dd-mmm-yyyy" required data-date-format="d-M-yyyy"
                                   onchange="fnUPPHData('2')" />
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <div class="panel-content bg-gray p-2">
                    <div id="UPPHChart">
                        <canvas style="width:100%; height:300px;"></canvas>
                    </div>
                </div>
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Arun Saini
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;arun.saini@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnUPPHData(t) {
                    var plant = $('#UPPHPlant').val();
                    var division = $('#UPPHDivision').val();
                    var date1 = $('#UPPHDate1').val();
                    var date2 = $('#UPPHDate2').val();
                    var lineType = $('#UPPHLineType').val();
                    var cust = $('#UPPHCust').val();
                    if (date1 != '' && date2 != '') {
                        if (date2 >= date1) {
                            document.getElementById("UPPHChart").innerHTML = '&nbsp;';
                            document.getElementById("UPPHChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                            GetUPPHData(plant, division, date1, date2, lineType, cust);
                        }
                        else {
                            if (t == 1) {
                                $('#UPPHDate1').val('');
                                Swal.fire("Oops...", "Invalid Date Selection!", "error");
                            }
                            if (t == 2) {
                                $('#UPPHDate2').val('');
                                Swal.fire("Oops...", "Invalid Date Selection!", "error");
                            }
                        }
                    }
                }
            </script>
        </div>
    </div> 
</div>
<div class="row">
    <div class="col-md-6">
        <div id="panel-1" class="panel">
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td>
                            <h2 class="pl-3 font-weight-bold">
                                Auto LU
                            </h2>
                        </td>
                        <td width="12%">
                            <select asp-for="ALPlant" class="ddlCntrl" onchange="fnAutoLUData('0')">
                                <option value="BAWAL">Bawal</option>
                                <option value="MANESAR">Manesar</option>
                            </select>
                        </td>
                        <td width="10%">
                            <select asp-for="ALYear" class="ddlCntrl" onchange="fnAutoLUData()">
                                <option value="@crntYear" selected>@crntYear</option>
                                <option value="@prvYear">@prvYear</option>
                            </select>
                        </td>
                        <td width="12%" class="pr-2">
                            <select asp-for="ALMonth" class="ddlCntrl" onchange="fnAutoLUData()" asp-items="@(new SelectList(Model.MonthList, "Value", "Text"))">
                            </select>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="panel-container show">
                <br />
                <div id="ALChart" style="width:100%; height:300px;"></div>
                <br />
                <br />
            </div>
            <div class="panel-hdr bg-gray-100">
                <table class="w-100">
                    <tr>
                        <td width="50%" style="text-align:center">
                            Responsible : Arun Saini
                        </td>
                        <td style="text-align:center" class="text-primary">
                            <i class="fas fa-envelope"></i>&nbsp;arun.saini@nvtpower.com
                        </td>
                    </tr>
                </table>
            </div>
            <script type="text/javascript">
                function fnAutoLUData() {
                    var plant = $('#ALPlant').val();
                    var year = $('#ALYear').val();
                    var month = $('#ALMonth').val();
                    document.getElementById("ALChart").innerHTML = '&nbsp;';
                    document.getElementById("ALChart").innerHTML = '<canvas style="width:100%; height:300px;"></canvas>';
                    GetAutoLUData(plant, year, month);
                }
            </script>
        </div>
    </div>
</div>

@section ScriptsBlock {
    <script src="~/js/statistics/chartjs/chartjs.bundle.js"></script>
    <script src="~/js/statistics/c3/c3.js"></script>
    <script src="~/js/statistics/d3/d3.js"></script>
    <script src="~/js/statistics/chartist/chartist.js"></script>

    <script>
        var colors = [color.success._500, color.danger._500, color.info._500, color.primary._500, color.warning._500];
        var colors1 = [color.primary._500, color.warning._500, color.success._500, color.danger._500, color.info._500];
        var colors2 = [color.primary._500, color.danger._500, color.warning._500, color.success._500];
        var colors3 = [color.success._500, color.danger._500, color.info._500, color.warning._500];
        var colors4 = [color.warning._100, color.info._500, color.success._500];

        var ShipmentData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.ShipmentData))');
        var RevenueData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.RevenueData))');

        var RFCAllData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.RFCAllData))');
        var OFRData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.OFRData))');

        var ProfitData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.ProfitData))');
        var PercentSaleData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.PercentSaleData))');
        var PercentWithoutCellData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.PercentWithoutCellData))');

        @*var InventoryData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.InventoryData))');
        var InventoryFGData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.InventoryFGData))');
        var OQAConfirmationData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.OQAConfirmationData))');*@

        var UPHData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.UPHData))');
        var UPPHData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.UPPHData))');
        var AutoLUData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.AutoLUData))');

        $(document).ready(function () {
            ShipQtyChart(ShipmentData);
            SalesAmtChart(RFCAllData);
            CellRevenueChart(RevenueData);
            PackRevenueChart(RevenueData);

            ScrapChart(RFCAllData);
            MaterialChart(RFCAllData);
            IFRChart(RFCAllData);
            DLChart(RFCAllData);
            MOHChart(RFCAllData);
            DepChart(RFCAllData);

            SGAChart(RFCAllData);
            IDLChart(RFCAllData);
            RoyalityChart(RFCAllData);
            OFRChart(OFRData);

            ForexChart(RFCAllData);
            OtherCostChart(RFCAllData);
            OtherIncomeChart(RFCAllData);
            TaxChart(RFCAllData);

            GPChart(ProfitData);
            OPChart(ProfitData);
            NPChart(ProfitData);

            GPPercentSaleChart(PercentSaleData);
            OPPercentSaleChart(PercentSaleData);
            NPPercentSaleChart(PercentSaleData);

            GPPercentWithoutCellChart(PercentWithoutCellData);
            OPPercentWithoutCellChart(PercentWithoutCellData);
            NPPercentWithoutCellChart(PercentWithoutCellData);

            //InvChart(InventoryData);
            //InvAmtChart(InventoryData);
            //InvFGChart(InventoryFGData);
            //OQAConfirmationChart(OQAConfirmationData);

            UPHChart(UPHData);
            UPPHChart(UPPHData);
            AutoLUChart(AutoLUData);
        });

        function GetShipmentData(plant, materialCode, date1, date2, t) {
            var requestUrl = 'EIS/GetShipmentData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { plant: plant, materialCode: materialCode, date1: date1, date2: date2 },
                success: function (response) {
                    if (t == 'qty') {
                        ShipQtyChart(response);
                    }
                    //if (t == 'amt') {
                    //    ShipAmtChart(response);
                    //}
                },
                error: function () {
                }
            });
        }
        var ShipQtyChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    x_list.push(data[i].dataDate);
                    y_list.push(data[i].quantity);
                    total = total + parseInt(data[i].quantity);
                }
            }
            if (total > 0) {
                total = (total / 1000).toFixed(2) + ' K';
            }
            var ShipQtyChartData = {
                labels: x_list,
                datasets: [{
                    label: "Quantity",
                    backgroundColor: color.success._50,
                    borderColor: color.primary._500,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ShipQtyChartConfig = {
                type: 'line',
                data: ShipQtyChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Pcs : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000 + ' K';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    ctx.fillText(parseFloat((parseFloat(data / 1000)).toFixed(2)) + ' K', bar._model.x, bar._model.y - 5);
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#ShipQtyChart > canvas").get(0).getContext("2d"), ShipQtyChartConfig);
        }

        function GetSalesAmtData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    SalesAmtChart(response);
                },
                error: function () {
                }
            });
        }
        var SalesAmtChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'sal') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Income",
                    backgroundColor: color.success._100,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#SalesAmtChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetCellRevenueData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRevenueDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    CellRevenueChart(response);
                },
                error: function () {
                }
            });
        }
        var CellRevenueChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'cell_revenue') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Income",
                    backgroundColor: color.success._100,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y+20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#CellRevenueChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetPackRevenueData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRevenueDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    PackRevenueChart(response);
                },
                error: function () {
                }
            });
        }
        var PackRevenueChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'pack_revenue') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Income",
                    backgroundColor: color.success._100,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y +20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#PackRevenueChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetScrapData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    ScrapChart(response);
                },
                error: function () {
                }
            });
        }
        var ScrapChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'scr') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Income",
                    backgroundColor: color.success._100,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y +20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#ScrapChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetMaterialData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    MaterialChart(response);
                },
                error: function () {
                }
            });
        }
        var MaterialChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'mat') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#MatChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetIFRData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    IFRChart(response);
                },
                error: function () {
                }
            });
        }
        var IFRChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'inf') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#IFRChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetDLData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    DLChart(response);
                },
                error: function () {
                }
            });
        }
        var DLChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'dl') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#DLChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetMOHData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    MOHChart(response);
                },
                error: function () {
                }
            });
        }
        var MOHChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'moh') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#MOHChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetDepreciationData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    DepChart(response);
                },
                error: function () {
                }
            });
        }
        var DepChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'dep') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#DepChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetSGAData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    SGAChart(response);
                },
                error: function () {
                }
            });
        }
        var SGAChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'sga') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#SGAChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetIDLData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    IDLChart(response);
                },
                error: function () {
                }
            });
        }
        var IDLChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'lab') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#IDLChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetRoyalityData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    RoyalityChart(response);
                },
                error: function () {
                }
            });
        }
        var RoyalityChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'rly') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#RoyalityChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetOFRData(fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetOFRData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    OFRChart(response);
                },
                error: function () {
                }
            });
        }
        var OFRChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    x_list.push(data[i].monthName);
                    y_list.push(data[i].amount);
                    total = total + parseInt(data[i].amount);
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#OFRChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetForexData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    ForexChart(response);
                },
                error: function () {
                }
            });
        }
        var ForexChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'fxc') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#ForexChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetOtherCostData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    OtherCostChart(response);
                },
                error: function () {
                }
            });
        }
        var OtherCostChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'otc') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#OTCChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetOtherIncomeData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    OtherIncomeChart(response);
                },
                error: function () {
                }
            });
        }
        var OtherIncomeChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'oic') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Income",
                    backgroundColor: color.success._100,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#OICChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetTaxData(category, fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetRFCDataByCategory';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { category: category, fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    TaxChart(response);
                },
                error: function () {
                }
            });
        }
        var TaxChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    if (data[i].groupName.toLowerCase() == 'tax') {
                        x_list.push(data[i].monthName);
                        y_list.push(data[i].amount);
                        total = total + parseInt(data[i].amount);
                    }
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Expense",
                    backgroundColor: "#F2D7D5",
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#TaxChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetGPData(fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetProfitData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    GPChart(response);
                },
                error: function () {
                }
            });
        }
        var GPChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    x_list.push(data[i].monthName);
                    y_list.push(data[i].gpAmount);
                    total = total + parseInt(data[i].gpAmount);
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Profit",
                    backgroundColor: color.success._100,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#GPChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetOPData(fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetProfitData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    OPChart(response);
                },
                error: function () {
                }
            });
        }
        var OPChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    x_list.push(data[i].monthName);
                    y_list.push(data[i].opAmount);
                    total = total + parseInt(data[i].opAmount);
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Profit",
                    backgroundColor: color.success._300,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#OPChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetNPData(fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetProfitData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    NPChart(response);
                },
                error: function () {
                }
            });
        }
        var NPChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    x_list.push(data[i].monthName);
                    y_list.push(data[i].npAmount);
                    total = total + parseInt(data[i].npAmount);
                }
            }
            if (total > 0) {
                total = (total / 1000000).toFixed(2) + ' M';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Profit",
                    backgroundColor: color.success._500,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Total Amount : ' + total
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    if (total == 0) {
                                        return value;
                                    }
                                    else {
                                        return value / 1000000 + ' M';
                                    }
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data / 1000000)).toFixed(2)) + ' M', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#NPChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetGPPercentSaleData(fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetProfitPercentSaleData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    GPPercentSaleChart(response);
                },
                error: function () {
                }
            });
        }
        var GPPercentSaleChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            var count = 0;
            var avg = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    x_list.push(data[i].monthName);
                    y_list.push(data[i].gpPer);
                    total += data[i].gpPer;
                    count += 1;
                }
            }
            if (total > 0) {
                avg = (total / count).toFixed(2) + ' %';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Profit %",
                    backgroundColor: color.success._100,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Average : ' + avg,
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    return value + ' %';
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data)).toFixed(2)) + ' %', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#GPPercentSaleChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetOPPercentSaleData(fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetProfitPercentSaleData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    OPPercentSaleChart(response);
                },
                error: function () {
                }
            });
        }
        var OPPercentSaleChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            var count = 0;
            var avg = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    x_list.push(data[i].monthName);
                    y_list.push(data[i].opPer);
                    total += data[i].opPer;
                    count += 1;
                }
            }
            if (total > 0) {
                avg = (total / count).toFixed(2) + ' %';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Profit %",
                    backgroundColor: color.success._300,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Average : ' + avg,
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    return value + ' %';
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data)).toFixed(2)) + ' %', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#OPPercentSaleChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetNPPercentSaleData(fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetProfitPercentSaleData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    NPPercentSaleChart(response);
                },
                error: function () {
                }
            });
        }
        var NPPercentSaleChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            var count = 0;
            var avg = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    x_list.push(data[i].monthName);
                    y_list.push(data[i].npPer);
                    total += data[i].npPer;
                    count += 1;
                }
            }
            if (total > 0) {
                avg = (total / count).toFixed(2) + ' %';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Profit %",
                    backgroundColor: color.success._500,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Average : ' + avg,
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    return value + ' %';
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data)).toFixed(2)) + ' %', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#NPPercentSaleChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetGPPercentWithoutCellData(fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetProfitPercentWithoutCellData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    GPPercentWithoutCellChart(response);
                },
                error: function () {
                }
            });
        }
        var GPPercentWithoutCellChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            var count = 0;
            var avg = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    x_list.push(data[i].monthName);
                    y_list.push(data[i].gpPer);
                    total += data[i].gpPer;
                    count += 1;
                }
            }
            if (total > 0) {
                avg = (total / count).toFixed(2) + ' %';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Profit %",
                    backgroundColor: color.success._100,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Average : ' + avg,
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    return value + ' %';
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data)).toFixed(2)) + ' %', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#GPPercentWithoutCellChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetOPPercentWithoutCellData(fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetProfitPercentWithoutCellData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    OPPercentWithoutCellChart(response);
                },
                error: function () {
                }
            });
        }
        var OPPercentWithoutCellChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            var count = 0;
            var avg = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    x_list.push(data[i].monthName);
                    y_list.push(data[i].opPer);
                    total += data[i].opPer;
                    count += 1;
                }
            }
            if (total > 0) {
                avg = (total / count).toFixed(2) + ' %';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Profit %",
                    backgroundColor: color.success._300,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Average : ' + avg,
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    return value + ' %';
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data)).toFixed(2)) + ' %', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#OPPercentWithoutCellChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        function GetNPPercentWithoutCellData(fromYear, fromMonth, toYear, toMonth) {
            var requestUrl = 'EIS/GetProfitPercentWithoutCellData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { fromYear: fromYear, fromMonth: fromMonth, toYear: toYear, toMonth: toMonth },
                success: function (response) {
                    NPPercentWithoutCellChart(response);
                },
                error: function () {
                }
            });
        }
        var NPPercentWithoutCellChart = function (data) {
            var x_list = [];
            var y_list = [];
            var total = 0;
            var count = 0;
            var avg = 0;
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    x_list.push(data[i].monthName);
                    y_list.push(data[i].npPer);
                    total += data[i].npPer;
                    count += 1;
                }
            }
            if (total > 0) {
                avg = (total / count).toFixed(2) + ' %';
            }
            var ChartData = {
                labels: x_list,
                datasets: [{
                    label: "Profit %",
                    backgroundColor: color.success._500,
                    borderColor: color.info._300,
                    borderWidth: 1,
                    pointBackgroundColor: color.fusion._200,
                    pointBorderColor: color.fusion._400,
                    pointBorderWidth: 1,
                    data: y_list,
                }]
            };
            var ChartConfig = {
                type: 'bar',
                data: ChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: 'Average : ' + avg,
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true, scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11,
                                callback: function (value, index, values) {
                                    return value + ' %';
                                }
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';
                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i); meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {
                                    }
                                    else {
                                        ctx.fillText(parseFloat((parseFloat(data)).toFixed(2)) + ' %', bar._model.x, bar._model.y + 20);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#NPPercentWithoutCellChart > canvas").get(0).getContext("2d"), ChartConfig);
        }

        //function GetInventoryData(plant, division, date1, date2, t) {
        //    var requestUrl = 'EIS/GetInventoryData';
        //    $.ajax({
        //        url: requestUrl,
        //        type: "POST",
        //        data: { plant: plant, division: division, date1: date1, date2: date2, type: t },
        //        success: function (response) {
        //            if (t == 'inv') {
        //                InvChart(response);
        //            }
        //            if (t == 'amt') {
        //                InvAmtChart(response);
        //            }
        //        },
        //        error: function () {
        //        }
        //    });
        //}
        //var InvChart = function (data) {
        //    var con = 0, con1 = 0;
        //    var fg = 0, fg1 = 0;
        //    var pck = 0, pck1 = 0;
        //    var rm = 0, rm1 = 0;
        //    var oth = 0, oth1 = 0;
        //    var scrap = 0, scrap1 = 0;
        //    var spare = 0, spare1 = 0;
        //    var total = 0;
        //    if (data != null) {
        //        for (i = 0; i < data.length; i++) {
        //            if (data[i].groupName.toLowerCase() == 'consumable') { con1 = con = data[i].quantity; }
        //            if (data[i].groupName.toLowerCase() == 'fg') { fg1 = fg = data[i].quantity; }
        //            /*if (data[i].groupName.toLowerCase() == 'others') { oth = data[i].quantity; }*/
        //            if (data[i].groupName.toLowerCase() == 'packing material') { pck1 = pck = data[i].quantity; }
        //            if (data[i].groupName.toLowerCase() == 'rm') { rm1 = rm = data[i].quantity; }
        //            if (data[i].groupName.toLowerCase() == 'scrap') { scrap1 = scrap = data[i].quantity; }
        //            if (data[i].groupName.toLowerCase() == 'spare') { spare1 = spare = data[i].quantity; }
        //        }
        //        total = parseInt(con) + parseInt(fg) + parseInt(oth) + parseInt(pck) + parseInt(rm) + parseInt(scrap) + parseInt(spare);
        //        total = total / 1000;
        //        total = parseInt(total) + ' K';

        //        con1 = parseInt(con1 / 1000) + ' K';
        //        fg1 = parseInt(fg1 / 1000) + ' K';
        //        pck1 = parseInt(pck1 / 1000) + ' K';
        //        rm1 = parseInt(rm1 / 1000) + ' K';
        //        //oth1 = parseInt(oth1 / 1000) + ' K';
        //        scrap1 = parseInt(scrap1 / 1000) + ' K';
        //        spare1 = parseInt(spare1 / 1000) + ' K';
        //    }
        //    var donutChart = c3.generate({
        //        bindto: "#InvChart",
        //        data: {
        //            columns: [
        //                ['Consumable : ' + con1, con],
        //                ['FG : ' + fg1, fg],
        //                ["Packing : " + pck1, pck],
        //                ["Raw Material : " + rm1, rm],
        //                /*["Others : " + oth, oth],*/
        //                ["Scrap : " + scrap1, scrap],
        //                ["Spare : " + spare1, spare],
        //            ],
        //            type: 'donut'
        //        },
        //        donut: {
        //            title: "Total : " + total
        //        },
        //        color: {
        //            pattern: colors
        //        },
        //        legend: {
        //            position: 'right'
        //        }
        //    });
        //}
        //var InvAmtChart = function (data) {
        //    var con = 0, con1 = 0;
        //    var fg = 0, fg1 = 0;
        //    var pck = 0, pck1 = 0;
        //    var rm = 0, rm1 = 0;
        //    var oth = 0, oth1 = 0;
        //    var scrap = 0, scrap1 = 0;
        //    var spare = 0, spare1 = 0;
        //    var total = 0;
        //    if (data != null) {

        //        for (i = 0; i < data.length; i++) {
        //            if (data[i].groupName.toLowerCase() == 'consumable') { con1 = con = data[i].amount; }
        //            if (data[i].groupName.toLowerCase() == 'fg') { fg1 = fg = data[i].amount; }
        //            //if (data[i].groupName.toLowerCase() == 'others') { oth = data[i].amount; }
        //            if (data[i].groupName.toLowerCase() == 'packing material') { pck1 = pck = data[i].amount; }
        //            if (data[i].groupName.toLowerCase() == 'rm') { rm1 = rm = data[i].amount; }
        //            if (data[i].groupName.toLowerCase() == 'scrap') { scrap1 = scrap = data[i].amount; }
        //            if (data[i].groupName.toLowerCase() == 'spare') { spare1 = spare = data[i].amount; }
        //        }
        //        total = parseInt(con) + parseInt(fg) + parseInt(oth) + parseInt(pck) + parseInt(rm) + parseInt(scrap) + parseInt(spare);
        //        total = total / 1000000;
        //        total = parseInt(total) + ' M';

        //        con1 = parseInt(con1 / 1000000) + ' M';
        //        fg1 = parseInt(fg1 / 1000000) + ' M';
        //        pck1 = parseInt(pck1 / 1000000) + ' M';
        //        rm1 = parseInt(rm1 / 1000000) + ' M';
        //        //oth1 = parseInt(oth1 / 1000000) + ' M';
        //        scrap1 = parseInt(scrap1 / 1000000) + ' M';
        //        spare1 = parseInt(spare1 / 1000000) + ' M';
        //    }
        //    var donutChart = c3.generate({
        //        bindto: "#InvAmtChart",
        //        data: {
        //            columns: [
        //                ['Consumable : ' + con1, con],
        //                ['FG : ' + fg1, fg],
        //                ["Packing : " + pck1, pck],
        //                ["Raw Material : " + rm1, rm],
        //                /*["Others : " + oth1, oth],*/
        //                ["Scrap : " + scrap1, scrap],
        //                ["Spare : " + spare1, spare],
        //            ],
        //            type: 'donut'
        //        },
        //        donut: {
        //            title: "Total : " + total
        //        },
        //        color: {
        //            pattern: colors1
        //        },
        //        legend: {
        //            position: 'right'
        //        }
        //    });
        //}

        //function GetInvFGData(plant, division, date1, date2) {
        //    var requestUrl = 'EIS/GetInvFGData';
        //    $.ajax({
        //        url: requestUrl,
        //        type: "POST",
        //        data: { plant: plant, division: division, date1: date1, date2: date2 },
        //        success: function (response) {
        //            InvFGChart(response);
        //        },
        //        error: function () {
        //        }
        //    });
        //}
        //var InvFGChart = function (data) {
        //    var group_list = [];
        //    var qty_list = [];
        //    if (data != null) {
        //        for (i = 0; i < data.length; i++) {
        //            group_list.push(data[i].groupName);
        //            qty_list.push(data[i].quantity);
        //        }
        //    }
        //    var fgChartData = {
        //        labels: group_list,
        //        datasets: [{
        //            label: "FG Available",
        //            backgroundColor: color.primary._300,
        //            borderColor: color.primary._500,
        //            borderWidth: 1,
        //            data: qty_list
        //        }]
        //    };
        //    var fgDataConfig = {
        //        type: 'horizontalBar',
        //        data: fgChartData,
        //        options: {
        //            responsive: true,
        //            legend: {
        //                position: 'bottom',
        //            },
        //            title: {
        //                display: true,
        //                text: 'FG Inventory - Customer wise'
        //            },
        //            scales: {
        //                xAxes: [{
        //                    display: true,
        //                    scaleLabel: {
        //                        display: false,
        //                        labelString: ''
        //                    },
        //                    gridLines: {
        //                        display: true,
        //                        color: "#f2f2f2"
        //                    },
        //                    ticks: {
        //                        beginAtZero: true,
        //                        fontSize: 11,
        //                        callback: function (value, index, values) {
        //                            return value / 1000 + ' K';
        //                        }
        //                    }
        //                }],
        //                yAxes: [{
        //                    display: true,
        //                    scaleLabel: {
        //                        display: false,
        //                        labelString: ''
        //                    },
        //                    gridLines: {
        //                        display: true,
        //                        color: "#f2f2f2"
        //                    },
        //                    ticks: {
        //                        beginAtZero: true,
        //                        fontSize: 11
        //                    }
        //                }]
        //            },
        //            "hover": {
        //                "animationDuration": 0
        //            },
        //            "animation": {
        //                "duration": 1,
        //                "onComplete": function () {
        //                    var chartInstance = this.chart,
        //                        ctx = chartInstance.ctx;

        //                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
        //                    ctx.textAlign = 'left';
        //                    ctx.textBaseline = 'bottom';

        //                    this.data.datasets.forEach(function (dataset, i) {
        //                        var meta = chartInstance.controller.getDatasetMeta(i);
        //                        meta.data.forEach(function (bar, index) {
        //                            var data = dataset.data[index];
        //                            if (data == '0.00') {

        //                            }
        //                            else {
        //                                ctx.fillText(parseFloat((parseFloat(data / 1000)).toFixed(2)) + ' K', bar._model.x, bar._model.y + 5);
        //                            }
        //                        });
        //                    });
        //                }
        //            }
        //        }
        //    }
        //    new Chart($("#InvFGChart > canvas").get(0).getContext("2d"), fgDataConfig);
        //}

        //function GetOQAConfirmationData(plant, date1, date2) {
        //    var requestUrl = 'EIS/GetOQAConfirmationData';
        //    $.ajax({
        //        url: requestUrl,
        //        type: "POST",
        //        data: { plant: plant, date1: date1, date2: date2 },
        //        success: function (oqaData) {
        //            OQAConfirmationChart(oqaData);
        //        },
        //        error: function () {
        //        }
        //    });
        //}
        //var OQAConfirmationChart = function (data) {
        //    var x_list = [];
        //    var y_list = [];
        //    if (data != null) {
        //        for (i = 0; i < data.length; i++) {
        //            x_list.push(data[i].groupName);
        //            y_list.push(data[i].quantity);
        //        }
        //    }
        //    var barChartData = {
        //        labels: x_list,
        //        datasets: [{
        //            label: "OQA Confirmed",
        //            backgroundColor: color.success._300,
        //            borderColor: color.success._500,
        //            borderWidth: 1,
        //            data: y_list
        //        }]
        //    };
        //    var OQAConfirmDataConfig = {
        //        type: 'bar',
        //        data: barChartData,
        //        options: {
        //            responsive: true,
        //            maintainAspectRatio: true,
        //            legend: {
        //                position: 'bottom',
        //            },
        //            title: {
        //                display: true,
        //                text: 'OQA Confirmation'
        //            },
        //            scales: {
        //                xAxes: [{
        //                    display: true,
        //                    scaleLabel: {
        //                        display: false,
        //                        labelString: ''
        //                    },
        //                    gridLines: {
        //                        display: true,
        //                        color: "#f2f2f2"
        //                    },
        //                    ticks: {
        //                        beginAtZero: true,
        //                        fontSize: 11
        //                    }
        //                }],
        //                yAxes: [{
        //                    display: true,
        //                    scaleLabel: {
        //                        display: false,
        //                        labelString: ''
        //                    },
        //                    gridLines: {
        //                        display: true,
        //                        color: "#f2f2f2"
        //                    },
        //                    ticks: {
        //                        beginAtZero: true,
        //                        fontSize: 11,
        //                        callback: function (value, index, values) {
        //                            return value / 1000 + ' K';
        //                        }
        //                    }
        //                }]
        //            },
        //            "hover": {
        //                "animationDuration": 0
        //            },
        //            "animation": {
        //                "duration": 1,
        //                "onComplete": function () {
        //                    var chartInstance = this.chart,
        //                        ctx = chartInstance.ctx;

        //                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
        //                    ctx.textAlign = 'center';
        //                    ctx.textBaseline = 'bottom';

        //                    this.data.datasets.forEach(function (dataset, i) {
        //                        var meta = chartInstance.controller.getDatasetMeta(i);
        //                        meta.data.forEach(function (bar, index) {
        //                            var data = dataset.data[index];
        //                            if (data == '0.00') {

        //                            }
        //                            else {
        //                                ctx.fillText(parseFloat((parseFloat(data / 1000)).toFixed(2)) + ' K', bar._model.x, bar._model.y - 5);
        //                            }
        //                        });
        //                    });
        //                }
        //            }
        //        }
        //    }
        //    new Chart($("#OQAChart > canvas").get(0).getContext("2d"), OQAConfirmDataConfig);
        //}

        function GetUPHData(plant, division, date1, date2, lineType) {
            var requestUrl = 'EIS/GetUPHData';
            debugger;
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { plant: plant, division: division, date1: date1, date2: date2, lineType: lineType },
                success: function (response) {
                    UPHChart(response);
                },
                error: function () {
                }
            });
        }
        var UPHChart = function (data) {
            var month_list = [];
            var plan_list = [];
            var actual_list = [];
            var line_list = [];
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    month_list.push(data[i].monthName + '-' + data[i].lineType);
                    plan_list.push(data[i].planned);
                    actual_list.push(data[i].actual);
                    line_list.push(data[i].lineType);
                }
            }
            var barChartData = {
                labels: month_list,
                datasets: [{
                    label: "Plan ",
                    data: plan_list,
                    data1: line_list,
                    borderColor: color.warning._500,
                    stack: 'combined',
                    pointBackgroundColor: color.warning._500,
                    pointBorderColor: color.warning._500,
                    pointBorderWidth: 1,
                }, {
                    label: "Actual",
                    data: actual_list,
                    borderColor: color.primary._200,
                    backgroundColor: color.primary._200,
                    borderWidth: 2,
                    stack: 'combined',
                    type: 'bar',
                    pointBackgroundColor: '#374E7E',
                    pointBorderColor: '#374E7E',
                    pointBorderWidth: 1,
                }]
            };
            var UPHDataConfig = {
                type: 'line',
                data: barChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: ''
                    },
                    tooltips: {
                        enabled: true,
                        mode: 'single',
                        callbacks: {
                            label: function (tooltipItems, data) {
                                var multistringText = ['UPH: ' + tooltipItems.yLabel];
                                multistringText.push('LINE : ' + data.datasets[0].data1[tooltipItems.index]);
                                return multistringText;
                            }
                        }
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart, ctx = chartInstance.ctx;
                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';

                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i);
                                meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {

                                    }
                                    else {
                                        ctx.fillText(data, bar._model.x, bar._model.y - 5);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#UPHChart > canvas").get(0).getContext("2d"), UPHDataConfig);
        }

        function GetUPPHData(plant, division, date1, date2, lineType, cust) {
            var requestUrl = 'EIS/GetUPPHData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { plant: plant, division: division, date1: date1, date2: date2, lineType: lineType, cust: cust },
                success: function (response) {
                    UPPHChart(response);
                },
                error: function () {
                }
            });
        }
        var UPPHChart = function (data) {
            var month_list = [];
            var plan_list = [];
            var actual_list = [];
            var line_list = [];
            var customer_list = [];
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    month_list.push(data[i].monthName + '-' + data[i].lineType);
                    plan_list.push(data[i].planned);
                    actual_list.push(data[i].actual);
                    line_list.push(data[i].lineType);
                    customer_list.push(data[i].customer);
                }
            }
            var barChartData = {
                labels: month_list,
                datasets: [{
                    label: "Plan ",
                    data: plan_list,
                    data1: line_list,
                    data2: customer_list,
                    borderColor: color.warning._500,
                    stack: 'combined',
                    pointBackgroundColor: color.warning._500,
                    pointBorderColor: color.warning._500,
                    pointBorderWidth: 1,
                }, {
                    label: "Actual",
                    data: actual_list,
                    borderColor: color.primary._200,
                    backgroundColor: color.primary._200,
                    borderWidth: 2,
                    stack: 'combined',
                    type: 'bar',
                    pointBackgroundColor: '#374E7E',
                    pointBorderColor: '#374E7E',
                    pointBorderWidth: 1,
                }]
            };
            var UPPHDataConfig = {
                type: 'line',
                data: barChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: true,
                        text: ''
                    },
                    tooltips: {
                        enabled: true,
                        mode: 'single',
                        callbacks: {
                            label: function (tooltipItems, data) {
                                var multistringText = ['UPPH: ' + tooltipItems.yLabel];
                                multistringText.push('LINE : ' + data.datasets[0].data1[tooltipItems.index]);
                                multistringText.push('CUSTOMER : ' + data.datasets[0].data2[tooltipItems.index]);
                                return multistringText;
                            }
                        }
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }],
                        yAxes: [{
                            display: true,
                            scaleLabel: {
                                display: false,
                                labelString: ''
                            },
                            gridLines: {
                                display: true,
                                color: "#f2f2f2"
                            },
                            ticks: {
                                beginAtZero: true,
                                fontSize: 11
                            }
                        }]
                    },
                    "hover": {
                        "animationDuration": 0
                    },
                    "animation": {
                        "duration": 1,
                        "onComplete": function () {
                            var chartInstance = this.chart,
                                ctx = chartInstance.ctx;

                            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'bottom';

                            this.data.datasets.forEach(function (dataset, i) {
                                var meta = chartInstance.controller.getDatasetMeta(i);
                                meta.data.forEach(function (bar, index) {
                                    var data = dataset.data[index];
                                    if (data == '0.00') {

                                    }
                                    else {
                                        ctx.fillText(data, bar._model.x, bar._model.y - 5);
                                    }
                                });
                            });
                        }
                    }
                }
            }
            new Chart($("#UPPHChart > canvas").get(0).getContext("2d"), UPPHDataConfig);
        }

        function GetAutoLUData(plant, year, month) {
            var requestUrl = 'EIS/GetAutoLUData';
            $.ajax({
                url: requestUrl,
                type: "POST",
                data: { plant: plant, year: year, month: month },
                success: function (response) {
                    AutoLUChart(response);
                },
                AutoLUChart: function () {
                }
            });
        }
        var AutoLUChart = function (data) {
            var actual = 0, actual1 = 0;
            var bottom = 0, bottom1 = 0;
            var basic = 0, basic1 = 0;
            var challenge = 0, challenge1 = 0;

            var date_list = [];
            if (data != null) {
                for (i = 0; i < data.length; i++) {
                    actual1 = actual = data[i].actual;
                    bottom1 = bottom = data[i].bottom;
                    basic1 = basic = data[i].basic;
                    challenge1 = challenge = data[i].challenge;
                }
            }

            c3.generate({
                bindto: "#ALChart",
                data: {
                    columns: [
                        ['Actual : ' + actual1, actual],
                        ['Bottom : ' + bottom1, bottom],
                        ["Basic : " + basic1, basic],
                        ["Challenge : " + challenge1, challenge],
                    ],
                    type: 'pie'
                },
                color: {
                    pattern: colors3
                },
                legend: {
                    position: 'right'
                }
            });
        }
    </script>
}
