USE [NVTI]
GO
/****** Object:  StoredProcedure [dbo].[usp_Admin]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[usp_Admin]
(
	@ACTIVITY	VARCHAR(200)	= '',
	@USERID		VARCHAR(50)		= '',
	@IMAGE		VARBINARY(MAX)	= NULL,	
	@PARAM1		VARCHAR(100)	= '',
	@PARAM2		VARCHAR(100)	= '',
	@PARAM3		VARCHAR(100)	= '',
	@PARAM4		VARCHAR(100)	= '',
	@PARAM5		VARCHAR(100)	= '',
	@PARAM6		VARCHAR(100)	= '',
	@PARAM7		VARCHAR(100)	= '',
	@PARAM8		VARCHAR(100)	= '',
	@DATE1		VARCHAR(30)		= NULL,
	@DATE2		VARCHAR(30)		= NULL
)
AS
BEGIN
DECLARE @L_NO INT
	
	IF (@ACTIVITY = 'GET_PROFILE_DATA')
	BEGIN
		SELECT ADID, EMPCODE, EMPNAME, PLANT, DEPTNAME, CONTACTNO_O, LANDLINE, EMAILID_O, PHOTO  FROM MST_EMPLOYEE WHERE ADID = @USERID
	END	

	IF (@ACTIVITY = 'UPDATE_PROFILE_DATA')
	BEGIN
		UPDATE MST_EMPLOYEE SET EMAILID_O=@PARAM1, CONTACTNO_O=@PARAM2, LANDLINE=@PARAM3, PLANT=@PARAM4, PHOTO=IIF(@IMAGE = '',PHOTO, @IMAGE), UDATE=GETDATE()
		WHERE ADID = @USERID

		SELECT 1 AS FLAG
	END	

	IF (@ACTIVITY = 'GET_MENU_LIST')
	BEGIN
		SELECT MENUID, MENU_NAME AS MENUNAME, MENU_ICON AS MENUICON, CAST(HAS_CHILD AS INT) AS HASCHILD, CAST(STATUS AS INT) AS STATUS, URL
		FROM MST_MENUS ORDER BY MENUID
	END	
	
	IF (@ACTIVITY = 'ADD_MENU')
	BEGIN
		IF NOT EXISTS (SELECT * FROM MST_MENUS WHERE MENU_NAME=@PARAM1 OR MENUID=@PARAM8)
		BEGIN
			INSERT INTO MST_MENUS(MENUID, MENU_NAME, MENU_ICON, HAS_CHILD, STATUS, URL, MENU_ORDER, CREATEDBY, TDATE)
			VALUES (@PARAM8, @PARAM1, @PARAM2, @PARAM3, @PARAM4, @PARAM5, @PARAM6, @PARAM7, GETDATE())
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			SELECT 3 AS FLAG
		END
	END

	IF (@ACTIVITY = 'DELETE_MENU')
	BEGIN
		IF EXISTS (SELECT * FROM MST_SUBMENUS WHERE MENUID=@PARAM1)
		BEGIN
			DELETE FROM MST_SUBMENUS WHERE MENUID=@PARAM1
		END
		DELETE FROM MST_MENUS WHERE MENUID=@PARAM1
		SELECT 1 AS FLAG
	END

	IF (@ACTIVITY = 'IS_MENU_INUSE')
	BEGIN
		IF EXISTS(SELECT * FROM MST_MENUACCESS WHERE MENUID=@PARAM1)
		BEGIN
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			SELECT 2 AS FLAG
		END
	END

	IF (@ACTIVITY = 'GET_MENU_DETAIL') --USE FOR EDIT MENU AND IN SUBMENU PAGE 
	BEGIN
		SELECT MENUID, MENU_NAME AS MENUNAME, MENU_ICON AS MENUICON, CAST(HAS_CHILD AS INT) AS HASCHILD, CAST(STATUS AS INT) AS STATUS, URL, MENU_ORDER AS MENUORDER
		FROM MST_MENUS WHERE MENUID=@PARAM1
	END

	IF (@ACTIVITY = 'UPDATE_MENU')
	BEGIN
		IF EXISTS (SELECT * FROM MST_MENUS WHERE MENU_NAME=@PARAM1)
		BEGIN
			IF EXISTS(SELECT * FROM MST_MENUS WHERE MENUID=@PARAM8 AND MENU_NAME=@PARAM1)
			BEGIN
				UPDATE MST_MENUS SET MENU_NAME=@PARAM1, MENU_ICON=@PARAM2, STATUS=@PARAM3, HAS_CHILD=@PARAM4, URL=@PARAM5, MENU_ORDER=@PARAM6, UPDATEDBY=@PARAM7, UDATE=GETDATE()
				WHERE MENUID=@PARAM8
				SELECT 1 AS FLAG
			END
			ELSE
			BEGIN
				SELECT 2 AS FLAG
			END
		END
		ELSE
		BEGIN
			UPDATE MST_MENUS SET MENU_NAME=@PARAM1, MENU_ICON=@PARAM2, STATUS=@PARAM3, HAS_CHILD=@PARAM4, URL=@PARAM5, MENU_ORDER=@PARAM6, UPDATEDBY=@PARAM7, UDATE=GETDATE()
			WHERE MENUID=@PARAM8
			SELECT 1 AS FLAG
		END
	END

	IF (@ACTIVITY = 'GET_SUBMENU_LIST')
	BEGIN
		SELECT S.MENUID, SUBMENUID, SUBMENU_NAME AS SUBMENUNAME, CAST(S.STATUS AS INT) AS STATUS, S.URL, M.MENU_NAME AS MENUNAME
		FROM MST_SUBMENUS S LEFT JOIN MST_MENUS M ON M.MENUID=S.MENUID WHERE S.MENUID=@PARAM1
		ORDER BY SUBMENUID
	END

	IF (@ACTIVITY = 'ADD_SUBMENU')
	BEGIN
		IF NOT EXISTS (SELECT * FROM MST_SUBMENUS WHERE MENUID=@PARAM1 AND SUBMENU_NAME=@PARAM2)
		BEGIN
			SELECT TOP 1 @L_NO=ISNULL(MAX(SUBMENUID),0)+1 FROM MST_SUBMENUS WHERE MENUID=@PARAM1

			INSERT INTO MST_SUBMENUS (MENUID, SUBMENUID, SUBMENU_NAME, URL, STATUS, CREATEDBY, TDATE)
			VALUES (@PARAM1, @L_NO, @PARAM2, @PARAM3, @PARAM4, @PARAM5, GETDATE())

			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			SELECT 3 AS FLAG
		END
	END	

	--IF (@ACTIVITY = 'DELETE_SUBMENU')
	--BEGIN
	--	DELETE FROM MST_SUBMENUS WHERE MENUID=@PARAM1 AND SUBMENUID=@PARAM2
	--	SELECT 1 AS FLAG
	--END

	--IF (@ACTIVITY = 'IS_SUBMENU_INUSE')
	--BEGIN
	--	IF EXISTS(SELECT * FROM MST_MENUACCESS WHERE MENUID=@PARAM1 AND SUBMENUID=@PARAM2)
	--	BEGIN
	--		SELECT 1 AS FLAG
	--	END
	--	ELSE
	--	BEGIN
	--		SELECT 2 AS FLAG
	--	END
	--END

	IF (@ACTIVITY = 'GET_SUBMENU_DETAIL')
	BEGIN
		SELECT M.MENUID, S.SUBMENUID, S.SUBMENU_NAME AS SUBMENUNAME, CAST(S.STATUS AS INT) AS STATUS, S.URL, M.MENU_NAME AS MENUNAME
		FROM MST_SUBMENUS S LEFT JOIN MST_MENUS M ON S.MENUID=M.MENUID WHERE S.SUBMENUID=@PARAM1
	END

	--IF (@ACTIVITY = 'UPDATE_SUBMENU')
	--BEGIN
	--	IF EXISTS (SELECT * FROM MST_SUBMENUS WHERE SUBMENU_NAME=@PARAM1 AND MENUID=@PARAM6)
	--	BEGIN
	--		IF EXISTS(SELECT SUBMENU_ID FROM MST_SUBMENUS WHERE SUBMENU_NAME=@PARAM1 AND SUBMENU_ID=@PARAM2)
	--		BEGIN
	--			UPDATE MST_SUBMENUS SET SUBMENU_NAME=@PARAM1,STATUS=@PARAM3,URL=@PARAM4,UPDATEDBY=@PARAM5, UDATE=GETDATE()
	--			WHERE SUBMENU_ID=@PARAM2 AND  MENU_ID=@PARAM6
	--			SELECT 1 AS FLAG
	--		END
	--		ELSE
	--		BEGIN
	--			SELECT 2 AS FLAG
	--		END
	--	END
	--	ELSE
	--	BEGIN
	--		UPDATE MST_SUBMENUS SET SUBMENU_NAME=@PARAM1,STATUS=@PARAM3,URL=@PARAM4,UPDATEDBY=@PARAM5, UDATE=GETDATE()
	--		WHERE SUBMENU_ID=@PARAM2
	--		SELECT 1 AS FLAG
	--	END
	--END

	IF (@ACTIVITY = 'GET_DEPT_LIST')
	BEGIN
		SELECT ID AS DEPTID, DEPTCODE, DEPTNAME, ISNULL(HOD_ADID,'0') AS HODADID, ISNULL(dbo.FN_EMPNAME(HOD_ADID),'N/A') AS HODNAME, CAST(ISACTIVE AS INT) AS STATUS 
		FROM MST_DEPARTMENT
		ORDER BY DEPTNAME
	END

	IF (@ACTIVITY = 'ADD_DEPT')
	BEGIN
		IF NOT EXISTS (SELECT * FROM MST_DEPARTMENT WHERE DEPTCODE=@PARAM1 OR DEPTNAME=@PARAM2)
		BEGIN
			INSERT INTO MST_DEPARTMENT(DEPTCODE, DEPTNAME, HOD_ADID, ISACTIVE, CREATEDBY)
			VALUES(@PARAM1,@PARAM2, @PARAM3, @PARAM4, @PARAM5)
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			SELECT 3 AS FLAG
		END
	END

	IF (@ACTIVITY = 'UPDATE_DEPT')
	BEGIN
		IF EXISTS (SELECT * FROM MST_DEPARTMENT WHERE DEPTCODE=@PARAM1 OR DEPTNAME=@PARAM2)
		BEGIN
			IF EXISTS(SELECT * FROM MST_DEPARTMENT WHERE DEPTCODE=@PARAM1 AND DEPTNAME=@PARAM2 AND ID=@PARAM6)
			BEGIN
				UPDATE MST_DEPARTMENT SET  DEPTCODE=@PARAM1, DEPTNAME=@PARAM2, HOD_ADID=@PARAM3, ISACTIVE=@PARAM4, UPDATEDBY=@PARAM5,
				UDATE=GETDATE() WHERE ID=@PARAM6
				SELECT 1 AS FLAG
			END
			ELSE
			BEGIN
				SELECT 2 AS FLAG
			END
		END
		ELSE
		BEGIN
			UPDATE MST_DEPARTMENT SET  DEPTCODE=@PARAM1, DEPTNAME=@PARAM2, HOD_ADID=@PARAM3, ISACTIVE=@PARAM4, UPDATEDBY=@PARAM5,
			UDATE=GETDATE() WHERE ID=@PARAM6
		SELECT 1 AS FLAG
		END
	END

	IF (@ACTIVITY = 'DELETE_DEPT')
	BEGIN
		DELETE FROM MST_DEPARTMENT WHERE ID=@PARAM1
		SELECT 1 AS FLAG
	END	

	IF (@ACTIVITY = 'GET_DEPT_DETAIL')
	BEGIN
		SELECT DEPTCODE, DEPTNAME, ISNULL(HOD_ADID,'0') AS HODADID, CAST(ISACTIVE AS INT)STATUS FROM MST_DEPARTMENT WHERE ID=18
	END
	
	IF (@ACTIVITY = 'GET_CODE_LIST')
	BEGIN
		SELECT CODE, DESCR AS CODEDESC FROM MST_CODE ORDER BY CODE
	END

	IF (@ACTIVITY = 'ADD_CODE')
	BEGIN
		IF NOT EXISTS (SELECT * FROM MST_CODE WHERE CODE=@PARAM1 OR DESCR=@PARAM2)
		BEGIN
			INSERT INTO MST_CODE(CODE, DESCR, CREATEDBY)
			VALUES(@PARAM1,@PARAM2,@PARAM3)
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			SELECT 3 AS FLAG
		END
	END

	IF (@ACTIVITY = 'DELETE_CODE')
	BEGIN
		IF EXISTS (SELECT * FROM MST_CODEDEF WHERE CODE=@PARAM1)
		BEGIN
			DELETE FROM MST_CODEDEF WHERE CODE=@PARAM1
		END
		DELETE FROM MST_CODE WHERE CODE=@PARAM1
		SELECT 1 AS FLAG
	END

	IF (@ACTIVITY = 'GET_CODE_DETAIL')  ----USE FOR EDIT CODE AND IN CODE DEF PAGE
	BEGIN
		SELECT CODE, DESCR AS CODEDESC FROM MST_CODE WHERE CODE=@PARAM1
	END

	IF (@ACTIVITY = 'UPDATE_CODE')
	BEGIN
		UPDATE MST_CODE SET DESCR=@PARAM2
		WHERE CODE=@PARAM1
		SELECT 1 AS FLAG
	END

	IF (@ACTIVITY = 'GET_CODE_DEF_LIST')
	BEGIN
		SELECT T.CODE,T.DESCR CODEDESC,D.KEYID CODEDEFKEYID,D.DESCR CODEDEFDESC, 
		ISNULL(D.VALUE,'') AS CODEDEFVALUE, CAST(D.ISACTIVE AS int)STATUS
		FROM MST_CODEDEF D
		LEFT JOIN MST_CODE T ON T.CODE=D.CODE
		WHERE D.CODE=@PARAM1
	END

	IF (@ACTIVITY = 'ADD_CODE_DEF')
	BEGIN
		IF NOT EXISTS (SELECT * FROM MST_CODEDEF WHERE CODE= @PARAM1 AND KEYID=@PARAM2)
		BEGIN
			INSERT INTO MST_CODEDEF(CODE,KEYID,DESCR,VALUE,ISACTIVE,CREATEDBY)
			VALUES(@PARAM1,@PARAM2,@PARAM3,@PARAM4,@PARAM5,@PARAM6)
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			SELECT 3 AS FLAG
		END
	END	

	IF (@ACTIVITY = 'DELETE_CODE_DEF')
	BEGIN
		DELETE FROM MST_CODEDEF WHERE CODE=@PARAM1 AND KEYID=@PARAM2
		SELECT 1 AS FLAG
	END

	IF (@ACTIVITY = 'GET_CODE_DEF_DETAIL')
	BEGIN
		SELECT T.CODE,T.DESCR CODEDESC,ISNULL( D.KEYID,0) CODEDEFKEYID,ISNULL(D.DESCR,'') CODEDEFDESC,ISNULL( D.VALUE,'') CODEDEFVALUE,
		ISNULL( CAST(D.ISACTIVE AS INT),0)STATUS
		FROM MST_CODEDEF D
		LEFT JOIN  MST_CODE T ON T.CODE = D.CODE
		WHERE D.CODE=@PARAM1 AND D.KEYID=@PARAM2
	END

	IF (@ACTIVITY = 'UPDATE_CODE_DEF')
	BEGIN
		IF EXISTS (SELECT * FROM MST_CODEDEF WHERE KEYID=@PARAM2)
		BEGIN
			IF EXISTS(SELECT * FROM MST_CODEDEF WHERE CODE=@PARAM1 AND KEYID=@PARAM2)
			BEGIN
				UPDATE MST_CODEDEF SET DESCR=@PARAM3,VALUE=@PARAM4,ISACTIVE=@PARAM5
				WHERE CODE=@PARAM1 AND KEYID=@PARAM2
				SELECT 1 AS FLAG
			END
			ELSE
			BEGIN
				SELECT 2 AS FLAG
			END
		END
		ELSE
		BEGIN
			UPDATE MST_CODEDEF SET DESCR=@PARAM3,VALUE=@PARAM4,ISACTIVE=@PARAM5
			WHERE CODE=@PARAM1 AND KEYID=@PARAM2
			SELECT 1 AS FLAG
		END
	END

	IF (@ACTIVITY = 'GET_CONFIG_LIST')
	BEGIN
		SELECT ID AS CONFIGID, MODULE, ISNULL(CATEGORY1,'') CATEGORY1,ISNULL(CATEGORY2,'') CATEGORY2,ISNULL(VALUE,'') AS CONFIGVALUE,ISNULL(LVL,0) LVL FROM MST_CONFIG ORDER BY MODULE
	END

	IF (@ACTIVITY = 'ADD_CONFIG')
	BEGIN
		IF NOT EXISTS (SELECT * FROM MST_CONFIG WHERE MODULE=@PARAM1 AND CATEGORY1=@PARAM2 AND CATEGORY2=@PARAM3)
		BEGIN
			INSERT INTO MST_CONFIG(MODULE, CATEGORY1, CATEGORY2, VALUE, LVL, CREATEDBY)
			VALUES (@PARAM1,@PARAM2,@PARAM3,@PARAM4,@PARAM5,@PARAM6)
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			SELECT 3 AS FLAG
		END
	END

	IF (@ACTIVITY = 'UPDATE_CONFIG')
	BEGIN
		IF EXISTS (SELECT * FROM MST_CONFIG WHERE MODULE=@PARAM2 AND CATEGORY1=@PARAM3 AND CATEGORY2=@PARAM4)
		BEGIN
			IF EXISTS(SELECT * FROM MST_CONFIG WHERE ID=@PARAM1 AND MODULE=@PARAM2 AND CATEGORY1=@PARAM3 AND CATEGORY2=@PARAM4)
			BEGIN
				UPDATE MST_CONFIG SET MODULE=@PARAM2,CATEGORY1=@PARAM3,CATEGORY2=@PARAM4,VALUE=@PARAM5,LVL=@PARAM6 
				WHERE ID=@PARAM1
				SELECT 1 AS FLAG
			END
			ELSE
			BEGIN
				SELECT 2 AS FLAG
			END
		END
		ELSE
		BEGIN
			UPDATE MST_CONFIG SET MODULE=@PARAM2,CATEGORY1=@PARAM3,CATEGORY2=@PARAM4,VALUE=@PARAM5,LVL=@PARAM6 
			WHERE ID=@PARAM1
			SELECT 1 AS FLAG
		END
	END

	IF (@ACTIVITY = 'DELETE_CONFIG')
	BEGIN
		DELETE FROM MST_CONFIG WHERE ID=@PARAM1
		SELECT 1 AS FLAG
	END	

	IF (@ACTIVITY = 'GET_CONFIG_DETAIL')
	BEGIN
		SELECT ID AS CONFIGID, MODULE, ISNULL(CATEGORY1,'') CATEGORY1,ISNULL(CATEGORY2,'') CATEGORY2,ISNULL(VALUE,'') AS CONFIGVALUE,ISNULL(LVL,0) LVL FROM MST_CONFIG WHERE ID=@PARAM1
	END

	IF (@ACTIVITY = 'GET_EMP_LIST')
	BEGIN
		SELECT ISNULL(EMPCODE, '') AS EMPCODE, ISNULL(EMPNAME, '')EMPNAME, ISNULL(ADID,'')EMPADID, CASE GENDER WHEN 'M' THEN 'Male' WHEN 'F' THEN 'Female' ELSE '' END GENDER, ISNULL(DESIGNATION,'')DESIGNATION, ISNULL(DEPTCODE,'')DEPTCODE,
		ISNULL(DEPTNAME,'')DEPTNAME, ISNULL(EMAILID_O,'')EMPEMAIL, ISNULL(CONTACTNO_O,'')CONTACT, ISNULL(LANDLINE,'')LANDLINE, 
		ISNULL(REPLACE(CONVERT(NVARCHAR,DOB, 106), ' ', '-'),'')  DOB,
		ISNULL(CAST(DOJ AS VARCHAR),'')DOJ, ISNULL(APPRID,'')APPRID,  ISNULL(APPRNAME,'')APPRNAME, ISNULL(CAST(ISACTIVE AS INT),'')STATUS
		FROM MST_EMPLOYEE ORDER BY EMPCODE DESC
	END

	IF (@ACTIVITY = 'ADD_CONTACT')
	BEGIN
		IF NOT EXISTS (SELECT * FROM MST_CONTACTS WHERE NAME=@PARAM1 AND DEPTNAME=@PARAM2 AND CONTACTNO=@PARAM3)
		BEGIN
			INSERT INTO MST_CONTACTS(NAME, DEPTNAME, CONTACTNO, EMAILID, PLANT, CREATEDBY)
			VALUES (@PARAM1,@PARAM2,@PARAM3,@PARAM4,@PARAM5,@PARAM6)
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			SELECT 3 AS FLAG
		END
	END

	IF (@ACTIVITY = 'UPDATE_CONTACT')
	BEGIN
		IF EXISTS (SELECT * FROM MST_CONTACTS WHERE NAME=@PARAM2 AND DEPTNAME=@PARAM3 AND CONTACTNO=@PARAM4)
		BEGIN
			IF EXISTS(SELECT * FROM MST_CONTACTS WHERE SRNO=@PARAM1 AND NAME=@PARAM2 AND DEPTNAME=@PARAM3 AND CONTACTNO=@PARAM4)
			BEGIN
				UPDATE MST_CONTACTS SET NAME=@PARAM2, DEPTNAME=@PARAM3, CONTACTNO=@PARAM4, EMAILID=@PARAM5, PLANT=@PARAM6, UPDATEDBY=@PARAM7, UDATE=GETDATE() WHERE SRNO=@PARAM1
				SELECT 1 AS FLAG
			END
			ELSE
			BEGIN
				SELECT 2 AS FLAG
			END
		END
		ELSE
		BEGIN
			UPDATE MST_CONTACTS SET NAME=@PARAM2, DEPTNAME=@PARAM3, CONTACTNO=@PARAM4, EMAILID=@PARAM5, PLANT=@PARAM6, UPDATEDBY=@PARAM7, UDATE=GETDATE() WHERE SRNO=@PARAM1
			SELECT 1 AS FLAG
		END
	END

	IF (@ACTIVITY = 'DELETE_CONTACT')
	BEGIN
		DELETE FROM MST_CONTACTS WHERE SRNO=@PARAM1
		SELECT 1 AS FLAG
	END

	IF (@ACTIVITY = 'GET_CONTACT_LIST')
	BEGIN
		SELECT SRNO, ISNULL(NAME,'')EMPNAME, ISNULL(DEPTNAME,'')DEPTNAME, ISNULL(CONTACTNO,'')CONTACT, ISNULL(EMAILID,'')EMPEMAIL, ISNULL(PLANT,'')PLANT
		FROM MST_CONTACTS ORDER BY NAME
	END

	IF (@ACTIVITY = 'GET_CONTACT_DETAIL')
	BEGIN
		SELECT SRNO, ISNULL(NAME,'')EMPNAME, ISNULL(DEPTNAME,'')DEPTNAME, ISNULL(CONTACTNO,'')CONTACT, ISNULL(EMAILID,'')EMPEMAIL, ISNULL(PLANT,'')PLANT
		FROM MST_CONTACTS WHERE SRNO=@PARAM1
	END

	IF (@ACTIVITY = 'GET_ALL_SUBMENU_LIST')
	BEGIN
		SELECT MENUID, SUBMENUID, SUBMENU_NAME AS SUBMENUNAME, CAST(STATUS AS INT) AS STATUS, URL 
		FROM MST_SUBMENUS WHERE STATUS=1 ORDER BY MENUID, SUBMENUID
	END

	--IF (@ACTIVITY = 'GET_MENUACCESS_LIST')
	--BEGIN
	--	SELECT MENUID, SUBMENUID, ADID AS EMPADID
	--	FROM MST_MENUACCESS WHERE ADID IN (@PARAM1,'*') 
	--END

	--IF (@ACTIVITY = 'DELETE_PREV_MENUACCESS')
	--BEGIN
	--	DELETE FROM MST_MENUACCESS WHERE ADID=@PARAM1
	--END

	--IF (@ACTIVITY = 'ADD_MENUACCESS')
	--BEGIN
	--	IF EXISTS(SELECT * FROM MST_MENUACCESS WHERE MENUID=@PARAM1 AND SUBMENUID=@PARAM2 AND ADID='*')
	--		BEGIN
	--			SELECT 1 AS FLAG
	--		END
	--		ELSE
	--		BEGIN
	--			INSERT INTO MST_MENUACCESS(MENUID, SUBMENUID, ADID, CREATEDBY)
	--			VALUES(@PARAM1, @PARAM2, @PARAM3, @PARAM4)
	--		END
	--END

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Attendance]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[usp_Attendance]
@ACTIVITY           VARCHAR(50)='',
@DEPT               VARCHAR(50)='',
@USERID             VARCHAR(50)=''
AS
BEGIN
SET NOCOUNT ON;

    --------------------IT & PRODUCTION DASHBOARD--------------

	--IF (@ACTIVITY = 'GET_IT_STAFF')			--GET ALL IT ENGINEERS
	--BEGIN
	--	SELECT * FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND DEPTCODE='DP0010' 
	--END

	--IF (@ACTIVITY = 'UPD_ATTENDENCE')		--UPDATE ATTENDENCE
	--BEGIN
	--	UPDATE MST_EMPLOYEE SET ISPRESENT=@STATUS WHERE EMPCODE=@USERID
	--END

	IF (@ACTIVITY = 'IT_DASHBOARD')			--IT DASHBOARD DATA
	BEGIN
		SELECT EMPCODE, EMPNAME, CONTACTNO_O, PHOTO, DOJ, CATEGORY, GRADE
		FROM (
			SELECT EMPCODE, EMPNAME, CONTACTNO_O, PHOTO, DOJ, REMARK1 AS CATEGORY,
			CASE WHEN GRADE LIKE 'JB%' THEN CAST(REPLACE(GRADE, 'JB', 0) AS INT) ELSE 50 END AS GRADE
			FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND DEPTCODE='DP0010' 
		) AS T1 ORDER BY GRADE, DOJ
	END	

	IF (@ACTIVITY = 'IT_BIRTHDAY')			--IT BIRTHDAY		
	BEGIN
		SELECT EMPNAME, PHOTO FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND DEPTCODE='DP0010' 
		AND DATEPART(DAY, DOB)=DATEPART(DAY, GETDATE()) AND DATEPART(MONTH, DOB)=DATEPART(MONTH, GETDATE())
	END	

	--IF (@ACTIVITY = 'GET_PROD_STAFF')			--GET ALL PRODUCTION ENGINEERS
	--BEGIN
	--	SELECT * FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND PLANT='BAWAL-PACK' AND DEPTCODE='DP0001' 
	--END

	IF (@ACTIVITY = 'PROD_DASHBOARD')			--PROD DASHBOARD DATA
	BEGIN
		SELECT EMPCODE, EMPNAME, CONTACTNO_O, PHOTO, DOJ, CATEGORY, GRADE
		FROM (
			SELECT EMPCODE, EMPNAME, CONTACTNO_O, PHOTO, DOJ, REMARK1 AS CATEGORY,
			CASE WHEN GRADE LIKE 'JB%' THEN CAST(REPLACE(GRADE, 'JB', 0) AS INT) ELSE 50 END AS GRADE
			FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND PLANT='BAWAL-PACK' AND DEPTCODE ='DP0001'
		) AS T1 ORDER BY GRADE, DOJ
	END

	IF (@ACTIVITY = 'FIRE_MARSHAL_DASHBOARD')			--FIRE-MARSHAL DATA
	BEGIN
		SELECT EMPCODE, EMPNAME, DEPTNAME, CONTACTNO_O, PHOTO, DOJ, GRADE
		FROM (
			SELECT EMPCODE, EMPNAME, DEPTNAME, CONTACTNO_O, PHOTO, DOJ,
			CASE WHEN GRADE LIKE 'JB%' THEN CAST(REPLACE(GRADE, 'JB', 0) AS INT) ELSE 50 END AS GRADE
			FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND REMARK2 ='FIRE_MARSHAL'
		) AS T1 ORDER BY GRADE, DOJ
	END

	IF (@ACTIVITY = 'GET_TEAM_ATTENDANCE')		--GET EMPLOYEE DATA
	BEGIN
		SELECT EMPCODE, EMPNAME, CONTACTNO_O, LANDLINE, PHOTO, DOJ, GRADE
		FROM (
		SELECT EMPCODE, EMPNAME, CONTACTNO_O, LANDLINE, PHOTO, DOJ,
		CASE WHEN GRADE LIKE 'JB%' THEN CAST(REPLACE(GRADE, 'JB', 0) AS INT) ELSE 50 END AS GRADE
		FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND DEPTCODE=@DEPT
		) AS T1 ORDER BY GRADE, DOJ
	END


END
GO
/****** Object:  StoredProcedure [dbo].[usp_Attendence_Contractual]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Attendence_Contractual]
@ACTIVITY				VARCHAR(50)='',
@DOCNO					INT=0,
@EMPCODE				VARCHAR(50)='',
@NAME					VARCHAR(50)='',
@DEPTNAME				VARCHAR(50)='',
@CONTACTNO				VARCHAR(50)='',
@ISVALID				BIT=0,
@REMARKS				VARCHAR(100)='',
@USERID					VARCHAR(50)='',
@UNAME					VARCHAR(50)='',
@PCADDRESS				VARCHAR(50)='',
@PARAM1					VARCHAR(100)='',
@PARAM2					VARCHAR(100)='',
@PARAM3					VARCHAR(100)='',
@PARAM4					VARCHAR(100)='',
@PARAM5					VARCHAR(100)='',
@DATE1					DATETIME,
@DATE2					DATETIME,
@DATE3					DATETIME
AS
BEGIN
SET NOCOUNT ON;
DECLARE @L_P1 VARCHAR(50), @L_P2 VARCHAR(50), @L_P3 VARCHAR(50), @L_P4 VARCHAR(50), @L_P5 VARCHAR(50), @L_P6 VARCHAR(50), 
@L_CNT INT=0, @L_NO INT=0, @L_VALID BIT=0, @L_DATE1 DATETIME, @L_DATE2 DATETIME, @L_DATE3 DATETIME, @L_DATE4 DATETIME;


	--------------------- CONTRACTUAL EMPLOYEE DATA UPLOAD ---------------------

	IF (@ACTIVITY = 'ADD_EMP_CONTRACT')		--INSERT/UPDATE/DELETE CONTRACTUAL EMPLOYEE DATA	
	BEGIN
		IF(@PARAM1='ADD')
		BEGIN
			IF EXISTS (SELECT * FROM EMPCONTRACT_MASTER WHERE EMPCODE=@EMPCODE) 
			BEGIN
				UPDATE EMPCONTRACT_MASTER SET EMPNAME=@NAME, DEPTNAME=@DEPTNAME, GENDER=@PARAM2, BUS_STOP=@PARAM3, SHIFT=@PARAM4,
				VALIDITY_FROM=@DATE1, VALIDITY_TO=@DATE2, TDATE=GETDATE(), USERID=@USERID 
				WHERE EMPCODE=@EMPCODE
				
				SELECT 2 AS FLAG
			END
			ELSE
			BEGIN
				INSERT INTO EMPCONTRACT_MASTER (EMPCODE, EMPNAME, DEPTNAME, GENDER, BUS_STOP, SHIFT, VALIDITY_FROM, VALIDITY_TO, TDATE, USERID)	
										VALUES (@EMPCODE, @NAME, @DEPTNAME, @PARAM2, @PARAM3, @PARAM4,   @DATE1,		@DATE2,	GETDATE(), @USERID)	
				SELECT 1 AS FLAG
			END
		END
		IF(@PARAM1='DELETE')
		BEGIN
			DELETE FROM EMPCONTRACT_MASTER  WHERE EMPCODE=@EMPCODE
			SELECT 1 AS FLAG
		END
	END

	IF (@ACTIVITY = 'FILL_EMP_CONTRACT')		--FILL GRID CONTRACTUAL EMPLOYEE DATA 
	BEGIN
		SELECT EMPCODE, EMPNAME, GENDER, DEPTNAME, BUS_STOP, SHIFT, CONVERT(VARCHAR, VALIDITY_FROM, 23) AS VALIDITY_FROM, CONVERT(VARCHAR, VALIDITY_TO, 23) AS VALIDITY_TO, CONVERT(VARCHAR, TDATE, 23) AS TDATE, USERID
		FROM EMPCONTRACT_MASTER  WHERE EMPCODE+EMPNAME LIKE '%'+@EMPCODE+'%'
		ORDER BY EMPCODE
	END

	IF (@ACTIVITY = 'UPD_EMP_CONTRACT')		--MODIFY CONTRACTUAL EMPLOYEE DATA 
	BEGIN
		UPDATE EMPCONTRACT_MASTER SET EMPNAME=@NAME, DEPTNAME=@DEPTNAME, GENDER=@PARAM1, BUS_STOP=@PARAM2, SHIFT=@PARAM3, 
		VALIDITY_FROM=@DATE1, VALIDITY_TO=@DATE2, TDATE=GETDATE(), USERID=@USERID 
		WHERE EMPCODE=@EMPCODE
				
		SELECT 1 AS FLAG
	END

	IF (@ACTIVITY = 'DELETE_EMP_CONTRACT')		--DELETE CONTRACTUAL EMPLOYEE DATA 
	BEGIN
		DELETE FROM EMPCONTRACT_MASTER  WHERE EMPCODE=@EMPCODE
		SELECT 1 AS FLAG
	END


	--------------------- SHIFT PUNCH IN & OUT ---------------------


	IF (@ACTIVITY = 'GET_PUNCH_TYPE')		--GET PUNCH TYPE BY PC
	BEGIN
		SELECT TOP 1 * FROM EMPPUNCH_PCCONFIG WHERE PCNAME=@PCADDRESS 
	END

	IF (@ACTIVITY = 'UPD_PUNCH_TYPE')		--UPDATE PUNCH TYPE
	BEGIN
		UPDATE EMPPUNCH_PCCONFIG SET PUNCH_TYPE=@PARAM1, TDATE=GETDATE(), USERID=@USERID WHERE PCNAME=@PCADDRESS
		SELECT 1 AS FLAG
	END

	IF (@ACTIVITY = 'SHIFT_ATTENDENCE_COUNT')		--GET SHIFT TOTAL ACTIVE INACTIVE EMPLOYEES COUNT
	BEGIN
		SELECT (SELECT COUNT(DISTINCT EMPCODE) AS TOTAL_IN_PUNCH FROM EMPPUNCH_SHIFT WHERE LOCATION=@PARAM1 AND PIN IS NOT NULL AND CONVERT(DATE, PIN)=CONVERT(DATE, GETDATE())) AS TOTAL_IN_PUNCH,
		(SELECT COUNT(DISTINCT EMPCODE) AS TOTAL_OUT_PUNCH FROM EMPPUNCH_SHIFT WHERE LOCATION=@PARAM1 AND POUT IS NOT NULL AND CONVERT(DATE, POUT)=CONVERT(DATE, GETDATE()))  AS TOTAL_OUT_PUNCH
	END

	IF (@ACTIVITY = 'DEPTWISE_ATTENDENCE_COUNT')		--GET SHIFTWISE & DEPARTMENTWISE ATTENDENCE COUNT
	BEGIN
		SELECT T1.DEPTNAME, SUM(A_SHIFT_TOTAL) AS A_SHIFT_TOTAL, SUM(B_SHIFT_TOTAL) AS B_SHIFT_TOTAL, SUM(C_SHIFT_TOTAL) AS C_SHIFT_TOTAL
		FROM (
		SELECT IIF(B.DEPTNAME<>'', B.DEPTNAME, 'Others') AS DEPTNAME, COUNT(*) AS A_SHIFT_TOTAL, 0 AS B_SHIFT_TOTAL, 0 AS C_SHIFT_TOTAL
		FROM EMPPUNCH_SHIFT A LEFT JOIN EMPCONTRACT_MASTER B ON A.EMPCODE=B.EMPCODE
		WHERE CONVERT(DATE, A.PIN) = CONVERT(DATE, GETDATE()) AND CONVERT(TIME, A.PIN) BETWEEN CONVERT(TIME, '05:00') AND CONVERT(TIME, '06:30')
		AND A.LOCATION=IIF(@PARAM1='ALL', A.LOCATION, @PARAM1)
		GROUP BY DEPTNAME
		UNION
		SELECT IIF(B.DEPTNAME<>'', B.DEPTNAME, 'Others') AS DEPTNAME, 0, COUNT(*) AS TOTAL, 0
		FROM EMPPUNCH_SHIFT A LEFT JOIN EMPCONTRACT_MASTER B ON A.EMPCODE=B.EMPCODE
		WHERE CONVERT(DATE, A.PIN) = CONVERT(DATE, GETDATE()) AND CONVERT(TIME, A.PIN) BETWEEN CONVERT(TIME, '13:00') AND CONVERT(TIME, '14:30')
		AND A.LOCATION=IIF(@PARAM1='ALL', A.LOCATION, @PARAM1)
		GROUP BY DEPTNAME
		UNION
		SELECT IIF(B.DEPTNAME<>'', B.DEPTNAME, 'Others') AS DEPTNAME, 0, 0, COUNT(*) AS TOTAL
		FROM EMPPUNCH_SHIFT A LEFT JOIN EMPCONTRACT_MASTER B ON A.EMPCODE=B.EMPCODE
		WHERE CONVERT(DATE, A.PIN) = CONVERT(DATE, GETDATE()) AND CONVERT(TIME, A.PIN) BETWEEN CONVERT(TIME, '21:00') AND CONVERT(TIME, '22:30')
		AND A.LOCATION=IIF(@PARAM1='ALL', A.LOCATION, @PARAM1)
		GROUP BY DEPTNAME) AS T1
		GROUP BY T1.DEPTNAME
		ORDER BY 1
	END

	IF (@ACTIVITY = 'CHECK_EMP_VALIDITY')		--CHECK EMPLOYEE VALIDITY AT SHIFT TIME
	BEGIN	
		SELECT TOP 1 @L_P1=EMPCODE, @L_P2=SHIFT, @L_P6=DEPTNAME FROM EMPCONTRACT_MASTER WHERE EMPCODE=@EMPCODE AND CONVERT(DATE, GETDATE()) BETWEEN VALIDITY_FROM AND VALIDITY_TO ORDER BY TDATE DESC

		IF (@L_P1 IS NOT NULL)	--CHECK EMPLOYEE EXISTS OR NOT
		BEGIN
			SELECT @L_P3=SHIFT FROM EMPSHIFT_TIME WHERE SHIFT=@L_P2 AND CONVERT(TIME(0), GETDATE()) BETWEEN IN_FROM AND IN_TO

			IF (@L_P2 = @L_P3)	--IF EMP SHIFT & CURRENT SHIFT ARE SAME
			BEGIN	
				SET @L_NO = 1
				SET @L_P4 = 1
				SET @L_P5 = 'Valid'							
			END
			ELSE 
			BEGIN
				SET @L_NO = 2
				SET @L_P4 = 0
				SET @L_P5 = 'Wrong Shift'
			END
		END
		ELSE
		BEGIN
			SET @L_NO = 2
			SET @L_P4 = 0
			SET @L_P5 = 'Employee not exists'
		END

		SELECT @L_NO AS FLAG, @L_P4 AS ISVALID, @L_P5 AS MSG, @L_P6 AS DEPTNAME		
	END

	IF (@ACTIVITY = 'INSERT_SHIFT_PUNCH')		--INSERT SHIFT IN & OUT PUNCH DATA
	BEGIN
		INSERT INTO EMPPUNCH_HISTORY (EMPCODE, PUNCH_DATE, PUNCH_TYPE, PLACE, LOCATION, ISVALID, REMARKS, USERID, PCNAME)
							  VALUES (@EMPCODE, GETDATE(), @PARAM1,	  'GATE', @PARAM2,   @PARAM3, @REMARKS, @USERID, @PCADDRESS)

		SELECT TOP 1 @L_DATE1=PIN, @L_DATE2=POUT FROM EMPPUNCH_SHIFT WHERE EMPCODE=@EMPCODE 
		AND TDATE=(SELECT MAX(TDATE) FROM EMPPUNCH_SHIFT WHERE EMPCODE=@EMPCODE AND CONVERT(DATETIME, TDATE) BETWEEN DATEADD(DAY, -1, GETDATE()) AND  CONVERT(DATETIME, GETDATE()))

		IF (@PARAM1='IN')	--IN PUNCH ENTRY
		BEGIN
			IF(@L_DATE2 IS NULL AND DATEDIFF(MINUTE, @L_DATE1, GETDATE()) <= 60)
			BEGIN
				SELECT 2 AS FLAG, @EMPCODE + ' You already Punched' AS MSG
			END
			ELSE
			BEGIN
				INSERT INTO EMPPUNCH_SHIFT (EMPCODE,     PIN,	 LOCATION, ISVALID, REMARKS, USERID, PCNAME, TDATE)
									VALUES (@EMPCODE, GETDATE(), @PARAM2, @PARAM3, @REMARKS, @USERID, @PCADDRESS, GETDATE())

				SELECT 1 AS FLAG, @EMPCODE + ' Punch-In' AS MSG
			END
		END
		ELSE IF (@PARAM1='OUT')		--OUT PUNCH ENTRY
		BEGIN
			IF(@L_DATE1 IS NULL)	--IN PUNCH ENTRY NOT FOUND
			BEGIN
				INSERT INTO EMPPUNCH_SHIFT (EMPCODE,    POUT,    LOCATION, USERID, PCNAME, TDATE)
									VALUES (@EMPCODE, GETDATE(), @PARAM2, @USERID, @PCADDRESS, GETDATE())

				SELECT 1 AS FLAG, @EMPCODE + ' Punch-Out' AS MSG
			END
			ELSE
			BEGIN
				IF(DATEDIFF(MINUTE, @L_DATE2, GETDATE()) > 60)
				BEGIN
					INSERT INTO EMPPUNCH_SHIFT (EMPCODE,    POUT,    LOCATION, USERID, PCNAME, TDATE)
									VALUES (@EMPCODE, GETDATE(), @PARAM2, @USERID, @PCADDRESS, GETDATE())

					SELECT 1 AS FLAG, @EMPCODE + ' Punch-Out' AS MSG
				END
				ELSE
				BEGIN
					UPDATE EMPPUNCH_SHIFT SET POUT=GETDATE(), TDATE=GETDATE(), LOCATION=@PARAM2, USERID=USERID, PCNAME=@PCADDRESS 
					WHERE EMPCODE=@EMPCODE AND PIN=@L_DATE1

					SELECT 1 AS FLAG, @EMPCODE + ' Punch-Out' AS MSG
				END
			END
		END
		ELSE
		BEGIN
			SELECT 3 AS FLAG, NULL AS PUNCH_TYPE, 'Sorry, Kindly contact to IT Team' AS MSG
			INSERT INTO EMPPUNCH_HISTORY (EMPCODE, PUNCH_DATE, PUNCH_TYPE, PLACE,  LOCATION, USERID, PCNAME)
								  VALUES (@EMPCODE, GETDATE(), @PARAM1,	  'ERROR', @PARAM2, @USERID, @PCADDRESS)
		END
	END

	IF (@ACTIVITY = 'FILL_SHIFT_PUNCH')		--FILL GRID SHIFT PUNCH RECORD
	BEGIN
		SELECT * FROM EMPPUNCH_SHIFT WHERE EMPCODE LIKE '%'+@EMPCODE+'%'  
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-05-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY TDATE DESC
	END

	IF (@ACTIVITY = 'UPD_MANUAL_IN_OUT')		--UPDATE PIN/POUT TIME BY HR DEPTT
	BEGIN
		INSERT INTO EMPPUNCH_HISTORY (EMPCODE, PUNCH_DATE,  PLACE,	  LOCATION,			REMARKS,			TDATE, USERID)
							  VALUES (@EMPCODE, @DATE1, 'GATE', 'TIME_OFFICE', 'Punch Time Changed by HR', GETDATE(), @USERID)

		UPDATE EMPPUNCH_SHIFT SET PIN=@DATE1, POUT=@DATE2, REMARKS='Regularized', USERID=@USERID WHERE EMPCODE=@EMPCODE 
		AND CONVERT(VARCHAR, TDATE, 20)=CONVERT(VARCHAR, @DATE3, 20)

		SELECT 1 AS FLAG, 'Punch Time Updated Successfully' AS MSG
	END

	IF (@ACTIVITY = 'UPD_EXCEL_IN_OUT')		--EXCEL UPDATE SHIFT PUNCH DATA
	BEGIN
		INSERT INTO EMPPUNCH_HISTORY (EMPCODE, PUNCH_DATE,  PLACE,	  LOCATION,			REMARKS,			TDATE, USERID)
							  VALUES (@EMPCODE, @DATE1, 'GATE', 'TIME_OFFICE', 'Punch Time Changed by HR', GETDATE(), @USERID)

		DELETE FROM EMPPUNCH_SHIFT WHERE EMPCODE=@EMPCODE AND CONVERT(DATE, PIN)=@DATE1

		DELETE FROM EMPPUNCH_SHIFT WHERE EMPCODE=@EMPCODE AND ISNULL(PIN, '2001-01-01') = CONVERT(DATE, '2001-01-01') AND CONVERT(DATE, POUT)=@DATE2 

		INSERT INTO EMPPUNCH_SHIFT (EMPCODE,						PIN,												POUT,							  LOCATION,   REMARKS,   TDATE, USERID, PCNAME)
							VALUES (@EMPCODE, CAST(@DATE1 AS DATETIME) + CAST(@PARAM1 AS DATETIME), CAST(@DATE2 AS DATETIME) + CAST(@PARAM2 AS DATETIME), @PARAM3, 'Regularized', CAST(@DATE2 AS DATETIME) + CAST(@PARAM2 AS DATETIME), @USERID, @PCADDRESS)
		SELECT 1 AS FLAG
	END

	IF (@ACTIVITY = 'INSERT_MAIN_GATE_PUNCH')		--INSERT MAIN GATE IN & OUT PUNCH DATA 
	BEGIN
		INSERT INTO EMPPUNCH_HISTORY (EMPCODE, PUNCH_DATE,  PUNCH_TYPE, PLACE,	  LOCATION,	USERID, PCNAME)
							  VALUES (@EMPCODE, GETDATE(), @PARAM1, 'MAIN-GATE', @PARAM2, @USERID, @PCADDRESS)

		SELECT TOP 1 @L_DATE1=PIN, @L_DATE2=POUT FROM EMPPUNCH_GATE WHERE EMPCODE=@EMPCODE 
		AND TDATE=(SELECT MAX(TDATE) FROM EMPPUNCH_GATE WHERE EMPCODE=@EMPCODE AND CONVERT(DATETIME, TDATE) BETWEEN DATEADD(DAY, -1, GETDATE()) AND  CONVERT(DATETIME, GETDATE()))

		IF (@PARAM1='IN')	--IN PUNCH ENTRY
		BEGIN
			IF(@L_DATE2 IS NULL AND DATEDIFF(MINUTE, @L_DATE1, GETDATE()) <= 60)
			BEGIN
				SELECT 2 AS FLAG, @EMPCODE + ' You already Punched' AS MSG
			END
			ELSE
			BEGIN
				INSERT INTO EMPPUNCH_GATE (EMPCODE,   PIN,	 USERID, PCNAME, TDATE)
								VALUES (@EMPCODE, GETDATE(), @USERID, @PCADDRESS, GETDATE())

				SELECT 1 AS FLAG, @EMPCODE + ' Punch-In' AS MSG
			END
		END
		ELSE IF (@PARAM1='OUT')		--OUT PUNCH ENTRY
		BEGIN
			IF(@L_DATE1 IS NULL)	--IN PUNCH ENTRY NOT FOUND
			BEGIN
				INSERT INTO EMPPUNCH_GATE (EMPCODE,  POUT,  USERID, PCNAME, TDATE)
								VALUES (@EMPCODE, GETDATE(), @USERID, @PCADDRESS, GETDATE())

				SELECT 1 AS FLAG, @EMPCODE + ' Punch-Out' AS MSG
			END
			ELSE
			BEGIN
				IF(DATEDIFF(MINUTE, @L_DATE2, GETDATE()) > 60)
				BEGIN
					INSERT INTO EMPPUNCH_GATE (EMPCODE,  POUT,  USERID, PCNAME, TDATE)
									VALUES (@EMPCODE, GETDATE(), @USERID, @PCADDRESS, GETDATE())

					SELECT 1 AS FLAG, @EMPCODE + ' Punch-Out' AS MSG
				END
				ELSE
				BEGIN
					UPDATE EMPPUNCH_GATE SET POUT=GETDATE(), TDATE=GETDATE(), USERID=USERID, PCNAME=@PCADDRESS 
					WHERE EMPCODE=@EMPCODE AND PIN=@L_DATE1

					SELECT 1 AS FLAG, @EMPCODE + ' Punch-Out' AS MSG
				END
			END
		END
		ELSE
		BEGIN
			SELECT 3 AS FLAG, NULL AS PUNCH_TYPE, 'Sorry, Kindly contact to IT Team' AS MSG
			INSERT INTO EMPPUNCH_HISTORY (EMPCODE, PUNCH_DATE, PUNCH_TYPE, PLACE,  LOCATION, USERID, PCNAME)
								  VALUES (@EMPCODE, GETDATE(), @PARAM1,	  'ERROR', @PARAM2, @USERID, @PCADDRESS)
		END
	END

	IF (@ACTIVITY = 'MAIN_GATE_ATTENDENCE_COUNT')		--GET SHIFT TOTAL ACTIVE INACTIVE EMPLOYEES COUNT FOR MAIN-GATE
	BEGIN
		SELECT (SELECT COUNT(DISTINCT EMPCODE) AS TOTAL_IN_PUNCH FROM EMPPUNCH_GATE WHERE PIN IS NOT NULL AND CONVERT(DATE, TDATE)=CONVERT(DATE, GETDATE())) AS TOTAL_IN_PUNCH,
		(SELECT COUNT(DISTINCT EMPCODE) AS TOTAL_OUT_PUNCH FROM EMPPUNCH_GATE WHERE POUT IS NOT NULL AND CONVERT(DATE, TDATE)=CONVERT(DATE, GETDATE()))  AS TOTAL_OUT_PUNCH
	END

	IF (@ACTIVITY = 'INSERT_CANTEEN_PUNCH')		--INSERT CANTEEN IN PUNCH DATA
	BEGIN
		SELECT TOP 1 @L_DATE1=PIN FROM EMPPUNCH_CANTEEN WHERE EMPCODE=@EMPCODE AND CONVERT(DATE, TDATE)=CONVERT(DATE, GETDATE())
		ORDER BY TDATE DESC

		IF(@L_DATE1 IS NULL)
		BEGIN
			SET @L_VALID=1

			INSERT INTO EMPPUNCH_CANTEEN (EMPCODE,  PIN,	 ISVALID,   TDATE,	  USERID, PCNAME)
								VALUES (@EMPCODE, GETDATE(), @L_VALID, GETDATE(), @USERID, @PCADDRESS)

			SELECT 1 AS FLAG, @EMPCODE + ' Punch-In' AS MSG
		END
		ELSE
		BEGIN
			SET @L_VALID=0

			INSERT INTO EMPPUNCH_CANTEEN (EMPCODE,  PIN,	 ISVALID,   TDATE,	  USERID, PCNAME)
								VALUES (@EMPCODE, GETDATE(), @L_VALID, GETDATE(), @USERID, @PCADDRESS)

			SELECT 2 AS FLAG, @EMPCODE + ' You already Punched at ' + CONVERT(VARCHAR, @L_DATE1, 20) AS MSG
		END

		INSERT INTO EMPPUNCH_HISTORY (EMPCODE, PUNCH_DATE, PUNCH_TYPE, PLACE, LOCATION,		ISVALID,  USERID, PCNAME)
							  VALUES (@EMPCODE, GETDATE(), 'IN', 'CANTEEN', 'PACK-CANTEEN', @L_VALID, @USERID, @PCADDRESS)
	END

	IF (@ACTIVITY = 'CANTEEN_ATTENDENCE_COUNT')		--GET CANTEEN TOTAL VALID INVALID EMPLOYEES COUNT
	BEGIN
		SELECT (SELECT COUNT(DISTINCT EMPCODE) FROM EMPPUNCH_CANTEEN WHERE ISVALID=1 AND CONVERT(DATE, TDATE)=CONVERT(DATE, GETDATE())) AS TOTAL_VALID_PUNCH,
		(SELECT COUNT(DISTINCT EMPCODE) FROM EMPPUNCH_CANTEEN WHERE ISVALID=0 AND CONVERT(DATE, TDATE)=CONVERT(DATE, GETDATE()))  AS TOTAL_INVALID_PUNCH
	END

	--------------------- LINE PUNCH ---------------------


	IF (@ACTIVITY = 'FILL_LINE')		--FILL LINE
	BEGIN
		SELECT VALUE AS CODE, TRIM(DESCR) AS NAME FROM MST_CODEDEF WHERE ISACTIVE=1 AND CODE=@DOCNO  ORDER BY KEYID
	END

	IF (@ACTIVITY = 'INSERT_LINE_PUNCH')		--INSERT LINE PUNCH DATA
	BEGIN
		SELECT TOP 1 @L_DATE1=PUNCH_TIME FROM EMPPUNCH_LINE_NEW WHERE EMPCODE=@EMPCODE AND CONVERT(DATE, TDATE)=CONVERT(DATE, GETDATE())
		ORDER BY TDATE DESC

		IF(@L_DATE1 IS NULL)
		BEGIN
			INSERT INTO EMPPUNCH_LINE_NEW (EMPCODE, PUNCH_TIME, LINE_NO, STATION, TDATE, USERID, PCNAME)
								   VALUES (@EMPCODE, GETDATE(), @PARAM1, @PARAM2, GETDATE(), @USERID, @PCADDRESS)

			SELECT 1 AS FLAG, @EMPCODE + ' Punch-In' AS MSG
		END
		ELSE
		BEGIN
			SELECT 2 AS FLAG, @EMPCODE + ' Already Punched at ' + CONVERT(VARCHAR, @L_DATE1, 20) AS MSG
		END

		INSERT INTO EMPPUNCH_HISTORY (EMPCODE, PUNCH_DATE, PUNCH_TYPE, PLACE, LOCATION, USERID, PCNAME)
							  VALUES (@EMPCODE, GETDATE(),		'IN',  @PARAM1, 'PACK',  @USERID, @PCADDRESS)
	END

	IF (@ACTIVITY = 'LINE_ATTENDENCE_COUNT')		--GET LINE ATTENDENCE COUNT
	BEGIN
		SELECT COUNT(DISTINCT EMPCODE) AS TOTAL FROM EMPPUNCH_LINE_NEW WHERE LINE_NO=@PARAM1 AND CONVERT(DATE, TDATE)=CONVERT(DATE, GETDATE())
	END

	--IF (@TYPE = 32)		--INSERT SHIFT IN & OUT PUNCH DATA
	--BEGIN
	--	SELECT TOP 1 @L_NO=SRNO, @L_DATE1=PIN, @L_DATE2=POUT, @L_DATE3=TDATE FROM EMPPUNCH_SHIFT WHERE EMPCODE=@EMPCODE ORDER BY TDATE DESC

	--	IF EXISTS (SELECT * FROM EMPSHIFT_TIME WHERE CONVERT(TIME(0), GETDATE()) BETWEEN DATEADD(minute, -35, CONVERT(TIME(0), START_TIME)) AND START_TIME)		
	--	BEGIN
	--		IF(CONVERT(DATE, GETDATE()) = CONVERT(DATE, @L_DATE1))
	--		BEGIN	
	--			IF EXISTS (SELECT * FROM EMPSHIFT_TIME WHERE CONVERT(TIME(0), @L_DATE1) BETWEEN DATEADD(minute, -35, CONVERT(TIME(0), START_TIME)) AND START_TIME)
	--			BEGIN	--CHECK WEATHER THE LAST PUNCH IN DONE ON SAME DATE AT SHIFT ENTRY TIME (IF YES THEN UPDATE PREVIOUS PUNCH IN ELSE ADD NEW PUNCH IN
	--				UPDATE EMPPUNCH_SHIFT SET PIN=GETDATE(), ISVALID=@ISVALID, REMARKS=@REMARKS, USERID=USERID, TDATE=GETDATE(), PCNAME=@PCADDRESS WHERE EMPCODE=@EMPCODE AND SRNO=@L_NO

	--				SELECT 2 AS FLAG, 'IN' AS PUNCH_TYPE, @EMPCODE + ' You already Punched' AS MSG
	--			END
	--			ELSE
	--			BEGIN
	--				SET @L_NO=(SELECT ISNULL(MAX(SRNO),0)+1 FROM EMPPUNCH_SHIFT WHERE EMPCODE=@EMPCODE)
	--				INSERT INTO EMPPUNCH_SHIFT (SRNO, EMPCODE,     PIN,	ISVALID, REMARKS, USERID, PCNAME)
	--									VALUES (@L_NO, @EMPCODE, GETDATE(), @ISVALID, @REMARKS, @USERID, @PCADDRESS)

	--				SELECT 1 AS FLAG, 'IN' AS PUNCH_TYPE, @EMPCODE + ' Punch-In Successfully' AS MSG
	--			END
	--		END
	--		ELSE
	--		BEGIN
	--			SET @L_NO=(SELECT ISNULL(MAX(SRNO),0)+1 FROM EMPPUNCH_SHIFT WHERE EMPCODE=@EMPCODE)
	--			INSERT INTO EMPPUNCH_SHIFT (SRNO, EMPCODE,		PIN,	ISVALID, REMARKS, USERID, PCNAME)
	--								VALUES (@L_NO, @EMPCODE, GETDATE(), @ISVALID, @REMARKS, @USERID, @PCADDRESS)

	--			SELECT 1 AS FLAG, 'IN' AS PUNCH_TYPE, @EMPCODE + ' Punch-In Successfully' AS MSG
	--		END
	--	END
	--	ELSE IF EXISTS (SELECT * FROM EMPSHIFT_TIME WHERE CONVERT(TIME(0), GETDATE()) BETWEEN END_TIME AND DATEADD(minute, 25, CONVERT(TIME(0), END_TIME)))		
	--	BEGIN	
	--		IF (@L_DATE2 IS NULL)
	--		BEGIN
	--			IF(DATEDIFF(MINUTE, @L_DATE1, GETDATE()) <= 1440)		--IF LAST RECORD DIFFERENCE IS <= 17 HOUR THEN UPDATE ENTRY
	--			BEGIN
	--				UPDATE EMPPUNCH_SHIFT SET POUT=GETDATE(), USERID=USERID, TDATE=GETDATE(), PCNAME=@PCADDRESS WHERE EMPCODE=@EMPCODE AND SRNO=@L_NO	

	--				SELECT 1 AS FLAG, 'OUT' AS PUNCH_TYPE, @EMPCODE + ' Punch-Out Successfully' AS MSG
	--			END
	--			ELSE
	--			BEGIN
	--				SET @L_NO=(SELECT ISNULL(MAX(SRNO),0)+1 FROM EMPPUNCH_SHIFT WHERE EMPCODE=@EMPCODE)
	--				INSERT INTO EMPPUNCH_SHIFT (SRNO, EMPCODE,	   POUT,  ISVALID, REMARKS, USERID, PCNAME)
	--									VALUES (@L_NO, @EMPCODE, GETDATE(), @ISVALID, @REMARKS, @USERID, @PCADDRESS)

	--				SELECT 1 AS FLAG, 'OUT' AS PUNCH_TYPE, @EMPCODE + ' Punch-Out Successfully' AS MSG
	--			END
	--		END
	--		ELSE
	--		BEGIN
	--			IF(CONVERT(DATE, GETDATE()) = CONVERT(DATE, @L_DATE2))
	--			BEGIN	--CHECK WEATHER THE LAST PUNCH OUT DONE ON SAME DATE AT SHIFT EXIT TIME (IF YES THEN NO NEED TO UPDATE PREVIOUS PUNCH OUT ELSE UPDATE PUNCH OUT
	--				SELECT 2 AS FLAG, 'OUT' AS PUNCH_TYPE, @EMPCODE + ' You already Punched' AS MSG
	--			END
	--			ELSE
	--			BEGIN
	--				SET @L_NO=(SELECT ISNULL(MAX(SRNO),0)+1 FROM EMPPUNCH_SHIFT WHERE EMPCODE=@EMPCODE)
	--				INSERT INTO EMPPUNCH_SHIFT (SRNO, EMPCODE,    POUT,	ISVALID, REMARKS, USERID, PCNAME)
	--									VALUES (@L_NO, @EMPCODE, GETDATE(), @ISVALID, @REMARKS, @USERID, @PCADDRESS)

	--				SELECT 1 AS FLAG, 'OUT' AS PUNCH_TYPE, @EMPCODE + ' Punch-Out Successfully' AS MSG
	--			END
	--		END
	--	END
	--	ELSE
	--	BEGIN
	--		IF(DATEDIFF(SECOND, @L_DATE1, GETDATE()) <= 60)		--IF LAST RECORD DIFFERENCE IS <= 60 SECOND THEN UPDATE THE RECORD
	--		BEGIN
	--			UPDATE EMPPUNCH_SHIFT SET PIN=GETDATE(), ISVALID=@ISVALID, REMARKS=@REMARKS, USERID=USERID, TDATE=GETDATE(), PCNAME=@PCADDRESS WHERE EMPCODE=@EMPCODE AND SRNO=@L_NO

	--			SELECT 2 AS FLAG, 'IN' AS PUNCH_TYPE, @EMPCODE + ' You already Punched' AS MSG
	--		END
	--		ELSE
	--		BEGIN
	--			SET @L_NO=(SELECT ISNULL(MAX(SRNO),0)+1 FROM EMPPUNCH_SHIFT WHERE EMPCODE=@EMPCODE)
	--			INSERT INTO EMPPUNCH_SHIFT (SRNO, EMPCODE,    PIN,	ISVALID, REMARKS, USERID, PCNAME)
	--								VALUES (@L_NO, @EMPCODE, GETDATE(), @ISVALID, @REMARKS, @USERID, @PCADDRESS)

	--			SELECT 1 AS FLAG, 'IN' AS PUNCH_TYPE, @EMPCODE + ' Punched Successfully' AS MSG
	--		END
	--	END
	--END


END
GO
/****** Object:  StoredProcedure [dbo].[usp_Calibration]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_Calibration]
(

	@ACTIVITY            VARCHAR(50)='',
	@DOCNO               INT=0,
	@PLANT               VARCHAR(20)='',
	@DIVISION            VARCHAR(20)='',
	@CATEGORY            VARCHAR(50)='',
	@EQUIPID	         VARCHAR(50)='',	
	@CERTI_STATUS        VARCHAR(50)='',
	@DESCR			     VARCHAR(100)='',
	@MAKE                VARCHAR(50)='',
	@AGENCY              VARCHAR(50)='',
	@EQUIP_MODEL         VARCHAR(50)='',
	@TYPE                VARCHAR(50)='',
	@LOCATION            VARCHAR(50)='',
	@MAC_NAME            VARCHAR(100)='',
	@LEAST_CNT           VARCHAR(50)='',
	@FULL_RANGE          VARCHAR(50)='',
	@OPR_RANGE           VARCHAR(50)='',
	@UNIT                VARCHAR(50)='',
	@USERID			     VARCHAR(50)='',
	@STATUS              VARCHAR(50)='',
	@REMARKS			 VARCHAR(2000)='',
	@FILENAME            VARCHAR(100)='', 
	@DATE1			     DATETIME='', 
	@DATE2			     DATETIME='',  
	@DATE3			     DATETIME='', 
	@PARAM1              VARCHAR(100)='', 
	@PARAM2              VARCHAR(100)='',
	@PARAM3              VARCHAR(100)=''    	
)

AS
BEGIN
DECLARE @L_NO INT

	IF (@ACTIVITY = 'ADD_CALIBRATION')   --ADD/UPDATE 
	BEGIN
		IF (@DOCNO > 0)
		BEGIN
			UPDATE CALIBRATION_MASTER SET PLANT=@PLANT, DIVISION=@DIVISION, CALI_DATE=@DATE1, CALI_DUE_DATE=@DATE2, CERTI_STATUS=@CERTI_STATUS, DESCR=@DESCR, CALI_TYPE=@TYPE, 
			MAKE=@MAKE, LEAST_CNT=@LEAST_CNT, EQUIP_MODEL=@EQUIP_MODEL, LOCATION=@LOCATION, FULL_RANGE=@FULL_RANGE, 
			AGENCY=@AGENCY, MAC_NAME=@MAC_NAME, OP_RANGE=@OPR_RANGE, UNIT=@UNIT, USERID=@USERID           
			WHERE DOCNO=@DOCNO
			SELECT 2 AS FLAG, @DOCNO AS DOCNO
		END
		ELSE                                                                                                                                                       
		BEGIN
			SELECT  @DOCNO=ISNULL(MAX(DOCNO),0)+1  FROM  CALIBRATION_MASTER

			INSERT INTO CALIBRATION_MASTER (DOCNO, CATEGORY, PLANT, DIVISION, EQUIPID, CALI_DATE, CALI_DUE_DATE, CERTI_STATUS, DESCR, MAKE, AGENCY, EQUIP_MODEL, CALI_TYPE, LOCATION, MAC_NAME, LEAST_CNT, FULL_RANGE, OP_RANGE, UNIT, USERID, TDATE)          
								VALUES(@DOCNO, @CATEGORY,@PLANT,@DIVISION, @EQUIPID, @DATE1, @DATE2, @CERTI_STATUS, @DESCR, @MAKE, @AGENCY, @EQUIP_MODEL , @TYPE, @LOCATION, @MAC_NAME, @LEAST_CNT, @FULL_RANGE, @OPR_RANGE, @UNIT, @USERID, GETDATE())

			SELECT 1 AS FLAG, @DOCNO AS DOCNO
		END
		
		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  CALIBRATION_HISTORY WHERE DOCNO=@DOCNO
		INSERT INTO CALIBRATION_HISTORY (DOCNO, SRNO, USERID, REMARKS, TDATE)
						VALUES (@DOCNO, @L_NO,  @USERID, @REMARKS, GETDATE())
	END

	IF (@ACTIVITY = 'ADD_CERTIFICATE')		--FILL CALIBRATION HISTORY
    BEGIN
        SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  CALIBRATION_CERTIFICATE WHERE DOCNO=@DOCNO
		INSERT INTO CALIBRATION_CERTIFICATE (DOCNO, SRNO, FILENAME, CERTI_DATE, USERID, TDATE)
								VALUES (@DOCNO, @L_NO, @FILENAME, @DATE3, @USERID, GETDATE())

		SELECT 1 AS FLAG
    END  

	IF(@ACTIVITY = 'GET_CALIBRATION_BY_DOCNO') 
	BEGIN
		SELECT DOCNO, CATEGORY ,PLANT, DIVISION, EQUIPID, FORMAT(CALI_DATE, 'dd-MMM-yyyy') AS CALI_DATE, FORMAT(CALI_DUE_DATE, 'dd-MMM-yyyy') AS CALI_DUE_DATE, DATEDIFF(DAY, GETDATE(), CALI_DUE_DATE) AS DUE_DAYS,
		IIF(DATEDIFF(DAY, GETDATE(), CALI_DUE_DATE) > 15, 'Calibrated', 'Out of Calibration') AS CALI_STATUS, CERTI_STATUS, DESCR, MAKE, AGENCY, EQUIP_MODEL, CALI_TYPE, LOCATION, MAC_NAME, 
		LEAST_CNT, FULL_RANGE, OP_RANGE, UNIT, ISACTIVE, USERID, TDATE 		
		FROM CALIBRATION_MASTER  WHERE DOCNO=@DOCNO 
	END

	IF (@ACTIVITY = 'FILL_HISTORY')		--FILL CALIBRATION HISTORY
    BEGIN
        SELECT DOCNO AS REQUESTNO, SRNO, USERID, ISNULL(dbo.FN_EMPNAME(USERID), '') AS EMPNAME, REMARKS, CONVERT(VARCHAR, TDATE, 20) AS TDATE
        FROM CALIBRATION_HISTORY WHERE DOCNO=@DOCNO
    END  
	
	IF (@ACTIVITY = 'FILL_CERTIFICATE_HISTORY')		--FILL CALIBRATION HISTORY
    BEGIN
        SELECT DOCNO AS REQUESTNO, SRNO, FILENAME AS DOCNAME, CONVERT(VARCHAR, CERTI_DATE, 23) AS DATE3, USERID, ISNULL(dbo.FN_EMPNAME(USERID), '') AS EMPNAME, CONVERT(VARCHAR, TDATE, 20) AS TDATE
        FROM CALIBRATION_CERTIFICATE WHERE DOCNO=@DOCNO
    END  

	IF(@ACTIVITY = 'FILL_CALIBRATION_LIST') 
	BEGIN
		SELECT  * FROM (
		SELECT DOCNO, CATEGORY, PLANT, DIVISION, EQUIPID, FORMAT(CALI_DATE, 'dd-MMM-yyyy') AS CALI_DATE, FORMAT(CALI_DUE_DATE, 'dd-MMM-yyyy') AS CALI_DUE_DATE, DATEDIFF(DAY, GETDATE(), CALI_DUE_DATE) AS DUE_DAYS,
		IIF(DATEDIFF(DAY, GETDATE(), CALI_DUE_DATE) > 15, 'Calibrated', 'Out of Calibration') AS CALI_STATUS, CERTI_STATUS, DESCR, MAKE, AGENCY,
		EQUIP_MODEL, CALI_TYPE, LOCATION, MAC_NAME, LEAST_CNT, FULL_RANGE, OP_RANGE, UNIT, ISACTIVE, USERID, TDATE 		
		FROM CALIBRATION_MASTER) AS T1 
		WHERE T1.ISACTIVE=IIF(@STATUS=2, T1.ISACTIVE, @STATUS)
		AND ISNULL(T1.CATEGORY, '')=CASE WHEN @CATEGORY='0' THEN ISNULL(T1.CATEGORY, '') ELSE @CATEGORY END
		AND ISNULL(T1.DUE_DAYS, 0) <= CASE WHEN @PARAM1=0 THEN T1.DUE_DAYS ELSE @PARAM1 END
		--AND CONVERT(DATE, T1.TDATE) BETWEEN ISNULL(@DATE1, '2022-01-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY T1.DOCNO DESC
	END

	IF(@ACTIVITY = 'FILL_CALIBRATION_RPT') 
	BEGIN
		SELECT  * FROM (
		SELECT DOCNO, CATEGORY, PLANT, DIVISION, EQUIPID, FORMAT(CALI_DATE, 'dd-MMM-yyyy') AS CALI_DATE, FORMAT(CALI_DUE_DATE, 'dd-MMM-yyyy') AS CALI_DUE_DATE, DATEDIFF(DAY, GETDATE(), CALI_DUE_DATE) AS DUE_DAYS,
		IIF(DATEDIFF(DAY, GETDATE(), CALI_DUE_DATE) > 15, 'Calibrated', 'Out of Calibration') AS CALI_STATUS, CERTI_STATUS, DESCR, MAKE, AGENCY,
		EQUIP_MODEL, CALI_TYPE, LOCATION, MAC_NAME, LEAST_CNT, FULL_RANGE, OP_RANGE, UNIT, ISACTIVE, USERID, TDATE 		
		FROM CALIBRATION_MASTER) AS T1 
		WHERE T1.ISACTIVE=IIF(@STATUS=2, T1.ISACTIVE, @STATUS)
		AND ISNULL(T1.CATEGORY, '')=CASE WHEN @CATEGORY='0' THEN ISNULL(T1.CATEGORY, '') ELSE @CATEGORY END
		AND ISNULL(T1.DUE_DAYS, 0) <= CASE WHEN @PARAM1=0 THEN T1.DUE_DAYS ELSE @PARAM1 END
		ORDER BY T1.DOCNO DESC
	END

	IF (@ACTIVITY = 'UPDATE_STATUS')		--UPDATE EQUIPMENT STATUS (ACTIVE/INACTIVE)
    BEGIN
        UPDATE CALIBRATION_MASTER SET ISACTIVE=@STATUS  WHERE DOCNO=@DOCNO 

        SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  CALIBRATION_HISTORY WHERE DOCNO=@DOCNO
        INSERT INTO CALIBRATION_HISTORY (DOCNO, SRNO, USERID, REMARKS, TDATE)
						VALUES (@DOCNO, @L_NO,  @USERID, IIF(@STATUS=1, 'STATUS ACTIVE', 'STATUS INACTIVE'), GETDATE())
    END

END
GO
/****** Object:  StoredProcedure [dbo].[usp_DCN]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[usp_DCN]
(
	@ACTIVITY				VARCHAR(50)='',
	@REQNO					INT=0,
	@EMPCODE				VARCHAR(50)='',
	@DEPT					VARCHAR(50)='',	
	@REQTYPE				VARCHAR(50)='',
	@REASON					VARCHAR(100)='',
	@DOCNO					VARCHAR(1000)='',
	@DOCNAME				VARCHAR(1000)='',
	@DOCCHANGES				VARCHAR(1000)='',
	@CHANGE_REQUIRE_IN      VARCHAR(50)='',
	@CHANGEDOCNO			VARCHAR(1000)='',
	@CHANGEDOCNAME			VARCHAR(1000)='',
	@DCCDOCNO				VARCHAR(1000)='',
	@DCCDOCNAME				VARCHAR(1000)='',
	@DCCREQTYPE				VARCHAR(50)='',
	@DCCSTATUS				VARCHAR(10)='',
	@FILENAME				VARCHAR(100)='', 
	
	@REMARKS				VARCHAR(500)='',
	@STATUS					INT=0,
	@STATUS_DESCR			VARCHAR(50)='',
	@USERID					VARCHAR(50)='',
	@APPRID					VARCHAR(50)='',
	@APPRTYPE				VARCHAR(50)='',
	@HOD					VARCHAR(50)='',

	@DATE1					VARCHAR(50)='',
	@DATE2					VARCHAR(50)='',
	@PARAM1					VARCHAR(100)=''
)
AS
BEGIN
DECLARE @L_NO INT

	IF (@ACTIVITY = 'ADD_DCN')   --ADD/UPDATE DCN
	BEGIN
		IF (@REQNO > 0)
		BEGIN
			UPDATE DCN_MASTER SET REQ_TYPE=@REQTYPE, REASON=@REASON, EFFECTIVE_FROM=@DATE1, DOCNO=@DOCNO, DOCNAME=@DOCNAME, DOC_CHANGES=@DOCCHANGES, CHANGE_REQUIRED_IN=@CHANGE_REQUIRE_IN, 
			CHANGE_DOCNO=@CHANGEDOCNO, CHANGE_DOCNAME=@CHANGEDOCNAME, FILENAME=@FILENAME, STATUS=@STATUS, PENDING_WITH=@HOD, DEPT_HOD=@HOD
			WHERE REQNO=@REQNO
			SELECT 2 AS FLAG, @REQNO AS REQNO
		END
		ELSE                                                                                                                                                       
		BEGIN
			SELECT  @REQNO=ISNULL(MAX(REQNO),0)+1 FROM  DCN_MASTER

			INSERT INTO DCN_MASTER (REQNO, REQID, DEPTCODE, REQ_TYPE, REASON, EFFECTIVE_FROM, DOCNO, DOCNAME, DOC_CHANGES, CHANGE_REQUIRED_IN, CHANGE_DOCNO, CHANGE_DOCNAME, FILENAME, STATUS, USERID, TDATE, PENDING_WITH, DEPT_HOD)
							VALUES(@REQNO, @EMPCODE, @DEPT, @REQTYPE, @REASON, @DATE1, @DOCNO, @DOCNAME, @DOCCHANGES, @CHANGE_REQUIRE_IN, @CHANGEDOCNO, @CHANGEDOCNAME, @FILENAME, @STATUS, @USERID, GETDATE(), @HOD, @HOD) 
			
			SELECT 1 AS FLAG, @REQNO AS REQNO
		END

		IF (@STATUS > 1)       -- ADD REQUEST
		BEGIN
			SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  DCN_HISTORY WHERE REQNO=@REQNO
			INSERT INTO DCN_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS,  STATUSDESCR, TDATE)
							VALUES (@REQNO, @L_NO, 'REQESTOR', @USERID, @REMARKS, @STATUS, 'Post', GETDATE())
		END
	END

	IF (@ACTIVITY = 'GET_DCN_BY_DOCNO')        --GET DCN DATA BY DOCNO
    BEGIN
        SELECT REQNO, REQID, dbo.FN_EMPNAME(REQID) AS REQNAME, DEPTCODE, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, REQ_TYPE, DOCNAME, DOCNO, DOC_CHANGES, REASON, CHANGE_REQUIRED_IN, CHANGE_DOCNO, CHANGE_DOCNAME, 
		FORMAT(EFFECTIVE_FROM, 'dd-MMM-yyyy') AS EFFECTIVE_FROM, FILENAME, STATUS, USERID, FORMAT(TDATE, 'dd-MMM-yyyy') AS TDATE, PENDING_WITH, DEPT_HOD, dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD_NAME, DEPT_HOD_DATE, 
		DCC_INCHARGE, DCC_INCHARGE_DATE, DCC_DOC_NAME, DCC_DOCNO, DCC_REQ_TYPE, FORMAT(DCC_DONE_DATE, 'dd-MMM-yyyy') AS DCC_DONE_DATE, DCC_DOC_DESTROY
		FROM DCN_MASTER WHERE REQNO=@REQNO
    END 

	IF (@ACTIVITY = 'FILL_DCN_HISTORY')		--FILL DCN HISTORY
    BEGIN
		SELECT REQNO AS REQUESTNO, SRNO, USERTYPE, ISNULL(USERID, '') AS USERID, ISNULL(dbo.FN_EMPNAME(USERID), '') AS EMPNAME, ISNULL(REMARKS, '') AS REMARKS, 
		ISNULL(STATUS, 0) AS STATUS, ISNULL(STATUSDESCR, '') AS STATUSDESCR, ISNULL(CONVERT(VARCHAR, TDATE, 20),'') AS TDATE
		FROM DCN_HISTORY WHERE REQNO=@REQNO ORDER BY SRNO
    END

	IF (@ACTIVITY = 'FILL_DCN_LIST_APPRS')
	BEGIN
		SELECT REQNO, REQID, dbo.FN_EMPNAME(REQID) AS REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, REQ_TYPE, DOCNAME, DOCNO, DOC_CHANGES, REASON, CHANGE_REQUIRED_IN, CHANGE_DOCNO, 
		CHANGE_DOCNAME, CONVERT(VARCHAR, EFFECTIVE_FROM, 23) AS EFFECTIVE_FROM, STATUS, dbo.FN_CODEDEF(37, STATUS) AS STATUS_DESCR, USERID, CONVERT(VARCHAR, TDATE, 23) AS TDATE,
		ISNULL(dbo.FN_EMPNAME(PENDING_WITH), '') AS PENDING_WITH, ISNULL(dbo.FN_EMPNAME(DEPT_HOD), '') AS  DEPT_HOD, DEPT_HOD_DATE, DCC_INCHARGE, DCC_INCHARGE_DATE, DCC_DOC_NAME, 
		DCC_DOCNO, DCC_REQ_TYPE, DCC_DONE_DATE, DCC_DOC_DESTROY, APPRTYPE 
		FROM (
		SELECT REQNO, REQID, DEPTCODE, REQ_TYPE, DOCNAME, DOCNO, DOC_CHANGES, REASON, CHANGE_REQUIRED_IN, CHANGE_DOCNO, CHANGE_DOCNAME, EFFECTIVE_FROM, STATUS, USERID, TDATE, PENDING_WITH,
		DEPT_HOD, DEPT_HOD_DATE, DCC_INCHARGE, DCC_INCHARGE_DATE, DCC_DOC_NAME, DCC_DOCNO, DCC_REQ_TYPE, DCC_DONE_DATE, DCC_DOC_DESTROY, 'REQUESTOR' AS APPRTYPE
		FROM DCN_MASTER WHERE USERID=@USERID
		AND STATUS=CASE WHEN @STATUS IN (0,20) THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		UNION
		SELECT REQNO, REQID, DEPTCODE, REQ_TYPE, DOCNAME, DOCNO, DOC_CHANGES, REASON, CHANGE_REQUIRED_IN, CHANGE_DOCNO, CHANGE_DOCNAME, EFFECTIVE_FROM, STATUS, USERID, TDATE, PENDING_WITH,
		DEPT_HOD, DEPT_HOD_DATE, DCC_INCHARGE, DCC_INCHARGE_DATE, DCC_DOC_NAME, DCC_DOCNO, DCC_REQ_TYPE, DCC_DONE_DATE, DCC_DOC_DESTROY, 'HOD' AS APPRTYPE
		FROM DCN_MASTER WHERE DEPT_HOD=@USERID
		AND STATUS=CASE WHEN @STATUS IN (0,20) THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		UNION
		SELECT REQNO, REQID, DEPTCODE, REQ_TYPE, DOCNAME, DOCNO, DOC_CHANGES, REASON, CHANGE_REQUIRED_IN, CHANGE_DOCNO, CHANGE_DOCNAME, EFFECTIVE_FROM, STATUS, USERID, TDATE, PENDING_WITH,
		DEPT_HOD, DEPT_HOD_DATE, DCC_INCHARGE, DCC_INCHARGE_DATE, DCC_DOC_NAME, DCC_DOCNO, DCC_REQ_TYPE, DCC_DONE_DATE, DCC_DOC_DESTROY, 'DCC' AS APPRTYPE
		FROM DCN_MASTER WHERE ISNULL(DCC_INCHARGE,'0')=CASE WHEN STATUS=3 THEN (SELECT '0' FROM MST_CONFIG WHERE MODULE='DCN' AND CATEGORY1='DCC_INCHARGE' AND VALUE=@USERID) ELSE @USERID END
		AND STATUS=CASE WHEN @STATUS IN (0,20) THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		) AS T1
		ORDER BY 1 DESC
	END

	IF (@ACTIVITY = 'GET_DCC_EMAIL')	--GET DCC APPROVERS EMAILID
    BEGIN
        SELECT STRING_AGG(dbo.FN_EMPEMAIL(VALUE), ',') AS EMAILID FROM MST_CONFIG WHERE MODULE='DCN' AND CATEGORY1='DCC_INCHARGE'
    END

	IF (@ACTIVITY = 'APPROVE_DCN')		--APPROVE REQUEST
    BEGIN
		IF (@APPRTYPE = 'HOD')
		BEGIN
			UPDATE DCN_MASTER SET STATUS=@STATUS, PENDING_WITH='0', DEPT_HOD_DATE=GETDATE() WHERE REQNO=@REQNO
			SELECT 1 AS FLAG
		END
		IF (@APPRTYPE = 'DCC')
		BEGIN
			IF (@STATUS=1) --REVIEW BACK BY DCC
			BEGIN
				UPDATE DCN_MASTER SET STATUS=@STATUS WHERE REQNO=@REQNO
				SELECT 1 AS FLAG
			END
			ELSE
			BEGIN
				UPDATE DCN_MASTER SET STATUS=@STATUS, DCC_INCHARGE=@USERID, DCC_INCHARGE_DATE=GETDATE(), 
				DCC_DOCNO=@DCCDOCNO, DCC_DOC_NAME=@DCCDOCNAME, DCC_REQ_TYPE=@DCCREQTYPE, DCC_DOC_DESTROY=@DCCSTATUS, DCC_DONE_DATE=@DATE2
				WHERE REQNO=@REQNO
				SELECT 1 AS FLAG
			END			
		END
		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  DCN_HISTORY WHERE REQNO=@REQNO
		INSERT INTO DCN_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS,  STATUSDESCR, TDATE)
						VALUES (@REQNO, @L_NO, @APPRTYPE, @USERID, @REMARKS, @STATUS, @STATUS_DESCR, GETDATE())
    END

	IF (@ACTIVITY = 'FILL_REPORT_DCC')        --GET DCN REPORT
    BEGIN
		SELECT REQNO, REQID, dbo.FN_EMPNAME(REQID) AS REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, REQ_TYPE, DOCNAME, DOCNO, DOC_CHANGES, REASON, CHANGE_REQUIRED_IN, CHANGE_DOCNO, CHANGE_DOCNAME, 
		CONVERT(VARCHAR, EFFECTIVE_FROM, 23) AS EFFECTIVE_FROM, DEPT_HOD +' - '+ dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, DEPT_HOD_DATE, DCC_INCHARGE +' - '+ dbo.FN_EMPNAME(DCC_INCHARGE) AS DCC_INCHARGE, 
		DCC_INCHARGE_DATE, DCC_DOC_NAME, DCC_DOCNO, DCC_REQ_TYPE, DCC_DONE_DATE, DCC_DOC_DESTROY, dbo.FN_CODEDEF(37, STATUS) AS STATUS_DESCR, USERID, CONVERT(VARCHAR, TDATE, 23) AS TDATE
		FROM DCN_MASTER WHERE STATUS>=3 AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY REQNO DESC
    END 
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Deviation]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_Deviation]
(
	@ACTIVITY            VARCHAR(50)='',
	@REQNO				 INT=0,
	@EMPCODE             VARCHAR(20)='',
	@DEPT                VARCHAR(50)='',
	@CONTACT             VARCHAR(50)='',
	@PLANT               VARCHAR(20)='',
	@MODEL               VARCHAR(200)='',
	@PARTNO              VARCHAR(200)='',
	@QTY                 VARCHAR(20)='',
	@DEVIATION_TYPE      VARCHAR(50)='',
	@CUSTOMER		     VARCHAR(50)='',
	@FILENAME            VARCHAR(100)='', 
	@NATURE_OF_ISSUE     VARCHAR(1000)='',
	@ACTION_PROPOSED     VARCHAR(1000)='',
	@ROOT_CAUSE          VARCHAR(1000)='',
	@CORRECTIVE_ACTION   VARCHAR(1000)='',
	@REMARKS			 VARCHAR(500)='',
	@STATUS              INT=0,
	@STATUS_DESCR		 VARCHAR(50)='',
	@USERID              VARCHAR(50)='',
	@APPRID				 VARCHAR(50)='',
	@APPRTYPE			 VARCHAR(50)='',
	
	@DATE1			     VARCHAR(50)='',
	@DATE2			     VARCHAR(50)='',
	@PARAM1				 VARCHAR(100)='',
	@PARAM2				 VARCHAR(100)=''
)
AS
BEGIN
DECLARE @L_NO INT, @L_P1 VARCHAR(50)='', @L_P2 VARCHAR(50)='', @L_P3 VARCHAR(50)=''

	IF (@ACTIVITY = 'ADD_DEVIATION')   --ADD/UPDATE DEVIATION
	BEGIN
		IF (@REQNO > 0)
		BEGIN
			UPDATE DEVIATION_MASTER SET REQID=@EMPCODE, DEPTCODE=@DEPT,PLANT=@PLANT, MODEL=@MODEL, PARTNO=@PARTNO, QTY=@QTY, VALIDITY=@DATE1, DEVIATION_TYPE=@DEVIATION_TYPE, CUSTOMER=@CUSTOMER,
			FILENAME=@FILENAME, NATURE_OF_ISSUE=@NATURE_OF_ISSUE, ACTION_PROPOSED=@ACTION_PROPOSED, ROOT_CAUSE=@ROOT_CAUSE, CORRECTIVE_ACTION=@CORRECTIVE_ACTION, STATUS=@STATUS, PENDING_WITH='QA'
			WHERE REQNO=@REQNO
			SELECT 2 AS FLAG, @REQNO AS REQNO
		END
		ELSE                                                                                                                                                       
		BEGIN
			SELECT  @REQNO=ISNULL(MAX(REQNO),0)+1 FROM  DEVIATION_MASTER

			INSERT INTO DEVIATION_MASTER (REQNO, REQID, DEPTCODE,CONTACTNO, PLANT, MODEL, PARTNO, QTY, VALIDITY, DEVIATION_TYPE, CUSTOMER, FILENAME, NATURE_OF_ISSUE, ACTION_PROPOSED, ROOT_CAUSE, CORRECTIVE_ACTION, STATUS, USERID, TDATE, PENDING_WITH)
							VALUES(@REQNO, @EMPCODE, @DEPT,@CONTACT, @PLANT, @MODEL, @PARTNO, @QTY, @DATE1, @DEVIATION_TYPE, @CUSTOMER, @FILENAME, @NATURE_OF_ISSUE, @ACTION_PROPOSED, @ROOT_CAUSE, @CORRECTIVE_ACTION, @STATUS, @USERID, GETDATE(), 'QA')
			
			SELECT 1 AS FLAG, @REQNO AS REQNO
		END

		IF (@STATUS > 1)       -- ADD REQUEST
		BEGIN
			SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  DEVIATION_HISTORY WHERE REQNO=@REQNO
			INSERT INTO DEVIATION_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS,  STATUSDESCR, TDATE)
								VALUES (@REQNO, @L_NO, 'REQUESTOR', @USERID, '', @STATUS, 'Post', GETDATE())
		END
	END

	IF (@ACTIVITY = 'ADD_DEVIATION_APPROVERS')   --ADD DEVIATION APPROVERS
	BEGIN
		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  DEVIATION_HISTORY WHERE REQNO=@REQNO
		INSERT INTO DEVIATION_HISTORY (REQNO, SRNO, USERTYPE) VALUES (@REQNO, @L_NO, @APPRTYPE)

		SELECT 1 AS FLAG
	END

	IF (@ACTIVITY = 'FILL_DEVIATION_APPR_LIST')		--FILL DEVIATION APPROVER TYPES
    BEGIN
		SELECT DISTINCT CATEGORY1 AS APPRTYPE, CATEGORY2 AS PARAM1, LVL 
		FROM MST_CONFIG WHERE MODULE='DEVIATION' AND CATEGORY2 IS NOT NULL AND PLANT=@PLANT ORDER BY LVL
    END

	IF (@ACTIVITY = 'VIEW_DEVIATION_APPR_LIST')		--VIEW DEVIATION APPROVER TYPES
    BEGIN
		SELECT PLANT, CATEGORY1 AS APPRTYPE, VALUE + ' - ' + dbo.FN_EMPNAME(VALUE) AS EMPNAME, CAST(LVL AS VARCHAR) AS PARAM1
		FROM MST_CONFIG WHERE MODULE='DEVIATION' AND CATEGORY2 IS NOT NULL AND PLANT=@PLANT ORDER BY LVL
    END

	IF (@ACTIVITY = 'GET_DEVIATION_BY_DOCNO')        --GET DEVIATION DATA BY REQUEST NO
    BEGIN
        SELECT REQNO, REQID, dbo.FN_EMPNAME(REQID) AS REQNAME, DEPTCODE, CONTACTNO, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, PLANT, MODEL, PARTNO, QTY, FORMAT(VALIDITY, 'dd-MMM-yyyy') AS VALIDITY, CUSTOMER,
		FILENAME, DEVIATION_TYPE, NATURE_OF_ISSUE, ACTION_PROPOSED, ROOT_CAUSE, CORRECTIVE_ACTION, STATUS, USERID, FORMAT(TDATE, 'dd-MMM-yyyy') AS TDATE, PENDING_WITH
		FROM DEVIATION_MASTER WHERE REQNO=@REQNO
    END 

	IF (@ACTIVITY = 'FILL_DEVIATION_HISTORY')		--FILL DEVIATION HISTORY
    BEGIN
		SELECT REQNO AS REQUESTNO, SRNO, USERTYPE, ISNULL(USERID, '') AS USERID, ISNULL(dbo.FN_EMPNAME(USERID), '') AS EMPNAME, ISNULL(REMARKS, '') AS REMARKS, 
		ISNULL(STATUS, 0) AS STATUS, ISNULL(STATUSDESCR, '') AS STATUSDESCR, ISNULL(CONVERT(VARCHAR, TDATE, 20),'') AS TDATE
		FROM DEVIATION_HISTORY WHERE REQNO=@REQNO ORDER BY SRNO
    END

	IF (@ACTIVITY='FILL_DEVIATION_LIST_APPRS')
	BEGIN
		SELECT REQNO, REQID, dbo.FN_EMPNAME(REQID) AS REQNAME, DEPTCODE, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, PLANT, MODEL, PARTNO, QTY, CONVERT(VARCHAR, VALIDITY, 23) AS VALIDITY, DEVIATION_TYPE, CUSTOMER, 
		NATURE_OF_ISSUE, ACTION_PROPOSED, ROOT_CAUSE, CORRECTIVE_ACTION, STATUS, dbo.FN_CODEDEF(39, STATUS) AS STATUSDESCR, USERID, CONVERT(VARCHAR, TDATE, 23) AS TDATE, PENDING_WITH, APPRTYPE 
		FROM
		(
		SELECT REQNO, REQID, DEPTCODE, CONTACTNO, PLANT, MODEL, PARTNO, QTY, VALIDITY, CUSTOMER, DEVIATION_TYPE, NATURE_OF_ISSUE, ACTION_PROPOSED,
		ROOT_CAUSE, CORRECTIVE_ACTION, STATUS, USERID, TDATE, PENDING_WITH, 'REQUESTOR' AS APPRTYPE 
		FROM DEVIATION_MASTER WHERE USERID=@USERID
		AND STATUS=CASE WHEN @STATUS IN (0,20) THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		UNION
		SELECT REQNO, REQID, DEPTCODE, CONTACTNO, PLANT, MODEL, PARTNO, QTY, VALIDITY, CUSTOMER, DEVIATION_TYPE, NATURE_OF_ISSUE, ACTION_PROPOSED,
		ROOT_CAUSE, CORRECTIVE_ACTION, STATUS, USERID, TDATE, PENDING_WITH, PENDING_WITH AS APPRTYPE 
		FROM DEVIATION_MASTER A WHERE @USERID IN (SELECT VALUE FROM MST_CONFIG B WHERE MODULE='DEVIATION' AND B.PLANT=A.PLANT AND B.CATEGORY1=A.PENDING_WITH)
		AND STATUS=CASE WHEN @STATUS IN (0,20) THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		UNION
		SELECT REQNO, REQID, DEPTCODE, CONTACTNO, PLANT, MODEL, PARTNO, QTY, VALIDITY, CUSTOMER, DEVIATION_TYPE, NATURE_OF_ISSUE, ACTION_PROPOSED,
		ROOT_CAUSE, CORRECTIVE_ACTION, STATUS, USERID, TDATE, PENDING_WITH, 'VIEW' AS APPRTYPE 
		FROM DEVIATION_MASTER A WHERE USERID<>@USERID AND @USERID IN (SELECT DISTINCT USERID FROM DEVIATION_HISTORY B WHERE B.REQNO=A.REQNO)
		AND STATUS=CASE WHEN @STATUS IN (0,20) THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		--SELECT REQNO, REQID, DEPTCODE, PLANT, MODEL, PARTNO, QTY, VALIDITY, CUSTOMER, DEVIATION_TYPE, NATURE_OF_ISSUE, ACTION_PROPOSED,
		--ROOT_CAUSE, CORRECTIVE_ACTION, STATUS, USERID, TDATE, PENDING_WITH, 'VIEW' AS APPRTYPE 
		--FROM DEVIATION_MASTER A WHERE USERID<>@USERID AND @USERID IN (SELECT DISTINCT B.VALUE FROM MST_CONFIG B INNER JOIN DEVIATION_HISTORY C ON B.CATEGORY1=C.USERTYPE
		--WHERE B.MODULE='DEVIATION' AND B.PLANT=A.PLANT AND C.REQNO=A.REQNO)
		) AS T1
		ORDER BY REQNO DESC
	END

	IF (@ACTIVITY = 'CHECK_DEVIATION_APPR')		--CHECK CURRENT DEVIATION APPROVER
    BEGIN
		IF EXISTS (SELECT * FROM DEVIATION_MASTER WHERE STATUS=2 AND REQNO=@REQNO 
		AND PENDING_WITH IN (SELECT TOP 1 CATEGORY1 FROM MST_CONFIG WHERE MODULE='DEVIATION' AND PLANT=@PLANT AND CATEGORY1=@APPRTYPE AND VALUE=@USERID))
		BEGIN
			SELECT 1 AS FLAG
		END
    END

	IF (@ACTIVITY = 'APPROVE_DEVIATION')		--APPROVE DEVIATION
    BEGIN
		IF EXISTS (SELECT * FROM DEVIATION_MASTER WHERE STATUS=2 AND REQNO=@REQNO AND PENDING_WITH=@APPRTYPE)
		BEGIN
			UPDATE DEVIATION_HISTORY SET USERID=@USERID, REMARKS=@REMARKS, STATUS=@STATUS, STATUSDESCR=@STATUS_DESCR, TDATE=GETDATE()
			WHERE REQNO=@REQNO AND USERTYPE=@APPRTYPE
			IF (@STATUS_DESCR = 'APPROVED')
			BEGIN
				SELECT TOP 1 @L_P1=USERTYPE FROM DEVIATION_HISTORY WHERE REQNO=@REQNO AND ISNULL(USERID, '')='' ORDER BY SRNO

				UPDATE DEVIATION_MASTER SET STATUS=@STATUS, PENDING_WITH=@L_P1, LAST_APPR_DATE=GETDATE() WHERE REQNO=@REQNO

				SELECT 1 AS FLAG
			END
			ELSE IF (@STATUS_DESCR = 'REJECTED')
			BEGIN
				UPDATE DEVIATION_MASTER SET STATUS=@STATUS, PENDING_WITH='' WHERE REQNO=@REQNO
				SELECT 1 AS FLAG
			END
			ELSE
			BEGIN
				SELECT 2 AS FLAG
			END
		END
		ELSE	--APPROVER CAN NOT APPROVE
		BEGIN
			SELECT 2 AS FLAG
		END
    END

	IF (@ACTIVITY = 'GET_DEVIATION_EMAIL')	--GET DEVIATION APPROVERS EMAILID
    BEGIN
		SELECT @L_P1=REQID, @L_P2=PLANT, @L_P3=ISNULL(PENDING_WITH, ''), @L_NO=STATUS FROM DEVIATION_MASTER WHERE REQNO=@REQNO
		IF (@APPRTYPE = 'REQUESTOR')
		BEGIN
			IF(@L_NO = 3)		--FINISH
			BEGIN
				SELECT STRING_AGG(dbo.FN_EMPEMAIL(USERID), ',') AS EMAILID
				FROM (
				SELECT VALUE AS USERID FROM MST_CONFIG WHERE MODULE='DEVIATION' AND CATEGORY1='INTIMATION' AND PLANT=@L_P2
				UNION
				SELECT @L_P1 AS USERID
				) AS T1
			END
			ELSE
			BEGIN
				SELECT dbo.FN_EMPEMAIL(@L_P1) AS EMAILID
			END
		END
		ELSE
		BEGIN
			SELECT STRING_AGG(dbo.FN_EMPEMAIL(VALUE), ',') AS EMAILID FROM MST_CONFIG WHERE MODULE='DEVIATION' AND PLANT=@L_P2 AND CATEGORY1=@L_P3
		END 
    END

	IF (@ACTIVITY = 'FILL_REPORT_DEVIATION')        --GET DEVIATION REPORT
    BEGIN
		SELECT REQNO, REQID, dbo.FN_EMPNAME(REQID) AS REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, PLANT, MODEL, PARTNO, QTY, CONVERT(VARCHAR, VALIDITY, 23) AS VALIDITY, DEVIATION_TYPE, CUSTOMER, 
		NATURE_OF_ISSUE, ACTION_PROPOSED, ROOT_CAUSE, CORRECTIVE_ACTION, dbo.FN_CODEDEF(39, STATUS) AS STATUSDESCR, 
		CASE WHEN STATUS=4 THEN 'Rejected' WHEN CONVERT(DATE, VALIDITY) < CONVERT(DATE, GETDATE()) THEN 'Expired' ELSE 'In-Process' END AS DEVIATION_STATUS,
		USERID, CONVERT(VARCHAR, TDATE, 23) AS TDATE
		FROM DEVIATION_MASTER WHERE STATUS>=2 AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY REQNO DESC
    END 

END
GO
/****** Object:  StoredProcedure [dbo].[usp_DT]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[usp_DT]
(
    @Activity			VARCHAR(200)	=	''
    ,@AadharNo			VARCHAR(100)	=	''
    ,@EmpName			VARCHAR(500)	=	''
    ,@EmpCode			VARCHAR(50)		=	''
	,@Qualification		VARCHAR(500)	=	''
	,@DOJ				DATETIME		=	NULL
	,@EmpType			INT				=	''
    ,@EmpStatus			INT				=	''
	,@Grade				CHAR(1)			=	''
	,@Reason			VARCHAR(1000)	=	''
	,@IsEmpReJoin		BIT				=	0
    ,@OldEmpCode		VARCHAR(50)		=	''
    ,@ADID				VARCHAR(20)		=	''
	,@Station			INT				=	''
	,@Que				VARCHAR(max)	=	''
    ,@Option1			VARCHAR(max)	=	''
    ,@Option2			VARCHAR(max)	=	''
    ,@Option3			VARCHAR(max)	=	''
    ,@Option4			VARCHAR(max)	=	''
    ,@Ans				VARCHAR(max)	=	''
	,@Id				INT				=	0   
    ,@DOL				DATETIME		=	NULL     
    ,@Action			VARCHAR(20)		=	''    
    ,@DocUId			VARCHAR(MAX)	=	''
	,@CustomerId		INT				=	0
	,@CustomerName		VARCHAR(500)	=	''
	,@PrimaryApprover	VARCHAR(20)		=	''
    ,@Approver1			VARCHAR(20)		=	''
    ,@Approver2			VARCHAR(20)		=	''
    ,@Approver3			VARCHAR(20)		=	''
    ,@Approver4			VARCHAR(20)		=	''
    ,@Approver5			VARCHAR(20)		=	''
    ,@Approver6			VARCHAR(20)		=	''
	,@TrainingDate		DATETIME		=	NULL
    ,@TrainingFor		VARCHAR(MAX)	=	''
    ,@Trainer			VARCHAR(20)		=	''
    ,@EmpCodes			VARCHAR(MAX)	=	''
    ,@TestScore			INT				=	0
    ,@TestScoreOutof	INT				=	0    
    ,@IsAnsCorrect		INT				=	0
    ,@SelectedAns		VARCHAR(MAX)	=	''	
	,@Param1			VARCHAR(MAX)	=	''
	,@Param2			VARCHAR(MAX)	=	''
)
AS
BEGIN
    DECLARE @L_STATUS VARCHAR(50), @L_PARAM1 VARCHAR(max)


	IF(@Activity='GetActiveManPower')BEGIN
        SELECT AADHARNO, EMPCODE, EMPNAME, QUALIFICATION, REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ, ISNULL(CAST(DOL AS VARCHAR), '') DOL, DBO.FN_CODEDEF(51, EMPTYPE) EMPTYPE, 
		DBO.FN_CODEDEF(53, EMPSTATUS) EMPSTATUS, GRADE, CAST(DOJ as date) as 'SortDate',ISNULL(Reason,'')Reason
        FROM DT_MANPOWER_ACTIVE
        ORDER BY SortDate DESC
    END
	IF(@Activity='GetInActiveManPower')BEGIN
        SELECT AADHARNO, EMPCODE, EMPNAME, QUALIFICATION, REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ, REPLACE(CONVERT(NVARCHAR, DOL, 106), ' ', '-') DOL, DBO.FN_CODEDEF(51, EMPTYPE) EMPTYPE, 
		DBO.FN_CODEDEF(53, EMPSTATUS) EMPSTATUS, GRADE, CAST(DOL as date) as 'SortDate',ISNULL(Reason,'')Reason
        FROM DT_MANPOWER_INACTIVE
        ORDER BY SortDate DESC
    END
    IF(@Activity='AddManPower')BEGIN
        IF NOT EXISTS (SELECT * FROM DT_MANPOWER_ACTIVE WHERE AADHARNO=@AADHARNO)BEGIN
            SELECT TOP 1 @L_STATUS=EMPSTATUS FROM DT_MANPOWER_INACTIVE WHERE AADHARNO=@AADHARNO ORDER BY TDATE DESC
            IF(ISNULL(@L_STATUS, '')='')BEGIN
                IF EXISTS (SELECT * FROM DT_MANPOWER_ACTIVE WHERE EMPCODE=@EMPCODE)BEGIN
                    SELECT '' RETVAL, '0' FLAG, 'Employee Code already Exists' AS MSG
                END
                ELSE BEGIN
                    INSERT INTO DT_MANPOWER_ACTIVE(AADHARNO, EMPNAME, EMPCODE, QUALIFICATION, DOJ, EMPTYPE, EMPSTATUS, GRADE, CREATEDBY, TDATE)
                    VALUES(@AADHARNO, @EMPNAME, @EMPCODE, @QUALIFICATION, @DOJ, @EMPTYPE, @EMPSTATUS, @GRADE, @ADID, GETDATE())
                    SELECT '' RETVAL, '1' FLAG, 'Employee added Successfully' AS MSG
                END
            END
            ELSE BEGIN
                IF(@L_STATUS='3')BEGIN
                    SELECT '3' RETVAL, '0' FLAG, 'Employee is Suspended' AS MSG
                END
                ELSE BEGIN
                    IF(@ISEMPREJOIN=1)BEGIN
                        IF EXISTS (SELECT * FROM DT_MANPOWER_ACTIVE WHERE EMPCODE=@EMPCODE)BEGIN
                            SELECT '2' RETVAL, '0' FLAG, 'Employee Code already Exists' AS MSG
                        END
                        ELSE IF EXISTS (SELECT * FROM DT_MANPOWER_INACTIVE WHERE EMPCODE=@EMPCODE)BEGIN
                                 SELECT '2' RETVAL, '0' FLAG, 'Employee Code already Exists' AS MSG
                        END
                        ELSE BEGIN
                                 INSERT INTO DT_MANPOWER_ACTIVE(AADHARNO, EMPNAME, EMPCODE, QUALIFICATION, DOJ, EMPTYPE, EMPSTATUS, GRADE, CREATEDBY, TDATE)
                                 VALUES(@AADHARNO, @EMPNAME, @EMPCODE, @QUALIFICATION, @DOJ, @EMPTYPE, @EMPSTATUS, @GRADE, @ADID, GETDATE())
                                 --IF(@GRADE !='D')BEGIN
                                 --    INSERT INTO DT_SKILL_MATRIX(AADHARNO, EMPCODE, EMPNAME, DOJ, CERTIFICATIONDATE, STATION, GRADE, CREATEDBY, TDATE)
                                 --    SELECT AADHARNO, @EMPCODE, EMPNAME, GETDATE(), CERTIFICATIONDATE, STATION, GRADE, @ADID, GETDATE()
                                 --    FROM DT_SKILL_MATRIX
                                 --    WHERE AadharNo=@AadharNo AND EmpCode=@OldEmpCode
                                 --END
                                 SELECT '' RETVAL, '1' FLAG, 'Employee Rejoin Successfully.' AS MSG
                        END
                    END
                    ELSE BEGIN
                        SELECT '2' RETVAL, '0' FLAG, 'Employee has left the company and the previous details have been filled' AS MSG
                    END
                END
            END
        END
        ELSE BEGIN
            SELECT '' RETVAL, '0' FLAG, 'Employee already exists with same Aadhar No' AS MSG
        END
    END
    IF(@Activity='GetLeftManPowerByANo')BEGIN
        SELECT TOP 1 AADHARNO, EMPCODE, EMPNAME, QUALIFICATION, REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ, DOL, CAST(EMPTYPE AS varchar) EMPTYPE, CAST(EMPSTATUS AS VARCHAR) EMPSTATUS, 
		IIF(DOL<DATEADD(day, -30, GETDATE()), 'D', GRADE) GRADE
        FROM DT_MANPOWER_INACTIVE
        WHERE AadharNo=@AadharNo
        ORDER BY TDATE DESC
    END
	IF(@Activity='UpdateSkillsNotConsider')BEGIN
       UPDATE DT_SKILL_MATRIX set SkillNotConsider=1, UDate=GETDATE(), UpdatedBy=@ADID 
	   WHERE AadharNo=@AadharNo
    END
    IF(@Activity='GetManPowerByANo')BEGIN
		IF EXISTS(SELECT AADHARNO FROM DT_MANPOWER_ACTIVE WHERE AadharNo=@AadharNo) BEGIN
			SELECT AADHARNO, EMPCODE, EMPNAME, QUALIFICATION, REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ, ISNULL(CAST(DOL AS VARCHAR), '') DOL, CAST(EMPTYPE AS VARCHAR) EMPTYPE, 
			CAST(EMPSTATUS AS VARCHAR) EMPSTATUS, GRADE
			FROM DT_MANPOWER_ACTIVE
			WHERE AadharNo=@AADHARNO
		END
		ELSE BEGIN
			SELECT TOP 1 AADHARNO, EMPCODE, EMPNAME, QUALIFICATION, REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ, REPLACE(CONVERT(NVARCHAR, DOL, 106), ' ', '-') DOL, CAST(EMPTYPE AS VARCHAR) EMPTYPE, 
			CAST(EMPSTATUS AS VARCHAR) EMPSTATUS, GRADE
			FROM DT_MANPOWER_INACTIVE
			WHERE AadharNo=@AADHARNO
			ORDER BY TDate DESC

			SELECT TOP 1  @L_PARAM1 = DOL FROM DT_MANPOWER_INACTIVE WHERE AadharNo=@AADHARNO ORDER BY TDate DESC
			SELECT @L_PARAM1 = IIF(@L_PARAM1<DATEADD(day, -30, GETDATE()), '30DaysPlus', '30DaysMinus')
			IF(@L_PARAM1 = '30DaysPlus') BEGIN
				UPDATE DT_SKILL_MATRIX set SkillNotConsider=1, UDate=GETDATE(), UpdatedBy='System' 
				WHERE AadharNo=@AadharNo
			END
		END
    END
	IF(@Activity='GetManPowerSkills')BEGIN
		SELECT AadharNo,EmpCode,EmpName,StationName Station,Grade,REPLACE(CONVERT(NVARCHAR, CertificationDate, 106), ' ', '-') CertificationDate,REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ,
		ISNULL((Select REPLACE(CONVERT(NVARCHAR, DOL, 106), ' ', '-') from DT_MANPOWER_INACTIVE where EmpCode=SM.EmpCode and AadharNo=@AadharNo),'') DOL,CAST(SkillNotConsider as varchar) Param1
		FROM DT_SKILL_MATRIX SM
		WHERE AadharNo=@AadharNo
		ORDER BY TDate Desc
    END	
    IF(@Activity='UpdateManPowerByANo')BEGIN
        IF(@EMPSTATUS='1')BEGIN
            UPDATE DT_MANPOWER_ACTIVE
            SET EMPNAME=@EMPNAME, QUALIFICATION=@QUALIFICATION, DOJ=@DOJ, EMPSTATUS=@EMPSTATUS, DOL=@DOL, EMPTYPE=@EMPTYPE, UPDATEDBY=@ADID, UDATE=GETDATE()
            WHERE AADHARNO=@AADHARNO
            SELECT '' RETVAL, '1' FLAG, 'Record updated successfully' AS MSG
        END
        ELSE BEGIN
            INSERT INTO DT_MANPOWER_INACTIVE(AADHARNO, EMPCODE, EMPNAME, QUALIFICATION, DOJ, DOL, EMPTYPE, EMPSTATUS, GRADE, REASON, CREATEDBY, TDATE)
            VALUES(@AADHARNO, @EMPCODE, @EMPNAME, @QUALIFICATION, @DOJ, @DOL, @EMPTYPE, @EMPSTATUS, @Grade, @Reason, @ADID, GETDATE())
            DELETE FROM DT_MANPOWER_ACTIVE WHERE AADHARNO=@AADHARNO
            SELECT '' RETVAL, '1' FLAG, 'Record updated successfully' AS MSG
        END
    END
	IF(@Activity='GetQuestion')BEGIN
        SELECT ID, DBO.FN_CODEDEF(54, STATION) STATION, DBO.FN_CODEDEF_VAL(55, GRADE) GRADE, QUE, OPTION1, OPTION2, OPTION3, OPTION4,ANS,
		CASE WHEN ANS='A' THEN '(A) '+OPTION1 WHEN ANS = 'B' THEN '(B) '+OPTION2 WHEN ANS = 'C' THEN '(C) '+OPTION3 WHEN ANS = 'D' THEN '(D) '+OPTION4 ELSE '' END ANSTEXT  
        FROM DT_QUESTIONS
        WHERE GRADE=@GRADE AND STATION=@STATION
        ORDER BY TDATE
    END
    IF(@Activity='SaveQuestion')BEGIN
        if(@Action='A')BEGIN
            INSERT INTO DT_QUESTIONS(Station, Grade, Que, Option1, Option2, Option3, Option4, Ans, CreatedBy, TDate)
            VALUES(@Station, @Grade, @Que, @Option1, @Option2, @Option3, @Option4, @Ans, @ADID, GETDATE())
            SELECT '' RETVAL, '1' FLAG, 'Record saved successfully' AS MSG
        END
        ELSE BEGIN
            UPDATE DT_QUESTIONS
            SET Que=@Que, Option1=@Option1, Option2=@Option2, Option3=@Option3, Option4=@Option4, Ans=@Ans, UpdatedBy=@ADID, UDate=GETDATE()
            WHERE Id=@Id
            SELECT '' RETVAL, '1' FLAG, 'Record updated successfully' AS MSG
        END
    END    
    IF(@Activity='DeleteQuestion')BEGIN
        DELETE FROM DT_QUESTIONS WHERE Id=@Id
        SELECT '' RETVAL, '1' FLAG, 'Record deleted successfully' AS MSG
    END
    IF(@Activity='GetQueById')BEGIN
        SELECT Id, CAST(Station as varchar) Station, Grade, Que, Option1, Option2, Option3, Option4, Ans
        FROM DT_QUESTIONS
        WHERE Id=@Id
    END
	IF(@Activity='GetOJTDoc')BEGIN
        SELECT Id, DBO.FN_CODEDEF(54, Station) Station, DBO.FN_CODEDEF_VAL(55, Grade) Grade, DocUId, REPLACE(CONVERT(NVARCHAR, TDate, 106), ' ', '-') Action, dbo.FN_EMPNAME(CreatedBy) EmpName
        FROM DT_OJT_MATERIAL
    END
    IF(@Activity='AddOJTDoc')BEGIN
        INSERT INTO DT_OJT_MATERIAL(Station, Grade, DocUId, TDate, CreatedBy)
        VALUES(@Station, @Grade, @DocUId, GETDATE(), @ADID)
        SELECT '' RETVAL, '1' FLAG, 'Record saved successfully' AS MSG
    END    
    IF(@Activity='DeleteOJTDoc')BEGIN
        SELECT TOP 1 @L_PARAM1=DocUId FROM DT_OJT_MATERIAL WHERE Id=@DocUId
        DELETE FROM DT_OJT_MATERIAL WHERE Id=@DocUId
        SELECT @L_PARAM1 RETVAL, '1' FLAG, 'Record deleted successfully' AS MSG
    END
	IF(@Activity='GetTrainerDDL')BEGIN
        SELECT TrainerCode AS CODE, TrainerCode+' - '+TrainerName AS NAME
        FROM DT_TRAINER
        ORDER BY TrainerName
    END
	IF(@Activity='GetActiveManPowerDDL')BEGIN
        SELECT DISTINCT EmpCode AS CODE, EmpCode+' - '+EmpName AS NAME
        FROM DT_MANPOWER_ACTIVE
        ORDER BY EmpCode
    END
	IF(@Activity='GetOJTAttendance')BEGIN
        SELECT ID, DBO.FN_CODEDEF(54, STATION) STATION, DBO.FN_CODEDEF_VAL(55, Grade) GRADE, REPLACE(CONVERT(NVARCHAR, TRAININGDATE, 106), ' ', '-') TRAININGDATE, TRAININGFOR, 
		DBO.FN_EMPNAME(TRAINER) TRAINER, EmpCodes, DOCUID
        FROM DT_OJT_ATTENDANCE
        WHERE Id=@Id or(@Id=0)
    END
	IF(@Activity='GetEmpOJTAttendance')BEGIN
		IF EXISTS(SELECT EmpName FROM DT_MANPOWER_ACTIVE WHERE EMPCODE=@EmpCode) BEGIN 
			SELECT  @L_PARAM1 = EmpName FROM DT_MANPOWER_ACTIVE WHERE EMPCODE=@EmpCode
		END
		ELSE BEGIN
			SELECT  @L_PARAM1 = EmpName FROM DT_MANPOWER_INACTIVE WHERE EMPCODE=@EmpCode
		END
		SELECT DBO.FN_CODEDEF(54, STATION) STATION, DBO.FN_CODEDEF_VAL(55, Grade) GRADE, REPLACE(CONVERT(NVARCHAR, TRAININGDATE, 106), ' ', '-') TRAININGDATE, DBO.FN_EMPNAME(TRAINER) TRAINER, 
		@L_PARAM1 EmpName
		FROM DT_OJT_ATTENDANCE
		WHERE EmpCodes Like '%'+@EmpCode+'%'
    END
	IF(@Activity='GetManPower')BEGIN
        SELECT AADHARNO, EMPCODE, EMPNAME, QUALIFICATION, REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ, ISNULL(CAST(DOL AS VARCHAR), '') DOL, DBO.FN_CODEDEF(51, EMPTYPE) EMPTYPE, DBO.FN_CODEDEF(53, EMPSTATUS) EMPSTATUS, GRADE
        FROM DT_MANPOWER_ACTIVE
        WHERE EmpCode IN(SELECT ITEM FROM NVTI.DBO.FN_SPLITSTRING(@EmpCodes, ',') )
        UNION
        SELECT AADHARNO, EMPCODE, EMPNAME, QUALIFICATION, REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ, ISNULL(CAST(DOL AS VARCHAR), '') DOL, DBO.FN_CODEDEF(51, EMPTYPE) EMPTYPE, DBO.FN_CODEDEF(53, EMPSTATUS) EMPSTATUS, GRADE
        FROM DT_MANPOWER_INACTIVE
        WHERE EmpCode IN(SELECT ITEM FROM NVTI.DBO.FN_SPLITSTRING(@EmpCodes, ',') )
    END		
	IF(@Activity='AddOJTAttendance')BEGIN
        INSERT INTO DT_OJT_Attendance(Station, Grade, TrainingDate, TrainingFor, Trainer, EmpCodes, DocUId, TDate, CreatedBy)
        VALUES(@Station, @Grade, @TrainingDate, @TrainingFor, @Trainer, @EmpCodes, @DocUId, GETDATE(), @ADID)
        SELECT '' RETVAL, '1' FLAG, 'Record saved successfully' AS MSG
    END
	IF(@Activity='DeleteOJTAttendance')BEGIN
        SELECT TOP 1 @L_PARAM1=DocUId FROM DT_OJT_ATTENDANCE WHERE Id=@Id
        DELETE FROM DT_OJT_ATTENDANCE WHERE Id=@Id
        SELECT @L_PARAM1 RETVAL, '1' FLAG, 'Record deleted successfully' AS MSG
    END
	IF(@Activity='GetAllManpower')BEGIN
        SELECT EMPCODE AS CODE, EmpCode+' ('+DBO.FN_CODEDEF(53, EMPSTATUS)+')' + ' - ' + EmpName + ' (' + AadharNo+')' AS NAME  FROM DT_MANPOWER_ACTIVE
		UNION ALL
		SELECT EMPCODE AS CODE, EmpCode+' ('+DBO.FN_CODEDEF(53, EMPSTATUS)+')' + ' - ' + EmpName + ' (' + AadharNo+')' AS NAME  FROM DT_MANPOWER_INACTIVE
    END
	IF(@Activity='GetApprover')BEGIN
        SELECT Id, CustomerName, 
		(SELECT EMPNAME+' ('+DEPTNAME+')' FROM MST_EMPLOYEE WHERE EMPCODE=PrimaryApprover) PrimaryApprover,
		(SELECT EMPNAME+' ('+DEPTNAME+')' FROM MST_EMPLOYEE WHERE EMPCODE=Approver1) Approver1, 
		(SELECT EMPNAME+' ('+DEPTNAME+')' FROM MST_EMPLOYEE WHERE EMPCODE=Approver2) Approver2, 
		ISNULL((SELECT EMPNAME+' ('+DEPTNAME+')' FROM MST_EMPLOYEE WHERE EMPCODE=Approver3), '') Approver3, 
		ISNULL((SELECT EMPNAME+' ('+DEPTNAME+')' FROM MST_EMPLOYEE WHERE EMPCODE=Approver4), '') Approver4, 
		ISNULL((SELECT EMPNAME+' ('+DEPTNAME+')' FROM MST_EMPLOYEE WHERE EMPCODE=Approver5), '') Approver5, 
		ISNULL((SELECT EMPNAME+' ('+DEPTNAME+')' FROM MST_EMPLOYEE WHERE EMPCODE=Approver6), '') Approver6, 
		REPLACE(CONVERT(NVARCHAR, TDate, 106), ' ', '-') Action, dbo.FN_EMPNAME(CreatedBy) EmpName
        FROM DT_CUSTOMER_APPROVER ORDER BY CustomerName
    END
	IF(@Activity='AddApprover')BEGIN
        INSERT INTO DT_CUSTOMER_APPROVER(CustomerName,PrimaryApprover, Approver1, Approver2, Approver3, Approver4, Approver5, Approver6, TDate, CreatedBy)
        VALUES(@CustomerName,@PrimaryApprover, @Approver1, @Approver2, @Approver3, @Approver4, @Approver5, @Approver6, GETDATE(), @ADID)
        SELECT '' RETVAL, '1' FLAG, 'Record saved successfully' AS MSG
    END
	IF(@Activity='UpdateApprover')BEGIN
        UPDATE DT_CUSTOMER_APPROVER
        SET CustomerName=@CustomerName,PrimaryApprover=@PrimaryApprover, Approver1=@Approver1, Approver2=@Approver2, Approver3=@Approver3, Approver4=@Approver4, Approver5=@Approver5, Approver6=@Approver6
        WHERE Id=@Id
        SELECT '' RETVAL, '1' FLAG, 'Record updated successfully' AS MSG
    END
	IF(@Activity='DeleteApprover')BEGIN
        DELETE FROM DT_CUSTOMER_APPROVER WHERE Id=@Id
        SELECT '' RETVAL, '1' FLAG, 'Record deleted successfully' AS MSG
    END
	IF(@Activity='GetApproverById')BEGIN
        SELECT Id, CustomerName, 
		Cast(PrimaryApprover as varchar) PrimaryApprover, 
		Cast(Approver1 as varchar) Approver1, 
		Cast(Approver2 as varchar) Approver2, 
		Cast(Approver3 as varchar) Approver3, 
		Cast(Approver4 as varchar) Approver4, 
		Cast(Approver5 as varchar) Approver5, 
		Cast(Approver6 as varchar) Approver6
        FROM DT_CUSTOMER_APPROVER
        WHERE Id=@Id
    END
	IF(@Activity='GetApproverDDL')BEGIN
        SELECT DISTINCT Id AS CODE, CustomerName AS NAME
        FROM DT_CUSTOMER_APPROVER
        ORDER BY CustomerName
    END
	IF(@Activity='AddSkillTest')BEGIN
        SELECT TOP 1 @L_PARAM1=AadharNo
        FROM DT_MANPOWER_ACTIVE
        WHERE EmpCode=@EmpCode
        INSERT INTO DT_TEST_RESULT(AadharNo, EmpCode, EmpName, TestDate,StationCode, StationName, Grade,CustomerId,CustomerName,TestScoreInPercent, TestScore, TestScoreOutof,TestStatus, Approver, CreatedBy, TDate)
        VALUES(@L_PARAM1, @EmpCode, @EmpName, GETDATE(),@Param1, @Param2, @Grade,@CustomerId,@CustomerName,ROUND(@TestScore * 100.0 / @TestScoreOutof, 1), @TestScore, @TestScoreOutof, 'Pending Viva', '', @ADID, GETDATE())
        SELECT @@IDENTITY RETVAL, '1' FLAG, 'Test summary saved successfully' AS MSG
    END
	IF(@Activity='AddSkillTestDtl')BEGIN
        SELECT TOP 1 @L_PARAM1=AadharNo FROM DT_TEST_RESULT WHERE Id=@Id
        INSERT INTO DT_TEST_RESULT_DTL(TestId, AadharNo, EmpCode, EmpName, Station, Grade, TestDate, CustomerName, Que, ActualAns, SelectedAns, IsAnsCorrect, CreatedBy, TDate)
        VALUES(@Id, @L_PARAM1, @EmpCode, @EmpName, @Param1, @Grade, GETDATE(), @CustomerName, @Que, @Ans, @SelectedAns, @IsAnsCorrect, @ADID, GETDATE())
		--Auto Status UPDATE fail if score percentage below 70%
		UPDATE DT_TEST_RESULT 
		SET TestStatus='Fail', Approver='This is system generated result', UDate=GETDATE(), UpdatedBy='System'
		WHERE TestScoreInPercent < 70 and Id=@Id
    END
    IF(@Activity='GetMPGrade')BEGIN
		SELECT TOP 1 @L_PARAM1=AadharNo FROM DT_MANPOWER_ACTIVE WHERE EmpCode=@EmpCode
		IF EXISTS(SELECT TOP 1 Id FROM DT_TEST_RESULT WHERE AadharNo=@L_PARAM1 AND STATIONCODE=@Station AND TESTSTATUS='Pending Viva' ORDER BY TDATE DESC)
		BEGIN
			SELECT Id, AADHARNO, EMPCODE, EMPNAME, '' DOJ, '' CERTIFICATIONDATE, CAST(StationCode AS VARCHAR) STATION, GRADE, 'Pending Viva' TestResult, CREATEDBY, TDATE, UPDATEDBY, UDATE
			FROM DT_TEST_RESULT --PRINT 'PENDING VIVA'
		END
		ELSE
		BEGIN
			SELECT TOP 1 ID, AADHARNO, EMPCODE, EMPNAME, REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ, REPLACE(CONVERT(NVARCHAR, CERTIFICATIONDATE, 106), ' ', '-') CERTIFICATIONDATE,
			CAST(STATION AS VARCHAR) STATION, GRADE, (SELECT T1.TestStatus FROM DT_TEST_RESULT T1 WHERE T1.Id=T2.Id) TestResult, CREATEDBY, TDATE, UPDATEDBY, UDATE
			FROM DT_SKILL_MATRIX T2
			WHERE AadharNo=@L_PARAM1 AND STATION=@Station AND SkillNotConsider=0
			ORDER BY TDATE DESC
		END
    END
    IF(@Activity='GetPendingViva')BEGIN
		SELECT Id, AadharNo, EmpCode, EmpName, REPLACE(CONVERT(NVARCHAR, TestDate, 106), ' ', '-') TestDate, StationName Station, Grade, CAST(TestScoreInPercent AS VARCHAR) Param1, TestScore, 
		TestScoreOutof, TestStatus TestResult,Approver, dbo.FN_EMPNAME(CreatedBy) TestConductedByEmpName
		FROM DT_TEST_RESULT
		WHERE TestStatus='Pending Viva' AND CustomerId IN 
		(
			SELECT ID FROM DT_CUSTOMER_APPROVER 
			WHERE PrimaryApprover =@EmpCode OR Approver1 =@EmpCode OR Approver2 =@EmpCode OR Approver3 =@EmpCode OR Approver4 =@EmpCode OR Approver5 =@EmpCode OR Approver6 =@EmpCode
		)
		ORDER BY TDate DESC
    END
	IF(@Activity='GetAllTestResults')BEGIN
        SELECT Id, AadharNo, EmpCode, EmpName, REPLACE(CONVERT(NVARCHAR, TestDate, 106), ' ', '-') TestDate, StationName Station, Grade, CAST(TestScoreInPercent AS VARCHAR) Param1, TestScore,
		TestScoreOutof, TestStatus TestResult,Approver, dbo.FN_EMPNAME(CreatedBy) TestConductedByEmpName
		FROM DT_TEST_RESULT	
		WHERE TestStatus='Pass' OR TestStatus='Fail'
		ORDER BY TDate DESC
    END
    IF(@Activity='GetAllPassTest')BEGIN
        SELECT Id, AadharNo, EmpCode, EmpName, REPLACE(CONVERT(NVARCHAR, TestDate, 106), ' ', '-') TestDate, StationName Station, Grade, CAST(TestScoreInPercent AS VARCHAR) Param1, TestScore,
		TestScoreOutof, TestStatus TestResult,Approver, dbo.FN_EMPNAME(CreatedBy) TestConductedByEmpName
		FROM DT_TEST_RESULT
		WHERE TestStatus='Pass'
		ORDER BY TDate DESC
    END
	IF(@Activity='GetAllFailTest')BEGIN
        SELECT Id, AadharNo, EmpCode, EmpName, REPLACE(CONVERT(NVARCHAR, TestDate, 106), ' ', '-') TestDate, StationName Station, Grade, CAST(TestScoreInPercent AS VARCHAR) Param1, TestScore,
		TestScoreOutof, TestStatus TestResult,Approver, dbo.FN_EMPNAME(CreatedBy) TestConductedByEmpName
		FROM DT_TEST_RESULT
		WHERE TestStatus='Fail'
		ORDER BY TDate DESC
    END
    IF(@Activity='GetTestResultById')BEGIN
        SELECT Id, EmpName, StationName Station, Grade, CAST(TestScoreInPercent AS VARCHAR) Param1, TestScore, TestScoreOutof, TestStatus TestResult,Approver Approver1, dbo.FN_EMPNAME(CreatedBy) TestConductedByEmpName
		FROM DT_TEST_RESULT
		WHERE Id=@Id
    END
    IF(@Activity='GetTestResultDtlById')BEGIN
        SELECT Que, SelectedAns SelectedAnsName,ActualAns AnsText,CAST(IsAnsCorrect as int) IsAnsCorrect
		FROM DT_TEST_RESULT_DTL
		WHERE TestId=@Id
    END
    IF(@Activity='UpdateTestStatus')BEGIN
	 --if you change here, also change into AgentJobs
		UPDATE DT_TEST_RESULT
		SET TestStatus=@Param1, Approver=@Param2, UpdatedBy=@ADID, UDate=GETDATE()
		WHERE Id=@Id
		IF(@PARAM1='Pass')BEGIN
			DECLARE @L_PARAM2 VARCHAR(max) --empcode
			DECLARE @L_PARAM3 VARCHAR(max) --empname
			DECLARE @L_PARAM4 VARCHAR(max) --station code
			DECLARE @L_PARAM5 VARCHAR(max) --grade
			DECLARE @L_PARAM6 VARCHAR(max) --doj
			DECLARE @L_PARAM7 VARCHAR(max) --station name
			DECLARE @L_PARAM8 VARCHAR(max) --max grade
			SELECT TOP 1 @L_PARAM1=AadharNo, @L_PARAM2=EmpCode, @L_PARAM3=EmpName, @L_PARAM4=StationCode, @L_PARAM7=StationName, @L_PARAM5=Grade
			FROM DT_TEST_RESULT
			WHERE Id=@Id
			SELECT TOP 1 @L_PARAM6=DOJ, @L_PARAM8=Grade
			FROM DT_MANPOWER_ACTIVE
			WHERE EmpCode=@L_PARAM2 and AadharNo=@L_PARAM1
			INSERT INTO DT_SKILL_MATRIX(Id, AadharNo, EmpCode, EmpName, DOJ, CertificationDate, Station, StationName, Grade, CreatedBy, TDate)
			VALUES(@Id, @L_PARAM1, @L_PARAM2, @L_PARAM3, @L_PARAM6, GETDATE(), @L_PARAM4, @L_PARAM7, @L_PARAM5, @ADID, GETDATE())
			IF(@L_PARAM8='D')BEGIN
				UPDATE DT_MANPOWER_ACTIVE
				SET Grade='C'
				WHERE EmpCode=@L_PARAM2 and AadharNo=@L_PARAM1
			END
			ELSE IF(@L_PARAM8='C' and @L_PARAM5='B')BEGIN
						UPDATE DT_MANPOWER_ACTIVE
						SET Grade='B'
						WHERE EmpCode=@L_PARAM2 and AadharNo=@L_PARAM1
			END
			ELSE IF(@L_PARAM8='B' and @L_PARAM5='A')BEGIN
						UPDATE DT_MANPOWER_ACTIVE
						SET Grade='A'
						WHERE EmpCode=@L_PARAM2 and AadharNo=@L_PARAM1
			END
		END
		SELECT '' RETVAL, '1' FLAG, 'Record saved successfully' AS MSG
		--if you change here, also change into AgentJobs
		END
	IF(@Activity='GetTestDueDateGradeC')BEGIN
		SELECT REPLACE(CONVERT(NVARCHAR, DATEADD(DD,3,DOJ), 106), ' ', '-') Param1,CAST(DATEDIFF(DAY, DATEADD(DD,3,DOJ), GETDATE()) AS VARCHAR) Param2, 
		AadharNo,EmpCode,EmpName,REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ,Grade
		FROM DT_MANPOWER_ACTIVE T1 
		WHERE T1.EmpCode NOT IN (SELECT EMPCODE FROM DT_SKILL_MATRIX WHERE EmpCode=T1.EmpCode)
		AND DATEDIFF(DAY,DOJ, GETDATE()) >= 3
		AND Grade='D'
    END
	IF(@Activity='GetTestDueDateGradeB')BEGIN
		SELECT AadharNo,EmpName,StationName Station,GRADE,REPLACE(CONVERT(NVARCHAR, CertificationDate, 106), ' ', '-') CertificationDate,
		CAST(DATEDIFF(DAY, DATEADD(DD,5,CertificationDate), GETDATE()) AS VARCHAR) Param2 FROM DT_SKILL_MATRIX A
		WHERE GRADE='C' AND SkillNotConsider=0 AND DATEDIFF(DAY,CertificationDate, GETDATE()) >= 5
		AND CertificationDate IN (SELECT MAX(CertificationDate) FROM DT_SKILL_MATRIX B WHERE A.AadharNo=B.AadharNo AND A.EmpName=B.EmpName AND A.StationName=B.StationName )
		GROUP BY AadharNo,EmpName,StationName, GRADE, CertificationDate	
    END
	IF(@Activity='GetTestDueDateGradeA')BEGIN
		SELECT AadharNo,EmpName,StationName Station,GRADE,REPLACE(CONVERT(NVARCHAR, CertificationDate, 106), ' ', '-') CertificationDate,
		CAST(DATEDIFF(DAY, DATEADD(DD,180,CertificationDate), GETDATE()) AS VARCHAR) Param2 FROM DT_SKILL_MATRIX A
		WHERE GRADE='B' AND SkillNotConsider=0 AND DATEDIFF(DAY,CertificationDate, GETDATE()) >= 180
		AND CertificationDate IN (SELECT MAX(CertificationDate) FROM DT_SKILL_MATRIX B WHERE A.AadharNo=B.AadharNo AND A.EmpName=B.EmpName AND A.StationName=B.StationName )
		GROUP BY AadharNo,EmpName,StationName,GRADE,CertificationDate		
    END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_EIS]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_EIS]
(
    @ACTIVITY		VARCHAR(200) = '',
    @PLANT			VARCHAR(20) = NULL,
    @DIVISION		VARCHAR(20) = NULL,
	@FROM_YR			INT=0,
	@FROM_MON			INT=0,
	@TO_YR				INT=0,
	@TO_MON				INT=0,
    @DATE1			VARCHAR(30) = NULL,
    @DATE2			VARCHAR(30) = NULL,
    @PARAM1			VARCHAR(100) = '',
    @PARAM2			VARCHAR(100) = ''
)
AS
BEGIN
    DECLARE @L_CNT INT = 0;

	---------------------- FOR EIS DASHBOARD ----------------------

    IF (@ACTIVITY = 'GET_TOTAL_SHIPMENT')		--TODAY TOTAL SHIPPED QTY & AMOUNT      
    BEGIN
        SELECT CAST(ROUND(CAST(SUM(TOTAL_QTY) / 1000 AS FLOAT), 3) AS VARCHAR) + ' K' AS TOTAL_QTY, CAST(ROUND(CAST(SUM(TOTAL_AMT) / 1000000 AS FLOAT), 3) AS VARCHAR) + ' M' AS TOTAL_AMT
        FROM EIS_SHIPMENT
        WHERE PLANT = IIF(@PLANT='NVTI', PLANT, @PLANT) AND YEAR(DATA_DATE) = YEAR(GETDATE()) AND MONTH(DATA_DATE) = MONTH(GETDATE())
    END

    IF (@ACTIVITY = 'GET_TOTAL_INVENTORY')		--TOTAL INVENTORY AMOUNT      
    BEGIN
        SELECT CAST(ROUND(CAST(SUM(TOTAL_AMT) / 1000000 AS FLOAT), 3) AS VARCHAR) + ' M' AS TOTAL_AMT 
		FROM EIS_WAREHOUSE_INVENTORY
        WHERE PLANT = IIF(@PLANT='NVTI', PLANT, @PLANT) AND DATA_DATE = CONVERT(DATE, GETDATE());
    END

    ----------------------- GRAPH -----------------------

	IF (@ACTIVITY = 'GET_MATCODE')				--BIND DDL MODEL NAME      
    BEGIN
		SELECT DISTINCT B.MODEL_NAME AS CODE, B.MODEL_NAME AS NAME FROM EIS_SHIPMENT A INNER JOIN EIS_MODEL_NAME B ON A.ITEMID = B.ITEMID
		WHERE CONVERT(DATE, A.DATA_DATE) >= DATEADD(DAY, -30, GETDATE())
    END

    IF (@ACTIVITY = 'GET_SHIPMENT_DETAIL')		--GET SHIPMENT QUANTITY & AMOUNT (FROM SAP)     
    BEGIN
		SELECT RIGHT('0' + DAY(A.DATA_DATE), 2) + ' ' + CONVERT(CHAR(4), A.DATA_DATE, 100) AS DATADATE, SUM(A.TOTAL_QTY) AS QUANTITY, SUM(A.TOTAL_AMT) AS AMOUNT
		FROM EIS_SHIPMENT A LEFT JOIN EIS_MODEL_NAME B ON A.ITEMID = B.ITEMID
		WHERE A.PLANT = IIF(@PLANT='NVTI', A.PLANT, @PLANT) AND ISNULL(B.MODEL_NAME, 'OTHERS') = IIF(@PARAM1='0', ISNULL(B.MODEL_NAME, 'OTHERS'), @PARAM1)
		AND CONVERT(DATE, DATA_DATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)
		GROUP BY A.DATA_DATE;
    END

	IF (@ACTIVITY = 'GET_REVENUE_ALL_DATA')
	BEGIN
		SELECT MON, FORMAT(DATEADD(MONTH , MON, -1 ),'MMM') AS MONTHNAME, CATEGORY AS GROUPNAME, AMOUNT
		FROM EIS_REVENUE WHERE CONVERT(DATE, CAST(YR AS VARCHAR)+'-'+CAST(MON AS VARCHAR)+'-01') BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		ORDER BY 1
	END

	IF (@ACTIVITY = 'GET_REVENUE_DATA_BY_CATG')
	BEGIN
		SELECT MON, FORMAT(DATEADD(MONTH , MON, -1 ),'MMM') AS MONTHNAME, CATEGORY AS GROUPNAME, AMOUNT
		FROM EIS_REVENUE WHERE CATEGORY=@PARAM1
		AND CONVERT(DATE, CAST(YR AS VARCHAR)+'-'+CAST(MON AS VARCHAR)+'-01') BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		ORDER BY 1
	END

	IF (@ACTIVITY = 'GET_RFC_ALL_DATA')		--GET RFC ALL HEAD DATA   
    BEGIN
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME, GL_TYPE AS GROUPNAME, ABS(SUM(AMOUNT)) AS AMOUNT
		FROM EIS_RFC_DATA
		WHERE CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE, GL_TYPE
		ORDER BY 1

		--SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME, GL_TYPE AS GROUPNAME, 
		--ABS(SUM(AMOUNT)) - CASE WHEN A.GL_TYPE='SAL' THEN (SELECT ISNULL(SUM(AMOUNT), 0) FROM EIS_MANUAL_DATA B WHERE B.CATEGORY='GIT_AMT' AND YEAR(A.FROM_DATE)=B.YR AND MONTH(A.FROM_DATE)=B.MON) ELSE 0 END AS AMOUNT
		--FROM EIS_RFC_DATA A
		--WHERE CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		--GROUP BY FROM_DATE, GL_TYPE
		--ORDER BY 1
	END

	IF (@ACTIVITY = 'GET_RFC_DATA_BY_CATG')		--GET RFC DATA BY CATEGORY
    BEGIN
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME,  GL_TYPE AS GROUPNAME, ABS(SUM(AMOUNT)) AS AMOUNT
		FROM EIS_RFC_DATA WHERE GL_TYPE=@PARAM1 
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE, GL_TYPE
		ORDER BY 1

		--SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME,  GL_TYPE AS GROUPNAME, 
		--ABS(SUM(AMOUNT)) - CASE WHEN A.GL_TYPE='SAL' THEN (SELECT ISNULL(SUM(AMOUNT), 0) FROM EIS_MANUAL_DATA B WHERE B.CATEGORY='GIT_AMT' AND YEAR(A.FROM_DATE)=B.YR AND MONTH(A.FROM_DATE)=B.MON) ELSE 0 END AS AMOUNT
		--FROM EIS_RFC_DATA A WHERE GL_TYPE=@PARAM1 
		--AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		--GROUP BY FROM_DATE, GL_TYPE
		--ORDER BY 1
	END

	IF (@ACTIVITY = 'GET_OFR_DATA')		--GET OUTWARD FREIGHT DATA
    BEGIN
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME, ABS(SUM(AMOUNT)) AS AMOUNT
		FROM EIS_RFC_DATA WHERE GL_TYPE='SGA' AND GLCODE IN ('8012010000', '8014020000') AND COST_CENTER IN ('2500AB1041', '2500AM1041') 
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		ORDER BY 1
	END

	IF (@ACTIVITY = 'GET_PROFIT')		--GET PROFIT (GP, OP, NP)
    BEGIN
		SELECT MONVAL, MONTHNAME, (SALES - GP_COST) AS GPAMOUNT, (SALES - GP_COST - OP_COST) AS OPAMOUNT, (SALES - GP_COST - OP_COST - NP_COST) AS NPAMOUNT
		FROM (
		SELECT  MONVAL, MONTHNAME, SUM(SALES) AS SALES, SUM(GP_COST) AS GP_COST, SUM(OP_COST) AS OP_COST, SUM(NP_COST) AS NP_COST
		FROM (
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME,  ABS(SUM(AMOUNT)) AS SALES, 0 AS GP_COST, 0 AS OP_COST, 0 AS NP_COST
		FROM EIS_RFC_DATA WHERE GL_TYPE='SAL'
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		UNION
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME,  0, SUM(AMOUNT) AS GP_COST, 0, 0
		FROM EIS_RFC_DATA WHERE GL_TYPE IN ('MAT', 'DL', 'INF', 'DEP', 'MOH', 'SCR')
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		UNION
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME,  0, 0, SUM(AMOUNT) AS OP_COST, 0
		FROM EIS_RFC_DATA WHERE GL_TYPE IN ('SGA', 'LAB', 'RLY')
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		UNION
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME,  0, 0, 0, SUM(AMOUNT) AS NP_COST
		FROM EIS_RFC_DATA WHERE GL_TYPE IN ('FXC', 'OTC', 'OIC', 'TAX')
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		) AS T1
		GROUP BY T1.MONVAL, T1.MONTHNAME
		) AS T2
		ORDER BY 1
	END

	IF (@ACTIVITY = 'GET_PROFIT_PER_SALE')		--GET GP, OP, NP %AGE OF TOTAL SALE
    BEGIN
		SELECT MONVAL, MONTHNAME, (SALES-GP_COST)*100/SALES AS GPPER, (SALES-GP_COST-OP_COST)*100/SALES AS OPPER, (SALES-GP_COST-OP_COST-NP_COST)*100/SALES AS NPPER
		FROM (
		SELECT  MONVAL, MONTHNAME, SUM(SALES) AS SALES, SUM(GP_COST) AS GP_COST, SUM(OP_COST) AS OP_COST, SUM(NP_COST) AS NP_COST
		FROM (
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME,  ABS(SUM(AMOUNT)) AS SALES, 0 AS GP_COST, 0 AS OP_COST, 0 AS NP_COST
		FROM EIS_RFC_DATA WHERE GL_TYPE='SAL'
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		UNION
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME,  0, SUM(AMOUNT) AS GP_COST, 0, 0
		FROM EIS_RFC_DATA WHERE GL_TYPE IN ('MAT', 'DL', 'INF', 'DEP', 'MOH', 'SCR')
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		UNION
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME,  0, 0, SUM(AMOUNT) AS OP_COST, 0
		FROM EIS_RFC_DATA WHERE GL_TYPE IN ('SGA', 'LAB', 'RLY')
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		UNION
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME,  0, 0, 0, SUM(AMOUNT) AS NP_COST
		FROM EIS_RFC_DATA WHERE GL_TYPE IN ('FXC', 'OTC', 'OIC', 'TAX')
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		) AS T1
		GROUP BY T1.MONVAL, T1.MONTHNAME
		) AS T2
		ORDER BY 1
	END

	IF (@ACTIVITY = 'GET_PROFIT_PER_WITHOUT_CELL')		--GET GP, OP, NP %AGE WITHOUT CELL
    BEGIN
		SELECT MONVAL, MONTHNAME, (SALES-GP_COST)*100/PACK_REV_AMT AS GPPER, (SALES-GP_COST-OP_COST)*100/PACK_REV_AMT AS OPPER, (SALES-GP_COST-OP_COST-NP_COST)*100/PACK_REV_AMT AS NPPER
		FROM (
		SELECT  MONVAL, MONTHNAME, SUM(PACK_REV_AMT) AS PACK_REV_AMT, SUM(SALES) AS SALES, SUM(GP_COST) AS GP_COST, SUM(OP_COST) AS OP_COST, SUM(NP_COST) AS NP_COST
		FROM (
		SELECT MON AS MONVAL, FORMAT(DATEADD(MONTH , MON, -1 ),'MMM') AS MONTHNAME, AMOUNT AS PACK_REV_AMT, 0 AS SALES, 0 AS GP_COST, 0 AS OP_COST, 0 AS NP_COST
		FROM EIS_REVENUE WHERE CATEGORY='PACK_REVENUE'
		AND CONVERT(DATE, CAST(YR AS VARCHAR)+'-'+CAST(MON AS VARCHAR)+'-01') BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		UNION
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME, 0, ABS(SUM(AMOUNT)) AS SALES, 0 AS GP_COST, 0 AS OP_COST, 0 AS NP_COST
		FROM EIS_RFC_DATA WHERE GL_TYPE='SAL'
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		UNION
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME, 0, 0, SUM(AMOUNT) AS GP_COST, 0, 0
		FROM EIS_RFC_DATA WHERE GL_TYPE IN ('MAT', 'DL', 'INF', 'DEP', 'MOH', 'SCR')
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		UNION
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME, 0, 0, 0, SUM(AMOUNT) AS OP_COST, 0
		FROM EIS_RFC_DATA WHERE GL_TYPE IN ('SGA', 'LAB', 'RLY')
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		UNION
		SELECT MONTH(FROM_DATE) AS MONVAL, CONVERT(CHAR(4), FROM_DATE, 100) AS MONTHNAME, 0, 0, 0, 0, SUM(AMOUNT) AS NP_COST
		FROM EIS_RFC_DATA WHERE GL_TYPE IN ('FXC', 'OTC', 'OIC', 'TAX')
		AND CONVERT(DATE, FROM_DATE) BETWEEN CONVERT(DATE, CAST(@FROM_YR AS VARCHAR)+'-'+CAST(@FROM_MON AS VARCHAR)+'-01') AND EOMONTH(CAST(@TO_YR AS VARCHAR)+'-'+CAST(@TO_MON AS VARCHAR)+'-01')
		GROUP BY FROM_DATE
		) AS T1
		GROUP BY T1.MONVAL, T1.MONTHNAME HAVING SUM(PACK_REV_AMT)>0
		) AS T2  WHERE T2.GP_COST>0
		ORDER BY 1
	END

	IF (@ACTIVITY = 'GET_INV_DETAIL')			--GET INVENTORY QUANTITY & AMOUNT (FROM SAP)       
    BEGIN
        SELECT ISNULL(B.GROUP_NAME, 'OTHERS') AS GROUPNAME, SUM(A.TOTAL_QTY) AS QUANTITY, SUM(A.TOTAL_AMT) AS AMOUNT
        FROM EIS_WAREHOUSE_INVENTORY A
        LEFT JOIN EIS_MATERIAL_GROUP B ON RIGHT(TRIM(A.ITEMID), 12) = B.ITEMID
        WHERE A.PLANT = IIF(@PLANT='NVTI', A.PLANT, @PLANT) AND ISNULL(B.DIVISION, 'PACK') = @DIVISION
		AND CONVERT(DATE, A.DATA_DATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)
        GROUP BY ISNULL(B.GROUP_NAME, 'OTHERS')
        ORDER BY 1
    END

    IF (@ACTIVITY = 'GET_INV_FG')				--GET FG INVENTORY (FROM SAP)       
    BEGIN
        SELECT ISNULL(B.CUSTOMER_NAME, 'OTHERS') AS GROUPNAME, SUM(A.TOTAL_QTY) AS QUANTITY, SUM(A.TOTAL_AMT) AS AMOUNT
		FROM EIS_WAREHOUSE_INVENTORY A 
		LEFT JOIN EIS_MATERIAL_GROUP B ON RIGHT(TRIM(A.ITEMID), 12) = B.ITEMID
        WHERE B.GROUP_NAME = 'FG' AND A.PLANT = IIF(@PLANT='NVTI', A.PLANT, @PLANT) AND ISNULL(B.DIVISION, 'PACK') = @DIVISION 
		AND CONVERT(DATE, A.DATA_DATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)
        GROUP BY ISNULL(B.CUSTOMER_NAME, 'OTHERS')
        ORDER BY 1
    END

    IF (@ACTIVITY = 'GET_OQA_CONFIRM')			--GET OQA CONFIRMED (FROM MES)      
    BEGIN
        SELECT ISNULL(B.MODEL_NAME, 'OTHERS') AS GROUPNAME, SUM(TOTAL_QTY) AS QUANTITY
        FROM EIS_OQA_CONFIRM A LEFT JOIN EIS_MODEL_NAME B ON RIGHT(TRIM(A.ITEMID), 12) = B.ITEMID
        WHERE A.PLANT = IIF(@PLANT='NVTI', A.PLANT, @PLANT) AND CONVERT(DATE, A.DATA_DATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)
        GROUP BY ISNULL(B.MODEL_NAME, 'OTHERS')
        ORDER BY 1
    END

	IF (@ACTIVITY = 'GET_UPH')					--GET UPH (FROM BIS)      
    BEGIN
  --      SELECT CAST(DATENAME(MONTH, DATEADD(MONTH, A.MON, '2020-12-01')) AS CHAR(3)) AS MON, dbo.FN_CODEDEF_VAL(5, B.LINE_TYPE) AS LINETYPE, 
		--CAST(A.PLAN_UPH AS DECIMAL) AS PLANNED, ROUND(SUM(B.ACTUAL_PACKING) / (CAST(SUM(B.AVLBL_TIME_MINTS) AS FLOAT) / 60), 2) AS ACTUAL
  --      FROM EIS_UPH_TARGET A
		--INNER JOIN EIS_UPH_ACTUAL B ON A.PLANT = B.PLANT AND A.DIVISION = B.DIVISION AND A.LINE_TYPE = B.LINE_TYPE AND A.MON = MONTH(B.DATA_DATE) AND A.YR = YEAR(B.DATA_DATE)
  --      WHERE B.PLANT = IIF(@PLANT='NVTI', B.PLANT, @PLANT) AND B.DIVISION = @DIVISION
		--AND B.LINE_TYPE = IIF(@PARAM1 = '0', B.LINE_TYPE, @PARAM1) AND CONVERT(DATE, B.DATA_DATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)
  --      GROUP BY A.MON, CAST(DATENAME(MONTH, DATEADD(MONTH, A.MON, '2020-12-01')) AS CHAR(3)), dbo.FN_CODEDEF_VAL(5, B.LINE_TYPE), A.PLAN_UPH
  --      ORDER BY A.MON
		SELECT CAST(DATENAME(MONTH, DATEADD(MONTH, A.MON, '2020-12-01')) AS CHAR(3)) AS MONTHNAME, dbo.FN_CODEDEF_VAL(5, B.LINE_TYPE) AS LINETYPE, 
		CAST(A.CHALLENGE AS DECIMAL) AS PLANNED, ROUND(SUM(B.TOTAL_PACKING) / (CAST(SUM(B.AVLBL_TIME_MINTS) AS FLOAT) / 60), 2) AS ACTUAL
        FROM EIS_UPH_TARGET A
		INNER JOIN EIS_UPH_ACTUAL B ON A.PLANT = B.PLANT AND A.DIVISION = B.DIVISION AND A.LINETYPE = B.LINE_TYPE AND A.MON = MONTH(B.DATA_DATE) AND A.YR = YEAR(B.DATA_DATE)
        WHERE B.PLANT = IIF(@PLANT='NVTI', B.PLANT, @PLANT) AND B.DIVISION = @DIVISION
		AND B.LINE_TYPE = IIF(@PARAM1 = '0', B.LINE_TYPE, @PARAM1) AND CONVERT(DATE, B.DATA_DATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)
        GROUP BY A.MON, CAST(DATENAME(MONTH, DATEADD(MONTH, A.MON, '2020-12-01')) AS CHAR(3)), dbo.FN_CODEDEF_VAL(5, B.LINE_TYPE), A.CHALLENGE
        ORDER BY A.MON
    END

    IF (@ACTIVITY = 'GET_UPPH')					--GET UPPH (FROM BIS)      
    BEGIN
  --      SELECT CAST(DATENAME(MONTH, DATEADD(MONTH, A.MON, '2020-12-01')) AS CHAR(3)) AS MON, dbo.FN_CODEDEF_VAL(5, B.LINE_TYPE) AS LINETYPE, B.CUSTOMER,A.PLAN_UPPH AS PLANNED,
		--ROUND(SUM(B.ACTUAL_PACKING) / (CAST((SUM(B.AVLBL_TIME_MINTS)) * (AVG(ACTUAL_HC)) AS FLOAT) / 60), 2) AS ACTUAL
  --      FROM EIS_UPPH_TARGET A
		--INNER JOIN EIS_UPPH_ACTUAL B ON A.PLANT = B.PLANT AND A.DIVISION = B.DIVISION AND A.CUSTOMER = B.CUSTOMER AND A.LINE_TYPE = B.LINE_TYPE AND A.MON = MONTH(B.DATA_DATE) AND A.YR = YEAR(B.DATA_DATE)
  --      WHERE B.PLANT = IIF(@PLANT='NVTI', B.PLANT, @PLANT) AND B.DIVISION = @DIVISION
		--AND B.LINE_TYPE = IIF(@PARAM1 = '0', B.LINE_TYPE, @PARAM1) AND B.CUSTOMER = IIF(@PARAM2 = '0', B.CUSTOMER, dbo.FN_CODEDEF(6, @PARAM2)) 
		--AND CONVERT(DATE, B.DATA_DATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)
  --      GROUP BY A.MON, CAST(DATENAME(MONTH, DATEADD(MONTH, A.MON, '2020-12-01')) AS CHAR(3)), A.PLAN_UPPH, B.CUSTOMER, dbo.FN_CODEDEF_VAL(5, B.LINE_TYPE)
  --      ORDER BY A.MON

		SELECT CAST(DATENAME(MONTH, DATEADD(MONTH, A.MON, '2020-12-01')) AS CHAR(3)) AS MONTHNAME, dbo.FN_CODEDEF_VAL(5, B.LINE_TYPE) AS LINETYPE, B.CUSTOMER, A.CHALLENGE AS PLANNED,
		ROUND(SUM(B.ACTUAL_PACKING) / (CAST((SUM(B.AVLBL_TIME_MINTS)) * (AVG(ACTUAL_HC)) AS FLOAT) / 60), 2) AS ACTUAL
        FROM EIS_UPPH_TARGET A
		INNER JOIN EIS_UPPH_ACTUAL B ON A.PLANT = B.PLANT AND A.DIVISION = B.DIVISION AND A.CUSTOMER = B.CUSTOMER AND A.LINETYPE = B.LINE_TYPE AND A.MON = MONTH(B.DATA_DATE) AND A.YR = YEAR(B.DATA_DATE)
        WHERE B.PLANT = IIF(@PLANT='NVTI', B.PLANT, @PLANT) AND B.DIVISION = @DIVISION
		AND B.LINE_TYPE = IIF(@PARAM1 = '0', B.LINE_TYPE, @PARAM1) AND B.CUSTOMER = IIF(@PARAM2 = '0', B.CUSTOMER, dbo.FN_CODEDEF(6, @PARAM2)) 
		AND CONVERT(DATE, B.DATA_DATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)
        GROUP BY A.MON, CAST(DATENAME(MONTH, DATEADD(MONTH, A.MON, '2020-12-01')) AS CHAR(3)), A.CHALLENGE, B.CUSTOMER, dbo.FN_CODEDEF_VAL(5, B.LINE_TYPE)
        ORDER BY A.MON
    END

	IF (@ACTIVITY = 'GET_AUTOLU')				--GET MOH (FROM BIS) 
    BEGIN
		--SELECT CAST(DATENAME(MONTH, DATEADD(MONTH, MON_VAL, '2021-12-01')) AS CHAR(3)) AS MON, 75.00 AS BOTTOM, 80.00 AS BASIC, 85.00 AS CHALLENGE, CAST(ROUND(CAST(SUM(G3_PACKING) AS FLOAT) / CAST(SUM(TOTAL_PACKING) AS FLOAT)*100, 2) AS FLOAT) AS ACTUAL
		--FROM (
		--SELECT MONTH(DATA_DATE) AS MON_VAL, SUM(PACKING) AS G3_PACKING, 0 AS TOTAL_PACKING
		--FROM EIS_PACKING WHERE PLANT=@PLANT AND DIVISION='PACK' AND LINE_TYPE IN ('G3', 'V3') AND MODEL_NAME NOT LIKE 'ZIM%' AND YEAR(DATA_DATE)=@PARAM1 AND MONTH(DATA_DATE)=@PARAM2
		--GROUP BY MONTH(DATA_DATE)
		--UNION
		--SELECT MONTH(DATA_DATE) AS MON_VAL, 0 AS G3_PACKING, SUM(PACKING) AS TOTAL_PACKING 
		--FROM EIS_PACKING WHERE PLANT=@PLANT AND DIVISION='PACK' AND YEAR(DATA_DATE)=@PARAM1 AND MONTH(DATA_DATE)=@PARAM2
		--GROUP BY MONTH(DATA_DATE)
		--) AS T1
		--GROUP BY MON_VAL
		--ORDER BY MON_VAL

		SELECT CAST(DATENAME(MONTH, DATEADD(MONTH, MON_VAL, '2021-12-01')) AS CHAR(3)) AS MONTHNAME, D.BOTTOM, D.BASIC, D.CHALLENGE, CAST(ROUND(CAST(SUM(G3_PACKING) AS FLOAT) / CAST(SUM(TOTAL_PACKING) AS FLOAT)*100, 2) AS FLOAT) AS ACTUAL
		FROM (
		SELECT PLANT, MONTH(DATA_DATE) AS MON_VAL, SUM(PACKING) AS G3_PACKING, 0 AS TOTAL_PACKING
		FROM EIS_PACKING WHERE PLANT=@PLANT AND DIVISION='PACK' AND LINE_TYPE IN ('G3', 'V3') AND MODEL_NAME NOT LIKE 'ZIM%' AND YEAR(DATA_DATE)=@PARAM1 AND MONTH(DATA_DATE)=@PARAM2
		GROUP BY PLANT, DATA_DATE, MONTH(DATA_DATE)
		UNION
		SELECT PLANT, MONTH(DATA_DATE) AS MON_VAL, 0 AS G3_PACKING, SUM(PACKING) AS TOTAL_PACKING 
		FROM EIS_PACKING WHERE PLANT=@PLANT AND DIVISION='PACK' AND YEAR(DATA_DATE)=@PARAM1 AND MONTH(DATA_DATE)=@PARAM2
		GROUP BY PLANT, DATA_DATE, MONTH(DATA_DATE)
		) AS T1
		INNER JOIN EIS_TARGETS D ON D.SYS_NAME='AUTOLU' AND D.PLANT = T1.PLANT AND D.YR = @PARAM1 AND D.MON = @PARAM2
		GROUP BY T1.PLANT, MON_VAL, D.BOTTOM, D.BASIC, D.CHALLENGE
		ORDER BY MON_VAL
    END


	--IF (@ACTIVITY = 'GET_DL')					--GET DL (FROM BIS)      
	--   BEGIN
	--	IF(@PLANT = 'NVTI')
	--	BEGIN
	--		SELECT RIGHT('0' + DAY(T2.DATA_DATE), 2) + ' ' + CONVERT(CHAR(4), T2.DATA_DATE, 100) AS MON, ISNULL(D.BOTTOM, 0) AS BOTTOM, ISNULL(D.BASIC, 0) AS BASIC, ISNULL(D.CHALLENGE, 0) AS CHALLENGE, 
	--		CAST(ROUND((SUM(C.COST_PACK) + SUM(C.COST_SMT))/VAL, 2) AS FLOAT) AS ACTUAL
	--		FROM (
	--		SELECT PLANT, DIVISION, DATA_DATE, SUM(VAL) AS VAL
	--		FROM (
	--		SELECT A.PLANT, A.DIVISION, A.DATA_DATE, A.MODEL_NAME, B.STD_TIME, (SUM(A.PACKING) * B.STD_TIME)/133.51 AS VAL
	--		FROM EIS_PACKING A
	--		INNER JOIN EIS_STANDARD_TIME B ON B.PLANT = A.PLANT AND B.DIVISION='PACK' AND B.MODEL_NAME = A.MODEL_NAME
	--		WHERE A.DIVISION = 'PACK' AND CONVERT(DATE, A.DATA_DATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)
	--		GROUP BY A.PLANT, A.DIVISION, A.DATA_DATE, A.MODEL_NAME, B.STD_TIME
	--		) AS T1
	--		GROUP BY T1.PLANT, T1.DIVISION, T1.DATA_DATE
	--		) AS T2
	--		INNER JOIN EIS_DL_COST C ON C.DATA_DATE = T2.DATA_DATE
	--		INNER JOIN EIS_TARGETS D ON D.SYS_NAME='DL' AND D.PLANT = 'NVTI' AND D.YR = YEAR(T2.DATA_DATE) AND D.MON = MONTH(T2.DATA_DATE)
	--		GROUP BY T2.DATA_DATE, T2.VAL, D.BOTTOM, D.BASIC, D.CHALLENGE
	--	END
	--	ELSE
	--	BEGIN
	--		SELECT RIGHT('0' + DAY(T2.DATA_DATE), 2) + ' ' + CONVERT(CHAR(4), T2.DATA_DATE, 100) AS MON, ISNULL(D.BOTTOM, 0) AS BOTTOM, ISNULL(D.BASIC, 0) AS BASIC, ISNULL(D.CHALLENGE, 0) AS CHALLENGE, 
	--		CAST(ROUND((CASE WHEN @DIVISION='PACK' THEN C.COST_PACK ELSE C.COST_SMT END)/VAL, 2) AS FLOAT) AS ACTUAL
	--		FROM (
	--		SELECT PLANT, DIVISION, DATA_DATE, SUM(VAL) AS VAL
	--		FROM (
	--		SELECT A.PLANT, A.DIVISION, A.DATA_DATE, A.MODEL_NAME, B.STD_TIME, (SUM(A.PACKING) * B.STD_TIME)/CASE WHEN @DIVISION='PACK' THEN 133.51 ELSE 25.64 END AS VAL
	--		FROM EIS_PACKING A
	--		INNER JOIN EIS_STANDARD_TIME B ON B.PLANT = A.PLANT AND B.DIVISION=A.DIVISION AND B.MODEL_NAME = A.MODEL_NAME
	--		WHERE A.PLANT = @PLANT AND A.DIVISION = @DIVISION
	--		AND CONVERT(DATE, A.DATA_DATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)
	--		GROUP BY A.PLANT, A.DIVISION, A.DATA_DATE, A.MODEL_NAME, B.STD_TIME
	--		) AS T1
	--		GROUP BY T1.PLANT, T1.DIVISION, T1.DATA_DATE
	--		) AS T2
	--		INNER JOIN EIS_DL_COST C ON C.PLANT = T2.PLANT AND C.DATA_DATE = T2.DATA_DATE
	--		INNER JOIN EIS_TARGETS D ON D.SYS_NAME='DL' AND D.PLANT = T2.PLANT AND D.DIVISION = T2.DIVISION AND D.YR = YEAR(T2.DATA_DATE) AND D.MON = MONTH(T2.DATA_DATE)
	--		GROUP BY T2.DATA_DATE, T2.VAL, D.BOTTOM, D.BASIC, D.CHALLENGE, C.COST_PACK, C.COST_SMT
	--	END
	--END


END
GO
/****** Object:  StoredProcedure [dbo].[usp_EIS_ADD]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[usp_EIS_ADD]
(
	@ACTIVITY							VARCHAR(100)='',
	@DOCNO								INT=0,
	@PLANT								VARCHAR(20)='',
	@DIVISION							VARCHAR(20)='',
	@YEAR                               INT=0,
	@MONTH								INT=0,
	@BOTTOM								VARCHAR(20)='',
	@BASIC								VARCHAR(20)='',
	@CHALLENGE							VARCHAR(20)='',

	@AMOUNT1                            DECIMAL(18,2)=0,
	@AMOUNT2                            DECIMAL(18,2)=0,

	@USERID                             VARCHAR(20)='',
	@DATE1								DATE=NULL,
	@DATE2								DATE=NULL,
	@PARAM1								VARCHAR(100)='',
	@PARAM2								VARCHAR(100)='',
	@PARAM3								VARCHAR(100)=''
)
AS
BEGIN
SET NOCOUNT ON;
DECLARE @L_NO INT

	--------------- MANAGE REVENUE ---------------

	IF(@ACTIVITY = 'ADD_REVENUE')
    BEGIN
        IF (@DOCNO > 0)  
        BEGIN
            UPDATE EIS_REVENUE SET AMOUNT=@AMOUNT1, TDATE=GETDATE(), USERID=@USERID 
			WHERE DOCNO=@DOCNO

            SELECT 2 AS FLAG
        END
        ELSE	
        BEGIN
            IF NOT EXISTS (SELECT * FROM EIS_REVENUE WHERE YR=@YEAR AND MON=@MONTH AND CATEGORY=@PARAM1 AND PLANT=@PLANT)	
            BEGIN     
				SELECT  @L_NO=ISNULL(MAX(DOCNO),0)+1 FROM  EIS_REVENUE
                INSERT INTO EIS_REVENUE (DOCNO, PLANT, YR, MON, CATEGORY, AMOUNT, USERID, TDATE)
									VALUES (@L_NO, @PLANT, @YEAR, @MONTH, @PARAM1, @AMOUNT1, @USERID, GETDATE())

                SELECT 1 AS FLAG 
            END
            ELSE        --IF RECORD EXISTS
            BEGIN
                SELECT 3 AS FLAG 
            END
        END
    END

    IF(@ACTIVITY = 'FILL_LIST_REVENUE_DATA')                               --GET ALL DATA
    BEGIN
        SELECT DOCNO, PLANT, YR, MON, FORMAT(DATEADD(MONTH , MON, -1 ),'MMM') AS MONTHNAME, CATEGORY, AMOUNT, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE 
		FROM EIS_REVENUE ORDER BY YR DESC, MON DESC
    END

    IF(@ACTIVITY = 'FILL_REVENUE_BY_DOCNO')                  --FILL DATA BY DOCNO
    BEGIN
        SELECT DOCNO, PLANT, YR, MON, CATEGORY, AMOUNT, USERID, TDATE  
		FROM EIS_REVENUE WHERE DOCNO=@DOCNO
    END

    --------------- MANAGE MANUAL ENTRY (GIT - GOODS IN TRANSIT) ---------------

    IF(@ACTIVITY = 'ADD_MANUAL_ENTRY')
    BEGIN
        IF (@DOCNO > 0)  
        BEGIN
            UPDATE EIS_RFC_DATA SET AMOUNT=@AMOUNT1, UDATE=GETDATE(), TDATE=GETDATE(), USERID=@USERID 
			WHERE TTYPE='MANUAL' AND YEAR(FROM_DATE)=@YEAR AND MONTH(FROM_DATE)=@MONTH AND PLANT_CODE=@PLANT AND GL_TYPE=@PARAM1

            SELECT 2 AS FLAG
        END
        ELSE	
        BEGIN
            IF NOT EXISTS (SELECT * FROM EIS_RFC_DATA WHERE TTYPE='MANUAL' AND YEAR(FROM_DATE)=@YEAR AND MONTH(FROM_DATE)=@MONTH AND PLANT_CODE=@PLANT AND GL_TYPE=@PARAM1)	
            BEGIN     
                INSERT INTO EIS_RFC_DATA (FROM_DATE,													TO_DATE,												PLANT_CODE, GL_TYPE,    DESCR,		  TTYPE,   AMOUNT,    UDATE,    USERID, TDATE)
				VALUES (CONVERT(DATE, CAST(@YEAR AS VARCHAR)+'-'+CAST(@MONTH AS VARCHAR)+'-01'), EOMONTH(CAST(@YEAR AS VARCHAR)+'-'+CAST(@MONTH AS VARCHAR)+'-01'), @PLANT, @PARAM1, 'Manual Entry', 'MANUAL', @AMOUNT1, GETDATE(), @USERID, GETDATE())

                SELECT 1 AS FLAG 
            END
            ELSE        --IF RECORD EXISTS
            BEGIN
                SELECT 3 AS FLAG 
            END
        END
    END

    IF(@ACTIVITY = 'FILL_LIST_MANUAL_ENTRY_DATA')                               --GET ALL DATA
    BEGIN
        SELECT PLANT_CODE AS PLANT, YEAR(FROM_DATE) AS YR, MONTH(FROM_DATE) AS MON, FORMAT(DATEADD(MONTH , MONTH(FROM_DATE), -1 ),'MMM') AS MONTHNAME, GL_TYPE AS PARAM1, dbo.FN_CODEDEF_VAL(70, GL_TYPE) AS CATEGORY, AMOUNT, ISNULL(USERID,'') AS USERID, ISNULL(CONVERT(VARCHAR, TDATE, 20),'') AS TDATE 
		FROM EIS_RFC_DATA WHERE TTYPE='MANUAL' ORDER BY FROM_DATE DESC
    END

    IF(@ACTIVITY = 'FILL_MANUAL_ENTRY_BY_DOCNO')                  --FILL DATA BY DOCNO
    BEGIN
        SELECT PLANT_CODE AS PLANT, YEAR(FROM_DATE) AS YR, MONTH(FROM_DATE) AS MON, GL_TYPE, AMOUNT, USERID, TDATE  
		FROM EIS_RFC_DATA WHERE TTYPE='MANUAL' AND YEAR(FROM_DATE)=@YEAR AND MONTH(FROM_DATE)=@MONTH AND PLANT_CODE=@PLANT AND GL_TYPE=@PARAM1
    END

    --------------- MANAGE DL COST ---------------

    IF(@ACTIVITY = 'ADD_DL_COST')
    BEGIN
        IF (@DOCNO > 0)
        BEGIN
            UPDATE EIS_DL_COST SET  COST_PACK=@AMOUNT1, COST_SMT=@AMOUNT2, TDATE=GETDATE(), USERID=@USERID 
			WHERE DOCNO=@DOCNO

            SELECT 2 AS FLAG
        END
        ELSE
        BEGIN
            IF NOT EXISTS (SELECT * FROM EIS_DL_COST WHERE PLANT=@PLANT AND DATA_DATE=@DATE1)	
            BEGIN     
				SELECT  @L_NO=ISNULL(MAX(DOCNO),0)+1 FROM  EIS_DL_COST
                INSERT INTO EIS_DL_COST (DOCNO, PLANT, DATA_DATE, COST_PACK, COST_SMT, USERID, TDATE)
									VALUES (@L_NO, @PLANT, @DATE1, @AMOUNT1, @AMOUNT2, @USERID, GETDATE())

                SELECT 1 AS FLAG 
            END
            ELSE        --IF RECORD EXISTS
            BEGIN
                SELECT 3 AS FLAG 
            END
        END
    END

    IF(@ACTIVITY = 'FILL_LIST_DL_COST')          --GET ALL DATA
    BEGIN
        SELECT DOCNO, PLANT, CAST(REPLACE(CONVERT(NVARCHAR, DATA_DATE, 106), ' ', '-') AS VARCHAR) AS DATE1, COST_PACK AS AMOUNT, 
		COST_SMT AS AMOUNT2, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE 
		FROM EIS_DL_COST ORDER BY DATA_DATE DESC
    END

    IF(@ACTIVITY = 'FILL_DLCOST_BY_DOCNO')                  --FILL DATA BY DOCNO
    BEGIN
        SELECT DOCNO, PLANT, CAST(REPLACE(CONVERT(NVARCHAR, DATA_DATE, 106), ' ', '-') AS VARCHAR) AS DATE1, COST_PACK AS AMOUNT, COST_SMT AS AMOUNT2, USERID, TDATE 
		FROM EIS_DL_COST WHERE DOCNO=@DOCNO
    END

    IF(@ACTIVITY = 'DELETE_DL_COST')       --DELETE DATA
    BEGIN
        DELETE FROM EIS_DL_COST WHERE DOCNO=@DOCNO
    END 

	-------------- UPH & UPPH TARGETS ---------------

	IF(@ACTIVITY = 'ADD_UPH_TARGET')
	BEGIN
		IF (@DOCNO > 0)		
		BEGIN
			UPDATE EIS_UPH_TARGET SET  BOTTOM=@BOTTOM, BASIC=@BASIC, CHALLENGE=@CHALLENGE, TDATE=GETDATE(), USERID=@USERID 
			WHERE DOCNO=@DOCNO
		END
		ELSE
		BEGIN
			IF NOT EXISTS (SELECT * FROM EIS_UPH_TARGET WHERE YR=@YEAR AND MON=@MONTH AND PLANT=@PLANT AND DIVISION=@DIVISION AND LINETYPE=@PARAM1)
			BEGIN	
				SELECT  @L_NO=ISNULL(MAX(DOCNO),0)+1 FROM  EIS_UPH_TARGET
				INSERT INTO EIS_UPH_TARGET(DOCNO, YR, MON, PLANT, DIVISION, LINETYPE, BOTTOM, BASIC, CHALLENGE, USERID, TDATE)
								VALUES (@L_NO, @YEAR, @MONTH, @PLANT, @DIVISION, @PARAM1, @BOTTOM, @BASIC, @CHALLENGE, @USERID, GETDATE())

				SELECT 1 AS FLAG 
			END
			ELSE		--IF RECORD EXISTS
			BEGIN
				SELECT 3 AS FLAG 
			END
		END
	END

	IF(@ACTIVITY = 'FILL_LIST_UPH_TARGET')		--GET ALL DATA
	BEGIN
		SELECT DOCNO, YR, MON, CAST(CONVERT(CHAR(3), DATEADD(MONTH, MON, '2020-12-01'), 0) AS VARCHAR) AS MONTHNAME, PLANT, DIVISION, LINETYPE, BOTTOM, BASIC, CHALLENGE, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE 
		FROM EIS_UPH_TARGET 
		ORDER BY YR DESC, MON DESC 
	END

	IF(@ACTIVITY = 'FILL_UPH_BY_DOCNO')		--FILL DATA BY DOCNO
	BEGIN
		SELECT DOCNO, YR, MON, PLANT, DIVISION, LINETYPE, BOTTOM, BASIC, CHALLENGE, USERID, TDATE  
		FROM EIS_UPH_TARGET WHERE DOCNO=@DOCNO
	END

	
    IF(@ACTIVITY = 'ADD_UPPH_TARGET')
	BEGIN
		IF (@DOCNO > 0)
		BEGIN
			UPDATE EIS_UPPH_TARGET SET BOTTOM=@BOTTOM, BASIC=@BASIC, CHALLENGE=@CHALLENGE, TDATE=GETDATE(), USERID=@USERID 
			WHERE DOCNO=@DOCNO
			SELECT 2 AS FLAG
		END
		ELSE
		BEGIN
			IF NOT EXISTS (SELECT * FROM EIS_UPPH_TARGET WHERE YR=@YEAR AND MON=@MONTH AND PLANT=@PLANT AND DIVISION=@DIVISION AND CUSTOMER=@PARAM1 AND LINETYPE=@PARAM2)
			BEGIN
				SELECT  @L_NO=ISNULL(MAX(DOCNO),0)+1 FROM  EIS_UPPH_TARGET
				INSERT INTO EIS_UPPH_TARGET(DOCNO, YR, MON, PLANT, DIVISION, CUSTOMER, LINETYPE, BOTTOM, BASIC, CHALLENGE, USERID, TDATE)
								VALUES (@L_NO, @YEAR, @MONTH, @PLANT, @DIVISION, @PARAM1, @PARAM2, @BOTTOM, @BASIC, @CHALLENGE, @USERID, GETDATE())

				SELECT 1 AS FLAG 
			END
			ELSE		--IF RECORD EXISTS
			BEGIN
				SELECT 3 AS FLAG 
			END
		END
	END

	IF(@ACTIVITY = 'FILL_LIST_UPPH_TARGET')		--GET ALL DATA
	BEGIN
		SELECT DOCNO, YR, MON, CAST(CONVERT(CHAR(3), DATEADD(MONTH, MON, '2020-12-01'), 0) AS VARCHAR) AS MONTHNAME, PLANT, DIVISION, CUSTOMER, LINETYPE, BOTTOM, BASIC, CHALLENGE, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE 
		FROM EIS_UPPH_TARGET
		ORDER BY YR DESC, MON DESC
	END

	IF(@ACTIVITY = 'FILL_UPPH_BY_DOCNO')		--FILL DATA BY DOCNO
	BEGIN
		SELECT DOCNO, YR, MON, PLANT, DIVISION, CUSTOMER, LINETYPE, BOTTOM, BASIC, CHALLENGE, USERID, TDATE 
		FROM EIS_UPPH_TARGET WHERE DOCNO=@DOCNO 
	END

	--------------- MANAGE TARGET ---------------

	IF (@ACTIVITY = 'ADD_TARGETS') 
	BEGIN
		IF (@DOCNO>0)
		BEGIN
			UPDATE EIS_TARGETS SET BOTTOM=@BOTTOM, BASIC=@BASIC, CHALLENGE=@CHALLENGE, TDATE=GETDATE(), USERID=@USERID 
			WHERE DOCNO=@DOCNO
			SELECT 2 AS FLAG
		END
		ELSE
		BEGIN
			IF NOT EXISTS(SELECT * FROM EIS_TARGETS WHERE SYS_NAME=@PARAM1 AND PLANT=@PLANT AND DIVISION=@DIVISION AND YR=@YEAR AND MON=@MONTH)
			BEGIN	 --INSERT TARGET
				SELECT  @L_NO=ISNULL(MAX(DOCNO),0)+1 FROM  EIS_TARGETS
				INSERT INTO EIS_TARGETS (DOCNO, SYS_NAME, PLANT, DIVISION, YR, MON, BOTTOM, BASIC, CHALLENGE, USERID, TDATE)
							VALUES (@L_NO, @PARAM1, @PLANT, @DIVISION, @YEAR, @MONTH, @BOTTOM, @BASIC, @CHALLENGE, @USERID, GETDATE())

				SELECT 1 AS FLAG
			END
			ELSE   --IF TARGET EXISTS
			BEGIN
				SELECT 3 AS FLAG
			END
		END		
	END

	IF (@ACTIVITY = 'FILL_LIST_TARGETS')		--GET ALL DATA
	BEGIN
		SELECT DOCNO, SYS_NAME AS CATEGORY, PLANT, DIVISION, YR, MON, CAST(CONVERT(CHAR(3), DATEADD(MONTH, MON, '2020-12-01'), 0) AS VARCHAR) AS MONTHNAME,
		BOTTOM, BASIC, CHALLENGE, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE 
		FROM EIS_TARGETS ORDER BY YR DESC, MON DESC, PLANT, DIVISION
	END

	IF (@ACTIVITY = 'FILL_TARGET_BY_DOCNO') --FILL TARGET BY DOC NO
	BEGIN
		SELECT DOCNO, SYS_NAME, PLANT, DIVISION, YR, MON, BOTTOM, BASIC, CHALLENGE, USERID, TDATE  
		FROM EIS_TARGETS WHERE DOCNO=@DOCNO 
	END 

	--------------- MANAGE STANDARD TIME  ---------------

	IF (@ACTIVITY = 'ADD_STANDARD_TIME') 
	BEGIN
		IF (@DOCNO>0)
		BEGIN
			UPDATE EIS_STANDARD_TIME SET STD_TIME=@PARAM2, TDATE=GETDATE(), USERID=@USERID 
			WHERE DOCNO=@DOCNO
			SELECT 2 AS FLAG
		END
		ELSE
		BEGIN
			IF NOT EXISTS (SELECT * FROM EIS_STANDARD_TIME WHERE PLANT=@PLANT AND DIVISION=@DIVISION AND MODEL_NAME=@PARAM1)
			BEGIN	 --INSERT TARGET
				SELECT  @L_NO=ISNULL(MAX(DOCNO),0)+1 FROM  EIS_STANDARD_TIME
				INSERT INTO EIS_STANDARD_TIME (DOCNO, PLANT, DIVISION, MODEL_NAME, STD_TIME, USERID,  TDATE)
									VALUES (@L_NO, @PLANT, @DIVISION, @PARAM1, @PARAM2, @USERID, GETDATE())

				SELECT 1 AS FLAG
			END
			ELSE   --IF TARGET EXISTS
			BEGIN
				SELECT 3 AS FLAG
			END
		END		
	END

	IF (@ACTIVITY = 'FILL_LIST_STANDARD_TIME') --GET ALL DATA
	BEGIN
		SELECT DOCNO, PLANT, DIVISION, MODEL_NAME AS PARAM1, STD_TIME AS VALUE1, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE 
		FROM EIS_STANDARD_TIME ORDER BY PLANT, DIVISION, MODEL_NAME
	END

	IF (@ACTIVITY = 'FILL_STANDARD_TIME_BY_DOCNO')	--FILL DATA BY DOC NO
	BEGIN
		SELECT DOCNO, PLANT, DIVISION, MODEL_NAME, STD_TIME, USERID, TDATE
		FROM EIS_STANDARD_TIME WHERE DOCNO=@DOCNO 
	END 
END
GO
/****** Object:  StoredProcedure [dbo].[usp_HR]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_HR]
(
	 @ACTIVITY			VARCHAR(200)	=''
	,@DATE1				VARCHAR(30)		= NULL
	,@DATE2				VARCHAR(30)		= NULL
	,@PARAM1			VARCHAR(100)	= ''
	,@PARAM2			VARCHAR(MAX)	= ''
	,@PARAM3			VARCHAR(MAX)	= ''
	,@PARAM4			VARCHAR(200)	= ''
	,@PARAM5			VARCHAR(200)	= ''
	,@PARAM6			VARCHAR(200)	= ''
	,@PARAM7			VARCHAR(200)	= ''
	,@PARAM8			VARCHAR(200)	= ''
)
AS
BEGIN

	IF (@ACTIVITY = 'DDL_OPTION_LIST')
	BEGIN
		SELECT SUB_QUE1 AS CODE, DESCR AS NAME FROM EXIT_QUESTIONS WHERE MAIN_QUE=1 AND SUB_QUE1 IS NOT NULL AND SUB_QUE2 IS NULL
	END

	IF (@ACTIVITY = 'DDL_OPTION_LIST2')
	BEGIN
		SELECT SUB_QUE1 AS CODE, DESCR AS NAME FROM EXIT_QUESTIONS WHERE MAIN_QUE=1 AND SUB_QUE1 IS NOT NULL AND SUB_QUE2 IS NULL AND SUB_QUE1<>@PARAM1
	END

	IF (@ACTIVITY = 'FILL_QUESTION_LIST')
	BEGIN
		SELECT DESCR AS QUESTION1, DESCR AS QUESTION2, DESCR AS QUESTION3 FROM EXIT_QUESTIONS WHERE MAIN_QUE=1 AND SUB_QUE1 IS NULL AND SUB_QUE2 IS NULL
	END

	IF (@ACTIVITY = 'FILL_QUESTION_LIST2')
	BEGIN
		SELECT 3 + ROW_NUMBER() OVER (ORDER BY ID) ID, DESCR AS QUESTION FROM EXIT_QUESTIONS WHERE MAIN_QUE<>1 AND SUB_QUE1 IS NULL AND SUB_QUE2 IS NULL
	END
	
	IF (@ACTIVITY = 'DDL_OPTION_LIST3')
	BEGIN
		SELECT SUB_QUE1 AS CODE, DESCR AS NAME FROM EXIT_QUESTIONS WHERE MAIN_QUE=1 AND SUB_QUE1 IS NOT NULL AND SUB_QUE2 IS NULL AND SUB_QUE1<>@PARAM1 AND SUB_QUE1<>@PARAM2
	END

	IF (@ACTIVITY = 'FILL_SUBQUESTION_LIST')
	BEGIN
		SELECT SUB_QUE2 AS ID, DESCR AS SUBQUE FROM EXIT_QUESTIONS WHERE MAIN_QUE=1 AND SUB_QUE1=@PARAM1 AND SUB_QUE2 IS NOT NULL
	END

	IF (@ACTIVITY = 'FILL_ALL_EMP_BY_CODE')
    BEGIN
        SELECT EMPCODE AS CODE, EMPCODE + ' - ' + EMPNAME + ' (' + DEPTNAME +')' AS NAME FROM MST_EMPLOYEE WHERE EMPCODE<>'' ORDER BY EMPNAME
    END

	IF (@ACTIVITY = 'ADD_EMP_FEEDBACK')
	BEGIN
		INSERT INTO EXIT_EMP_FEEDBACK(EMPCODE,QID,SQID,QUE,ANS_RATING,REMARK,USERID,TDATE)
		VALUES(@PARAM1, @PARAM2, @PARAM3, @PARAM4, @PARAM5, @PARAM6, @PARAM7, GETDATE())
	END

	IF (@ACTIVITY = 'Add_MonthlyAttPer')
	BEGIN
		IF EXISTS (SELECT * FROM EXIT_EMP_MONTH WHERE FINYEAR=@PARAM1 and [MONTH] = @PARAM2)
		BEGIN
            SELECT '' RETVAL, '0' FLAG, 'Record already Exists' AS MSG
        END
        ELSE 
		BEGIN            
			INSERT INTO EXIT_EMP_MONTH(FINYEAR,[MONTH],ATT_INPER,MonthOrder,InfantHeadCount,Attrition,Inv_Resgn,InfantPercent)
			VALUES(@PARAM1, @PARAM2, @PARAM3,@PARAM4,@PARAM6,@PARAM5,@PARAM7,@PARAM8)
			SELECT '' RETVAL, '1' FLAG, 'Record saved successfully' AS MSG
        END
	END

	IF (@ACTIVITY = 'Delete_MonthlyAttPer')
	BEGIN
		DELETE FROM EXIT_EMP_MONTH WHERE ID=@PARAM1
		SELECT '' RETVAL, '1' FLAG, 'Record deleted successfully' AS MSG
	END

	--Dashboard Graph Queries	

	IF (@ACTIVITY = 'TopReasonsforLeaving')
	BEGIN
		SELECT PARAM1,CAST(PARAM2 AS VARCHAR) PARAM2 FROM 
		(SELECT ANS_RATING PARAM1, COUNT(ANS_RATING) PARAM2
		FROM [EXIT_EMP_FEEDBACK] 
		WHERE QID IN ('Q1','Q2','Q3') AND SQID ='' AND (CONVERT(DATE, TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))
		GROUP BY ANS_RATING) QQ
		ORDER BY QQ.PARAM2 DESC
	END

	IF (@ACTIVITY = 'BandWiseAttrition')
	BEGIN
		(SELECT CAST(COUNT(EMP.EMPNAME)as varchar) PARAM1 FROM
			(SELECT A.EMPCODE,COUNT(A.EMPCODE) EMPCODECOUNT
				FROM EXIT_EMP_FEEDBACK A
				WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))
				GROUP BY A.EMPCODE) B
				LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE = B.EMPCODE
				WHERE EMP.GRADE IN ('JB12','JB13','JB14')) 
		UNION ALL
		(SELECT CAST(COUNT(EMP.EMPNAME)as varchar) PARAM1 FROM
			(SELECT A.EMPCODE,COUNT(A.EMPCODE) EMPCODECOUNT
				FROM EXIT_EMP_FEEDBACK A
				WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))
				GROUP BY A.EMPCODE) B
				LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE = B.EMPCODE
				WHERE EMP.GRADE IN ('JB9','JB10','JB11'))
		UNION ALL
		(SELECT CAST(COUNT(EMP.EMPNAME)as varchar) PARAM1 FROM
			(SELECT A.EMPCODE,COUNT(A.EMPCODE) EMPCODECOUNT
				FROM EXIT_EMP_FEEDBACK A
				WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))
				GROUP BY A.EMPCODE) B
				LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE = B.EMPCODE
				WHERE EMP.GRADE IN ('JB2','JB3','JB4','JB5','JB6','JB7','JB8'))
	END

	IF (@ACTIVITY = 'DeptwiseAttrition')
	BEGIN
		(SELECT C.DEPTNAME PARAM1,CAST(COUNT(C.DEPTCODE) as varchar) Param2,C.DEPTCODE FROM 
		(SELECT EMP.EMPNAME,EMP.DEPTNAME,EMP.DEPTCODE FROM
		(SELECT A.EMPCODE,COUNT(A.EMPCODE) EMPCODECOUNT
		FROM EXIT_EMP_FEEDBACK A
		WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))
		GROUP BY A.EMPCODE) B
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE = B.EMPCODE) C
		GROUP BY C.DEPTCODE,C.DEPTNAME)
	END

	IF (@ACTIVITY = 'MWAttrEmpFeedback')
	BEGIN		
		SELECT 'April' Param1,		CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='4'  and YEAR(TDATE) =@DATE1 UNION ALL
		SELECT 'May' Param1,		CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='5'  and YEAR(TDATE) =@DATE1 UNION ALL
		SELECT 'June' Param1,		CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='6'  and YEAR(TDATE) =@DATE1 UNION ALL
		SELECT 'July' Param1,		CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='7'  and YEAR(TDATE) =@DATE1 UNION ALL
		SELECT 'August' Param1,		CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='8'  and YEAR(TDATE) =@DATE1 UNION ALL
		SELECT 'September' Param1,	CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='9'  and YEAR(TDATE) =@DATE1 UNION ALL
		SELECT 'October' Param1,	CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='10' and YEAR(TDATE) =@DATE1 UNION ALL
		SELECT 'November' Param1,	CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='11' and YEAR(TDATE) =@DATE1 UNION ALL
		SELECT 'December' Param1,	CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='12' and YEAR(TDATE) =@DATE1 UNION ALL
		SELECT 'January' Param1,	CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='1'  and YEAR(TDATE) =@DATE2 UNION ALL
		SELECT 'February' Param1,	CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='2'  and YEAR(TDATE) =@DATE2 UNION ALL
		SELECT 'March' Param1,		CAST(COUNT(DISTINCT EMPCODE) AS VARCHAR) Param2 from EXIT_EMP_FEEDBACK where MONTH(TDATE) ='3'  and YEAR(TDATE) =@DATE2
	END

	IF (@ACTIVITY = 'MWAttrInfant')
	BEGIN
		SELECT MONTH Param1, CAST(InfantHeadCount as varchar) Param2, FINYEAR Param3, CAST(Id as varchar) Param4 FROM EXIT_EMP_MONTH where FINYEAR=@PARAM1 order by MonthOrder
	END	

	IF (@ACTIVITY = 'MWAttr')
	BEGIN
		SELECT MONTH Param1, CAST(Attrition as varchar) Param2, FINYEAR Param3, CAST(Id as varchar) Param4 FROM EXIT_EMP_MONTH where FINYEAR=@PARAM1 order by MonthOrder
	END

	IF (@ACTIVITY = 'MWInvResgn')
	BEGIN
		SELECT MONTH Param1, CAST(Inv_Resgn as varchar) Param2, FINYEAR Param3, CAST(Id as varchar) Param4 FROM EXIT_EMP_MONTH where FINYEAR=@PARAM1 order by MonthOrder
	END

	IF (@ACTIVITY = 'MonthAttrInPer')
	BEGIN
		SELECT FINYEAR Param1, MONTH Param2, CAST(ATT_INPER as varchar) Param3, CAST(InfantHeadCount as varchar) Param4, CAST(Attrition as varchar) Param5,
		CAST(MonthOrder as varchar) Param6, CAST(ID as varchar) Param7, CAST(Inv_Resgn as varchar) Ans1,CAST(InfantPercent as varchar) Param8
		FROM EXIT_EMP_MONTH where FINYEAR=@PARAM1 order by MonthOrder
	END	

	IF (@ACTIVITY = 'ReasonsforLeavingforStaff')
	BEGIN
		SELECT A.ANS_RATING Param1,CAST(COUNT(A.ANS_RATING) as varchar) Param2
		FROM [EXIT_EMP_FEEDBACK] A
		LEFT JOIN MST_EMPLOYEE B ON B.EMPCODE = A.EMPCODE
		WHERE QID IN ('Q1','Q2','Q3') AND SQID ='' AND B.GRADE IN ('JB12','JB13','JB14') AND (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)) 
		GROUP BY A.ANS_RATING
	END	

	IF (@ACTIVITY = 'ReasonsforLeavingforFLO')
	BEGIN
		SELECT A.ANS_RATING Param1,CAST(COUNT(A.ANS_RATING) as varchar) Param2
		FROM [EXIT_EMP_FEEDBACK] A
		LEFT JOIN MST_EMPLOYEE B ON B.EMPCODE = A.EMPCODE
		WHERE QID IN ('Q1','Q2','Q3') AND SQID ='' AND B.GRADE IN ('JB9','JB10','JB11') AND (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))
		GROUP BY A.ANS_RATING
	END	

	IF (@ACTIVITY = 'ReasonsforLeavingforSHAbove')
	BEGIN
		SELECT A.ANS_RATING Param1,CAST(COUNT(A.ANS_RATING) as varchar) Param2
		FROM [EXIT_EMP_FEEDBACK] A
		LEFT JOIN MST_EMPLOYEE B ON B.EMPCODE = A.EMPCODE
		WHERE QID IN ('Q1','Q2','Q3') AND SQID ='' AND B.GRADE IN ('JB2','JB3','JB4','JB5','JB6','JB7','JB8') AND (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))
		GROUP BY A.ANS_RATING
	END	

	IF (@ACTIVITY = 'EngagementCount')
	BEGIN
		SELECT QID Param1, ANS_RATING Param2,CAST(COUNT(ANS_RATING)as varchar) Param3 FROM EXIT_EMP_FEEDBACK  WHERE QID ='Q4' AND (CONVERT(DATE, TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)) GROUP BY ANS_RATING,QID UNION ALL
		SELECT QID Param1, ANS_RATING Param2,CAST(COUNT(ANS_RATING)as varchar) Param3 FROM EXIT_EMP_FEEDBACK  WHERE QID ='Q5' AND (CONVERT(DATE, TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)) GROUP BY ANS_RATING,QID UNION ALL
		SELECT QID Param1, ANS_RATING Param2,CAST(COUNT(ANS_RATING)as varchar) Param3 FROM EXIT_EMP_FEEDBACK  WHERE QID ='Q6' AND (CONVERT(DATE, TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)) GROUP BY ANS_RATING,QID UNION ALL
		SELECT QID Param1, ANS_RATING Param2,CAST(COUNT(ANS_RATING)as varchar) Param3 FROM EXIT_EMP_FEEDBACK  WHERE QID ='Q7' AND (CONVERT(DATE, TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)) GROUP BY ANS_RATING,QID 		
	END


	IF (@ACTIVITY = 'Engagement')
	BEGIN
		SELECT CAST(COUNT(ANS_RATING) AS VARCHAR) PARAM1, ISNULL(CAST(LEFT(ROUND(AVG(CAST(ANS_RATING AS DECIMAL)),0),1) AS VARCHAR),0) PARAM2,
		ISNULL(CAST(CAST(AVG(CAST(ANS_RATING AS DECIMAL)) AS DECIMAL(10,2)) AS VARCHAR),0) PARAM3
		FROM EXIT_EMP_FEEDBACK WHERE QID ='Q4' AND (CONVERT(DATE, TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)) UNION ALL
		SELECT CAST(COUNT(ANS_RATING) AS VARCHAR) PARAM1, ISNULL(CAST(LEFT(ROUND(AVG(CAST(ANS_RATING AS DECIMAL)),0),1) AS VARCHAR),0) PARAM2,
		ISNULL(CAST(CAST(AVG(CAST(ANS_RATING AS DECIMAL)) AS DECIMAL(10,2)) AS VARCHAR),0) PARAM3
		FROM EXIT_EMP_FEEDBACK WHERE QID ='Q5' AND (CONVERT(DATE, TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)) UNION ALL
		SELECT CAST(COUNT(ANS_RATING) AS VARCHAR) PARAM1, ISNULL(CAST(LEFT(ROUND(AVG(CAST(ANS_RATING AS DECIMAL)),0),1) AS VARCHAR),0) PARAM2,
		ISNULL(CAST(CAST(AVG(CAST(ANS_RATING AS DECIMAL)) AS DECIMAL(10,2)) AS VARCHAR),0) PARAM3
		FROM EXIT_EMP_FEEDBACK WHERE QID ='Q6' AND (CONVERT(DATE, TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)) UNION ALL
		SELECT CAST(COUNT(ANS_RATING) AS VARCHAR) PARAM1, ISNULL(CAST(LEFT(ROUND(AVG(CAST(ANS_RATING AS DECIMAL)),0),1) AS VARCHAR),0) PARAM2,
		ISNULL(CAST(CAST(AVG(CAST(ANS_RATING AS DECIMAL)) AS DECIMAL(10,2)) AS VARCHAR),0) PARAM3
		FROM EXIT_EMP_FEEDBACK WHERE QID ='Q7' AND (CONVERT(DATE, TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))
	END	

	IF (@ACTIVITY = 'TenureWiseAttrition')
	BEGIN
		SELECT 'Less than 1 year' Param1,	CAST(COUNT(EXPERIENCE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, DATEDIFF(YEAR,EMP.DOJ,A.TDATE) EXPERIENCE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.EXPERIENCE <=1 UNION ALL
		SELECT '1 to 2 years' Param1,		CAST(COUNT(EXPERIENCE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, DATEDIFF(YEAR,EMP.DOJ,A.TDATE) EXPERIENCE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.EXPERIENCE BETWEEN 1.1 AND 2  UNION ALL
		SELECT '2.1 to 3 years' Param1,		CAST(COUNT(EXPERIENCE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, DATEDIFF(YEAR,EMP.DOJ,A.TDATE) EXPERIENCE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.EXPERIENCE BETWEEN 2.1 AND 3 UNION ALL
		SELECT '3.1 years & above' Param1,	CAST(COUNT(EXPERIENCE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, DATEDIFF(YEAR,EMP.DOJ,A.TDATE) EXPERIENCE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.EXPERIENCE >=3.1
	END

	IF (@ACTIVITY = 'GenerationwiseAttrition')
	BEGIN
		SELECT 'Gen X(1965-1980)' Param1, CAST(COUNT(AGE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, YEAR(DOB) AGE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.AGE BETWEEN 1965 AND 1980 UNION ALL
		SELECT 'Gen Y(1981-1996)' Param1, CAST(COUNT(AGE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, YEAR(DOB) AGE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.AGE BETWEEN 1981 AND 1996 UNION ALL
		SELECT 'Gen Z(1997-2012)' Param1, CAST(COUNT(AGE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, YEAR(DOB) AGE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.AGE BETWEEN 1997 AND 2012
	END

	IF (@ACTIVITY = 'AgeWiseAttrition')
	BEGIN
		SELECT 'Age(18 To 25)' Param1, CAST(COUNT(AGE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, DATEDIFF(YEAR,EMP.DOB,A.TDATE) AGE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.AGE BETWEEN 18 AND 25 UNION ALL
		SELECT 'Age(26 To 30)' Param1, CAST(COUNT(AGE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, DATEDIFF(YEAR,EMP.DOB,A.TDATE) AGE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.AGE BETWEEN 26 AND 30 UNION ALL
		SELECT 'Age(31 To 35)' Param1, CAST(COUNT(AGE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, DATEDIFF(YEAR,EMP.DOB,A.TDATE) AGE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.AGE BETWEEN 31 AND 35 UNION ALL
		SELECT 'Age(36 To 40)' Param1, CAST(COUNT(AGE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, DATEDIFF(YEAR,EMP.DOB,A.TDATE) AGE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.AGE BETWEEN 36 AND 40 UNION ALL
		SELECT 'Age(41 To 45)' Param1, CAST(COUNT(AGE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, DATEDIFF(YEAR,EMP.DOB,A.TDATE) AGE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.AGE BETWEEN 41 AND 45 UNION ALL
		SELECT 'Age(46 To 50)' Param1, CAST(COUNT(AGE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, DATEDIFF(YEAR,EMP.DOB,A.TDATE) AGE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.AGE BETWEEN 46 AND 50 UNION ALL
		SELECT 'Age(51 To 60)' Param1, CAST(COUNT(AGE) as varchar) Param2 FROM (SELECT DISTINCT(A.EMPCODE) EMPCODE, DATEDIFF(YEAR,EMP.DOB,A.TDATE) AGE FROM EXIT_EMP_FEEDBACK A 
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE=A.EMPCODE WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))) X 
		WHERE X.AGE BETWEEN 51 AND 60
	END

	IF (@ACTIVITY = 'BUWiseAttrition')
	BEGIN
		SELECT CASE C.PLANT WHEN 'BAWAL-PACK' THEN 'Battery' WHEN 'BAWAL-SMT' THEN 'SMT' ELSE '' END PARAM1,CAST(COUNT(C.PLANT) AS VARCHAR) PARAM2 FROM 
		(SELECT EMP.PLANT FROM
		(SELECT A.EMPCODE,COUNT(A.EMPCODE) EMPCODECOUNT
		FROM EXIT_EMP_FEEDBACK A
		WHERE (CONVERT(DATE, A.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2))
		GROUP BY A.EMPCODE) B
		LEFT JOIN MST_EMPLOYEE EMP ON EMP.EMPCODE = B.EMPCODE) C
		GROUP BY C.PLANT
	END

	IF (@ACTIVITY = 'BOX3')
	BEGIN
		SELECT ISNULL(SUM(Attrition), 0) Param1 FROM EXIT_EMP_MONTH WHERE FINYEAR=@PARAM1
	END

	IF (@ACTIVITY = 'BOX5')
	BEGIN
		SELECT ISNULL(MAX(ATT_INPER), 0) Param1 FROM EXIT_EMP_MONTH WHERE FINYEAR=@PARAM1
	END

	IF (@ACTIVITY = 'EmpFeedback')
	BEGIN
		SELECT COUNT(DISTINCT(empcode)) Param1
		FROM EXIT_EMP_FEEDBACK where CONVERT(DATE, TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)
	END

	IF (@ACTIVITY = 'EmpInfant')
	BEGIN
		SELECT ISNULL(SUM(InfantHeadCount), 0) Param1, ISNULL(MAX(InfantPercent), 0) Param2, ISNULL(SUM(Inv_Resgn), 0) Param3 FROM EXIT_EMP_MONTH WHERE FINYEAR=@PARAM1
	END

	IF (@ACTIVITY = 'ActiveEmp')
	BEGIN
		SELECT COUNT(EMPCODE) PARAM1 FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND EMPCODE LIKE '90%' AND (EMPCODE NOT IN ('9024958','9024981','9024989','9025029','9025133'))
	END

	IF (@ACTIVITY = 'EmpRatingwiseAttrition')
	BEGIN
		SELECT CAST(ID AS VARCHAR) Param1, FINYEAR Param2, Rating Param3, CAST(HeadCount AS VARCHAR) Param4, CAST([LEFT] AS VARCHAR) Param5,
		CAST([Percent] AS VARCHAR) Param6, CAST(RatingCode AS VARCHAR) Param7 FROM EXIT_EMP_RATING WHERE FINYEAR=@PARAM1
	END

	IF (@ACTIVITY = 'ManageEmpRating')
	BEGIN
		IF EXISTS (SELECT * FROM EXIT_EMP_RATING WHERE FINYEAR=@PARAM2 and RTRIM(LTRIM(RatingCode)) = @PARAM4)
		BEGIN
            Update EXIT_EMP_RATING set HeadCount=@PARAM5, [Left]=@PARAM6, [Percent]=@PARAM7 where ID=@PARAM1
			SELECT '' RETVAL, '1' FLAG, 'Record updated successfully' AS MSG
        END
        ELSE 
		BEGIN            
			INSERT INTO EXIT_EMP_RATING(FINYEAR,Rating,RatingCode,HeadCount,[Left],[Percent])
			VALUES(@PARAM2,@PARAM3,@PARAM4,@PARAM5,@PARAM6,@PARAM7)
			SELECT '' RETVAL, '1' FLAG, 'Record saved successfully' AS MSG
        END
	END

	--Onboard survey

	IF (@ACTIVITY = 'DueOnBoardSurvey')
	BEGIN
		SELECT ISNULL(EMPCODE,'')EMPCODE,ISNULL(EMPNAME,'')EMPNAME,ISNULL(DESIGNATION,'')DESIGNATION,ISNULL(DEPTNAME,'')DEPTNAME,ISNULL(EMAILID_O,'')EMAILID,
		REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ,CAST(FORMAT(DATEADD(DAY,5,DOJ) , 'dd-MMM-yyyy') AS VARCHAR) DAY5_SURVEY,
		CAST(FORMAT(DATEADD(DAY,60,DOJ) , 'dd-MMM-yyyy') AS VARCHAR) DAY60_SURVEY, --CAST(FORMAT(DATEADD(DAY,120,DOJ) , 'dd-MMM-yyyy') AS VARCHAR) DAY120_SURVEY,
		CAST(ISNULL(ONBOARDSURVEY_DAY5,0)AS VARCHAR)DAY5,CAST(ISNULL(ONBOARDSURVEY_DAY60,0) AS VARCHAR)DAY60--,CAST(ISNULL(ONBOARDSURVEY_DAY120,0) AS VARCHAR)DAY120
		FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND EMPCODE LIKE '90%' AND CAST(DOJ AS date) >= '2022-04-01' AND ISNULL(ONBOARDSURVEY_DAY5,0)=0 		
		UNION
		SELECT ISNULL(EMPCODE,'')EMPCODE,ISNULL(EMPNAME,'')EMPNAME,ISNULL(DESIGNATION,'')DESIGNATION,ISNULL(DEPTNAME,'')DEPTNAME,ISNULL(EMAILID_O,'')EMAILID,
		REPLACE(CONVERT(NVARCHAR, DOJ, 106), ' ', '-') DOJ,CAST(FORMAT(DATEADD(DAY,5,DOJ) , 'dd-MMM-yyyy') AS VARCHAR) DAY5_SURVEY,
		CAST(FORMAT(DATEADD(DAY,60,DOJ) , 'dd-MMM-yyyy') AS VARCHAR) DAY60_SURVEY, --CAST(FORMAT(DATEADD(DAY,120,DOJ) , 'dd-MMM-yyyy') AS VARCHAR) DAY120_SURVEY,
		CAST(ISNULL(ONBOARDSURVEY_DAY5,0)AS VARCHAR)DAY5,CAST(ISNULL(ONBOARDSURVEY_DAY60,0) AS VARCHAR)DAY60--,CAST(ISNULL(ONBOARDSURVEY_DAY120,0) AS VARCHAR)DAY120
		FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND EMPCODE LIKE '90%' AND CAST(DOJ AS date) >= '2022-04-01' AND ISNULL(ONBOARDSURVEY_DAY60,0)=0 
	END

	IF (@ACTIVITY = 'FeedbackOnBoardSurvey')
	BEGIN
		SELECT '' PARAM1 FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND EMPCODE LIKE '90%'
	END

	IF (@ACTIVITY = 'OnboardRequestIsValid')
	BEGIN
		IF(@PARAM2 = 'sm')
		BEGIN
				IF EXISTS (SELECT 1 FROM MST_EMPLOYEE WHERE EMPCODE=@PARAM1 AND ISACTIVE=1 AND EMPCODE LIKE '90%' AND CAST(DOJ AS date) >= '2022-04-01' AND ISNULL(ONBOARDSURVEY_DAY5,0)=0 )
				BEGIN
					SELECT IIF(ISNULL(ONBOARDSURVEY_DAY5,0)=0,'1','0') FLAG FROM MST_EMPLOYEE 
					WHERE EMPCODE=@PARAM1 AND ISACTIVE=1 AND EMPCODE LIKE '90%' AND CAST(DOJ AS date) >= '2022-04-01' AND ISNULL(ONBOARDSURVEY_DAY5,0)=0	
				END
				ELSE 
				BEGIN					
					SELECT '0' FLAG
				END
		END
		IF(@PARAM2 = 'pd')
		BEGIN

			IF EXISTS (SELECT 1 FROM MST_EMPLOYEE WHERE EMPCODE=@PARAM1 AND ISACTIVE=1 AND EMPCODE LIKE '90%' AND CAST(DOJ AS date) >= '2022-04-01' AND ISNULL(ONBOARDSURVEY_DAY5,0)=0 )
				BEGIN
					SELECT '2' FLAG, '5 Days Onboarding survey is pending'	
				END
				ELSE 
				BEGIN					
					IF EXISTS (SELECT 1 FROM MST_EMPLOYEE WHERE EMPCODE=@PARAM1 AND ISACTIVE=1 AND EMPCODE LIKE '90%' AND CAST(DOJ AS date) >= '2022-04-01' AND ISNULL(ONBOARDSURVEY_DAY60,0)=0	 )
					BEGIN
						SELECT IIF(ISNULL(ONBOARDSURVEY_DAY60,0)=0,'1','0') FLAG FROM MST_EMPLOYEE 
						WHERE EMPCODE=@PARAM1 AND ISACTIVE=1 AND EMPCODE LIKE '90%' AND CAST(DOJ AS date) >= '2022-04-01' AND ISNULL(ONBOARDSURVEY_DAY60,0)=0	
					END
					ELSE 
					BEGIN					
						SELECT '0' FLAG
					END
				END
		END		
	END

	IF (@ACTIVITY = 'OnboardIsUserValid')
	BEGIN
		SELECT '1' AS FLAG FROM MST_EMPLOYEE WHERE EMPCODE=@PARAM1 AND ISACTIVE=1 AND EMPCODE LIKE '90%' AND CAST(DOJ AS date) >= '2022-04-01' AND CAST(DOJ AS DATE) = CAST(@PARAM2 AS DATE)
	END

	IF (@ACTIVITY = 'SaveOnboardAns')
	BEGIN
		INSERT INTO EXIT_ONBOARD_SURVEY(EmpCode,Que,Ans,DimensionCategory,ExperiencePillar,IsDay5Survey,IsDay60Survey,TDate)
		VALUES(@PARAM1,@PARAM2,@PARAM3,@PARAM4,@PARAM5,@PARAM6,@PARAM7,GETDATE())
	END

	IF (@ACTIVITY = 'SaveOnboardAns1')
	BEGIN
		UPDATE MST_EMPLOYEE SET ONBOARDSURVEY_DAY5=1 where EMPCODE=@PARAM1
	END

	IF (@ACTIVITY = 'SaveOnboardAns2')
	BEGIN
		UPDATE MST_EMPLOYEE SET ONBOARDSURVEY_DAY60=1 where EMPCODE=@PARAM1
	END

	IF (@ACTIVITY = 'OnBoardingSurveyData')
	BEGIN
		SELECT EmpCode, DBO.FN_EMPNAME(EMPCODE) EmpName,Que Question, 
		CASE Ans 
		WHEN '6' THEN 'Strongly Agree' 
		WHEN '5' THEN 'Agree'
		WHEN '4' THEN 'Slightly Agree'
		WHEN '3' THEN 'Slightly Disagree'
		WHEN '2' THEN 'Disagree'
		WHEN '1' THEN 'Strongly Disagree'
		ELSE Ans END Answer, DimensionCategory,ExperiencePillar,IIF(IsDay5Survey='1','5Day','60Day') SurveyType FROM EXIT_ONBOARD_SURVEY
		WHERE (CONVERT(DATE, TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)) ORDER BY EMPCODE, TDATE
	END

	IF (@ACTIVITY = 'ExitSurveyData')
	BEGIN
		SELECT T1.EMPCODE,DBO.FN_EMPNAME(EMPCODE) EMPLOYEENAME,T1.QUE,T1.ANS_RATING,
		(SELECT TOP 1 T2.ANS_RATING FROM EXIT_EMP_FEEDBACK T2 WHERE (T2.SQID='' OR T2.SQID IS NULL) AND T2.QID = T1.QID AND T2.EMPCODE = T1.EMPCODE) REASONCATEGORY ,REMARK  
		FROM EXIT_EMP_FEEDBACK T1 WHERE (CONVERT(DATE, T1.TDATE) BETWEEN CONVERT(DATE, @DATE1) AND CONVERT(DATE, @DATE2)) ORDER BY T1.EMPCODE, T1.TDATE
	END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_IT]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[usp_IT]
@ACTIVITY				VARCHAR(200)='',
@DEPT					VARCHAR(50)='',
@STATUS					INT=0,
@USERID					VARCHAR(50)='',

@PARAM1					VARCHAR(50)=''
AS
BEGIN
SET NOCOUNT ON;

	--------------------IT DASHBOARD--------------

	IF (@ACTIVITY = 'GET_IT_STAFF')			--GET ALL IT ENGINEERS
	BEGIN
		SELECT * FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND DEPTCODE='DP0010' 
	END

	IF (@ACTIVITY = 'IT_DASHBOARD')						-- IT DASHBOARD DATA
	BEGIN
		SELECT EMPCODE, EMPNAME, CONTACTNO_O AS CONTACTNO, PHOTO, DOJ, REMARK1 AS TYPE,
		CASE WHEN GRADE LIKE 'JB%' THEN CAST(REPLACE(GRADE, 'JB', 0) AS INT) ELSE 50 END AS GRADE
		FROM MST_EMPLOYEE WHERE ISACTIVE=1
		ORDER BY GRADE, DOJ
	END	

	IF (@ACTIVITY = 'IT_BIRTHDAY')						-- IT BIRTHDAY		
	BEGIN
		SELECT EMPNAME, PHOTO FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND DEPTCODE='DP0010' AND DATEPART(DAY, DOB)=DATEPART(DAY, GETDATE()) AND DATEPART(MONTH, DOB)=DATEPART(MONTH, GETDATE())
	END	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ITHelpDesk]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[usp_ITHelpDesk]
(
	@ACTIVITY           VARCHAR(50)='',
	@DOCNO              INT=0,
	@PLANT              VARCHAR(20)='',
	@EMPCODE            VARCHAR(50)='',
	@NAME               VARCHAR(50)='',
	@DEPT               VARCHAR(50)='',
	@EMAIL              VARCHAR(50)='',
	@CONTACT            VARCHAR(50)='',
	@EXTNO				VARCHAR(50)='',
	@PRIORITY           VARCHAR(50)='',
	@REQTYPE            VARCHAR(50)='',
	@PROBCATG           VARCHAR(50)='',
	@SUBCATG            VARCHAR(50)='',
	@FILENAME           VARCHAR(100)='',            
	@SUBJECT            VARCHAR(500)='',
	@DESCR              VARCHAR(2000)='',
	@SOLUTION           VARCHAR(2000)='',

	@EMPCODE2           VARCHAR(50)='',
	@NAME2              VARCHAR(50)='',
	@ROLES				VARCHAR(2000)='',
	@REQ_FOR            VARCHAR(20)='',
	@EMAIL_ACCESS		CHAR(1)='',
	@ADID_ACCESS	    CHAR(1)='',
	@VPN_ACCESS			CHAR(1)='',
	@EMAILID			CHAR(1)='',
	@BIS				CHAR(1)='',
	@MES				CHAR(1)='',
	@SAP				CHAR(1)='',
	@ASSET				CHAR(1)='',


	@REMARKS            VARCHAR(2000)='',
	@STATUS             VARCHAR(50)='',
	@STATUS_DESCR       VARCHAR(50)='',
	@USERID             VARCHAR(50)='',
	@APPRID				VARCHAR(50)='',	
	@APPRTYPE			VARCHAR(50)='',	
	@DATE1			    DATETIME='',
	@DATE2			    DATETIME='',
	@DATE3			    DATETIME='',
	@DATE4			    DATETIME='',
	@DATE5			    DATETIME='',
	@DATE6			    DATETIME='',
	@PARAM1				VARCHAR(100)='',
	@PARAM2				VARCHAR(100)='',
	@PARAM3				VARCHAR(100)='',
	@PARAM4				VARCHAR(100)=''
)
AS
BEGIN
DECLARE @L_NO INT, @L_P1 VARCHAR(50), @L_P2 VARCHAR(50), @L_P3 VARCHAR(50), @L_P4 VARCHAR(50)

	IF (@ACTIVITY = 'FILL_HOD')	--FILL REQUEST APPROVER
    BEGIN
        SELECT @L_P1=dbo.FN_EMPADID(APPRID) FROM MST_EMPLOYEE WHERE ADID=@USERID OR EMPCODE=@USERID
		IF (@L_P1= 'NI00010')  --IF MD IS APPROVER THEN DIRECTLY GOES TO IT HOD
		BEGIN
			SELECT HODCODE AS CODE, dbo.FN_EMPNAME(HODCODE) AS NAME FROM MST_DEPTHOD WHERE ISACTIVE=1 AND DEPTCODE='DP0010' AND PLANT=dbo.FN_EMPPLANT(@USERID)
		END
		ELSE
		BEGIN
			SELECT dbo.FN_EMPADID(APPRID) AS CODE, APPRNAME AS NAME FROM MST_EMPLOYEE WHERE (ISNULL(ADID,'')<>'' AND ADID=@USERID) OR (ISNULL(EMPCODE,'')<>'' AND EMPCODE=@USERID)
			UNION
			SELECT HODCODE AS CODE, dbo.FN_EMPNAME(HODCODE) AS NAME FROM MST_DEPTHOD WHERE ISACTIVE=1 AND HODCODE<>@USERID AND DEPTCODE=dbo.FN_EMPDEPTCODE(@USERID) AND PLANT=dbo.FN_EMPPLANT(@USERID)
		END
    END  

	IF (@ACTIVITY = 'GET_IT_HOD')	--GET IT HOD
    BEGIN
		SELECT HODCODE FROM MST_DEPTHOD WHERE ISACTIVE=1 AND DEPTCODE='DP0010' AND PLANT=dbo.FN_EMPPLANT(@USERID)
	END

	IF (@ACTIVITY = 'ADD_REQUEST')   --ADD/UPDATE
	BEGIN
		IF (@DOCNO > 0)
		BEGIN
			UPDATE ITHELPDESK_MASTER SET PLANT=@PLANT, REQID=@EMPCODE, REQNAME=@NAME, DEPTCODE=@DEPT, CONTACTNO=@CONTACT, EXTNO=@EXTNO, EMAIL=@EMAIL, REQ_TYPE=@REQTYPE, PRIORITY=@PRIORITY, 
			PROBLEM_CATG=@PROBCATG, SUB_CATG=@SUBCATG, FILENAME=@FILENAME, SUBJECT=@SUBJECT, PROBLEM_DESCR=@DESCR, SOLUTION=@SOLUTION, START_DATE=IIF(@REQTYPE='Task', @DATE1, NULL), END_DATE=IIF(@REQTYPE='Task', @DATE2, NULL), 
			STATUS=@STATUS, IT_ENGG=IIF(@REQTYPE='Task', @USERID, ''), DEPT_HOD=IIF(@STATUS=2, @APPRID, ''), IT_HOD=IIF(@STATUS=3, @APPRID, ''), PENDING_WITH=@APPRID, APPRTYPE=@APPRTYPE
			WHERE REQNO=@DOCNO
			SELECT 2 AS FLAG, @DOCNO AS REQNO
		END
		ELSE                                                                                                                                                             
		BEGIN
		    SELECT  @DOCNO=ISNULL(MAX(REQNO),0)+1  FROM  ITHELPDESK_MASTER
			INSERT INTO ITHELPDESK_MASTER (REQNO, PLANT, REQID, REQNAME, DEPTCODE, CONTACTNO, EXTNO, EMAIL, PRIORITY, REQ_TYPE, PROBLEM_CATG, SUB_CATG, START_DATE, END_DATE, FILENAME, 
											SUBJECT, PROBLEM_DESCR, SOLUTION, STATUS, DEPT_HOD, IT_HOD, IT_ENGG, PENDING_WITH, APPRTYPE, FINISH_DATE, USERID, TDATE )

								VALUES(@DOCNO, @PLANT, @EMPCODE, @NAME, @DEPT, @CONTACT, @EXTNO, @EMAIL, @PRIORITY, @REQTYPE, @PROBCATG, @SUBCATG, IIF(@REQTYPE='Task', @DATE1, NULL), IIF(@REQTYPE='Task', @DATE2, NULL), @FILENAME, 
											@SUBJECT, @DESCR, @SOLUTION, @STATUS, IIF(@STATUS=2, @APPRID, ''), IIF(@STATUS=3, @APPRID, ''), IIF(@REQTYPE='Task', @USERID, ''), @APPRID, @APPRTYPE, IIF(@STATUS=7, GETDATE(), NULL), @USERID, GETDATE() )

			SELECT 1 AS FLAG, @DOCNO AS REQNO
		END

		IF (@STATUS > 1)       -- ADD REQUEST
		BEGIN
			SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  ITHELPDESK_HISTORY WHERE REQNO=@DOCNO
			INSERT INTO ITHELPDESK_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS,  STATUSDESCR, TDATE)
							VALUES (@DOCNO, @L_NO, 'REQUESTOR', @USERID, @REMARKS, @STATUS, IIF(@STATUS=7, 'Finish', 'Post'), GETDATE())
		END
	END

	IF (@ACTIVITY = 'GET_HELPDESK_BY_DOCNO')        --GET HELPDESK DATA BY DOCNO
    BEGIN
        SELECT REQNO, PLANT, REQID, REQNAME, DEPTCODE, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EXTNO, EMAIL, PRIORITY, REQ_TYPE, PROBLEM_CATG, dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG_DESCR,
        SUB_CATG, dbo.FN_CODEDEF(24, SUB_CATG) AS SUB_CATG_DESCR, FILENAME, SUBJECT, PROBLEM_DESCR, ISNULL(SOLUTION , '') AS SOLUTION, FORMAT(START_DATE, 'dd-MMM-yyyy') AS START_DATE, CAST(START_DATE AS TIME) AS START_TIME,
		FORMAT(END_DATE, 'dd-MMM-yyyy') AS END_DATE, CAST(END_DATE AS TIME) AS END_TIME, DEPT_HOD, IT_HOD, IT_ENGG, IT_ENGG_AREA, 
		STATUS, dbo.FN_CODEDEF(21, STATUS) AS STATUSDESCR, PENDING_WITH, APPRTYPE, USERID, FORMAT(TDATE, 'dd-MMM-yyyy') AS TDATE
        FROM ITHELPDESK_MASTER WHERE REQNO=@DOCNO
    END 

	IF (@ACTIVITY = 'FILL_HELPDESK_HISTORY')		--FILL HELPDESK HISTORY	
    BEGIN
        SELECT REQNO AS REQUESTNO, SRNO, USERTYPE, ISNULL(USERID, '') AS USERID, ISNULL(dbo.FN_EMPNAME(USERID), '') AS EMPNAME, REMARKS, STATUS, STATUSDESCR, CONVERT(VARCHAR, TDATE, 20) AS TDATE
        FROM ITHELPDESK_HISTORY WHERE REQNO=@DOCNO
    END  

	IF (@ACTIVITY = 'FILL_HELPDESK_VIEW_LIST')  --FILL HELPDESK VIEW LIST
	BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, PRIORITY, REQ_TYPE, dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG, dbo.FN_CODEDEF(24, SUB_CATG) AS SUB_CATG,
		CONVERT(VARCHAR, START_DATE, 20) AS START_DATE, CONVERT(VARCHAR, END_DATE, 20) AS END_DATE,  DATEDIFF(MINUTE, START_DATE, END_DATE) AS TOTAL_TIME, SUBJECT, PROBLEM_DESCR, SOLUTION, DEPT_HOD + ' - ' + dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, IT_HOD + ' - ' + dbo.FN_EMPNAME(IT_HOD) AS IT_HOD, IT_ENGG + ' - ' + dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, IT_ENGG_AREA, 
		CONVERT(VARCHAR, FINISH_DATE, 20) AS FINISH_DATE, STATUS, dbo.FN_CODEDEF(21, STATUS) AS STATUSDESCR, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE, PENDING_WITH, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME, APPRTYPE
		FROM ITHELPDESK_MASTER A WHERE @USERID IN (SELECT DISTINCT USERID FROM ITHELPDESK_HISTORY B WHERE B.REQNO=A.REQNO)
		AND STATUS=CASE WHEN @STATUS IN (0,20) THEN STATUS ELSE @STATUS END
		AND ISNULL(REQ_TYPE, '')=CASE WHEN @REQTYPE='0' THEN ISNULL(REQ_TYPE, '') ELSE @REQTYPE END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY 1 DESC
	END

	IF (@ACTIVITY = 'FILL_HELPDESK_PENDING_LIST')  --FILL HELPDESK PENDING LIST
	BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, PRIORITY, REQ_TYPE, dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG, dbo.FN_CODEDEF(24, SUB_CATG) AS SUB_CATG,
		CONVERT(VARCHAR, START_DATE, 20) AS START_DATE, CONVERT(VARCHAR, END_DATE, 20) AS END_DATE, DATEDIFF(MINUTE, START_DATE, END_DATE) AS TOTAL_TIME, SUBJECT, PROBLEM_DESCR, SOLUTION, DEPT_HOD + ' - ' + dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, IT_HOD + ' - ' + dbo.FN_EMPNAME(IT_HOD) AS IT_HOD, IT_ENGG + ' - ' + dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, IT_ENGG_AREA, 
		CONVERT(VARCHAR, FINISH_DATE, 20) AS FINISH_DATE, STATUS, dbo.FN_CODEDEF(21, STATUS) AS STATUSDESCR, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE, PENDING_WITH, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME, APPRTYPE
		FROM ITHELPDESK_MASTER WHERE PENDING_WITH=@USERID
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY 1 DESC
	END

	IF (@ACTIVITY = 'FILL_HELPDESK_PENDING_IT_LIST')  --FILL HELPDESK PENDING WITH IT ADMIN LIST
	BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, PRIORITY, REQ_TYPE, dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG, dbo.FN_CODEDEF(24, SUB_CATG) AS SUB_CATG,
		CONVERT(VARCHAR, START_DATE, 20) AS START_DATE, CONVERT(VARCHAR, END_DATE, 20) AS END_DATE, DATEDIFF(MINUTE, START_DATE, END_DATE) AS TOTAL_TIME, SUBJECT, PROBLEM_DESCR, SOLUTION, DEPT_HOD + ' - ' + dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, IT_HOD + ' - ' + dbo.FN_EMPNAME(IT_HOD) AS IT_HOD, IT_ENGG + ' - ' + dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, IT_ENGG_AREA, 
		CONVERT(VARCHAR, FINISH_DATE, 20) AS FINISH_DATE, STATUS, dbo.FN_CODEDEF(21, STATUS) AS STATUSDESCR, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE, PENDING_WITH, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME, 'IT_ADMIN' AS APPRTYPE
		FROM ITHELPDESK_MASTER WHERE STATUS=4
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY 1 DESC
	END

	IF (@ACTIVITY = 'GET_PENDING_REQ_COUNT')	--GET PENDING REEQUESTS
    BEGIN
        SELECT COUNT(*) AS TOTAL FROM ITHELPDESK_MASTER WHERE PENDING_WITH = @USERID
    END  

	IF (@ACTIVITY = 'GET_PENDING_REQ_ITADMIN_COUNT')	--GET PENDING REEQUESTS FROM IT ADMIN
    BEGIN
        SELECT COUNT(*) AS TOTAL FROM ITHELPDESK_MASTER WHERE STATUS = 4
    END

	IF (@ACTIVITY = 'GET_ALL_REQ_COUNT')	--GET ALL REQUEST COUNT
    BEGIN
		SELECT COUNT(*) AS TOTAL FROM ITHELPDESK_MASTER A WHERE @USERID IN (SELECT DISTINCT USERID FROM ITHELPDESK_HISTORY B WHERE B.REQNO=A.REQNO)
    END

	IF (@ACTIVITY = 'CANCEL_HELPDESK_REQUEST')		--CANCEL HELPDESK REQUEST
    BEGIN
        UPDATE ITHELPDESK_MASTER SET STATUS = 9, PENDING_WITH='', APPRTYPE='' WHERE REQNO=@DOCNO 

        SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  ITHELPDESK_HISTORY WHERE REQNO=@DOCNO
        INSERT INTO ITHELPDESK_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS, STATUSDESCR, TDATE)
							VALUES (@DOCNO, @L_NO, 'REQUESTOR', @USERID, 'CANCELLED', 9, 'CANCELLED', GETDATE())
    END	

	IF (@ACTIVITY = 'FILL_IT_ENGINEER')	--FILL IT ENGINEER's 		
    BEGIN
		SELECT ADID AS CODE, ADID +' - '+ EMPNAME + ' (' + EMPCODE + ')' AS NAME FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND ADID IS NOT NULL AND DEPTCODE= 'DP0010' ORDER BY EMPNAME
    END

	IF (@ACTIVITY = 'GET_IT_ENGINEER')	--GET IT ENGINEER's 	
    BEGIN
		SELECT @L_P1=PLANT, @L_P2=dbo.FN_CODEDEF(23, PROBLEM_CATG), @L_P3=dbo.FN_CODEDEF(24, SUB_CATG) FROM ITHELPDESK_MASTER WHERE REQNO=@DOCNO
		
		SELECT @L_P4=VALUE FROM MST_CONFIG WHERE MODULE='ITHELPDESK' AND (PLANT=@L_P1 OR PLANT='*') AND CATEGORY1=@L_P2 AND (CATEGORY2=@L_P3 OR CATEGORY2='*')

		IF (@L_P4 IS NOT NULL)
		BEGIN
			SELECT @L_P4 AS IT_ENGG
		END
		ELSE
		BEGIN
			SELECT 'NI00005' AS IT_ENGG
		END
    END

	IF (@ACTIVITY = 'APPROVE_REQUEST')		--APPROVE REQUEST 	
    BEGIN
		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  ITHELPDESK_HISTORY WHERE REQNO=@DOCNO

        INSERT INTO ITHELPDESK_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS, STATUSDESCR)
                           VALUES (@DOCNO, @L_NO, @APPRTYPE, @USERID, @REMARKS, @STATUS, @STATUS_DESCR)


		IF(@APPRTYPE = 'HOD')	--FOR DEPT HOD
		BEGIN
			UPDATE ITHELPDESK_MASTER SET IT_HOD=IIF(@STATUS=3, @APPRID, IT_HOD), STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
			WHERE REQNO=@DOCNO
		END
		IF(@APPRTYPE = 'IT_HOD')	--FOR IT HOD
		BEGIN
			UPDATE ITHELPDESK_MASTER SET IT_ENGG=IIF(@STATUS=5, @APPRID, IT_ENGG), STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
			WHERE REQNO=@DOCNO
		END
		IF(@APPRTYPE = 'IT_ADMIN')	--FOR IT ADMIN
		BEGIN
			IF(@STATUS = 5)
			BEGIN
				UPDATE ITHELPDESK_MASTER SET PRIORITY=@PRIORITY, PROBLEM_CATG=@PROBCATG, SUB_CATG=@SUBCATG, IT_ENGG=@APPRID, IT_ENGG_AREA=@PARAM2,
				STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
				WHERE REQNO=@DOCNO
			END
			ELSE		--FOR REJECT/REVIEW BACK 
			BEGIN
				UPDATE ITHELPDESK_MASTER SET STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
				WHERE REQNO=@DOCNO
			END
		END
		IF (@APPRTYPE = 'IT_ENGG')	--FOR IT ENGINEER
		BEGIN
			IF (@STATUS = 5)	--REQUEST FORWARDED TO ANOTHER IT ENGINEER
			BEGIN
				UPDATE ITHELPDESK_MASTER SET IT_ENGG=@APPRID, STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
				WHERE REQNO=@DOCNO
			END
			ELSE IF (@STATUS = 6)	--APPROVE (PENDING FOR UAT)
			BEGIN
				UPDATE ITHELPDESK_MASTER SET PRIORITY=@PRIORITY, PROBLEM_CATG=@PROBCATG, SUB_CATG=@SUBCATG, SOLUTION=@SOLUTION,
				FINISH_DATE=GETDATE(), STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1, START_DATE=IIF(@STATUS=6, @DATE1, ''), END_DATE=IIF(@STATUS=6, @DATE2, '')
				WHERE REQNO=@DOCNO
			END
			ELSE
			BEGIN		--FOR REJECT/REVIEW BACK 
				UPDATE ITHELPDESK_MASTER SET STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1 WHERE REQNO=@DOCNO
			END
		END
		IF(@APPRTYPE = 'UAT')	--FOR USER ACCEPTANCE TESTING
		BEGIN
			UPDATE ITHELPDESK_MASTER SET STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1 WHERE REQNO=@DOCNO			
		END

        SELECT 2 AS FLAG 
    END

	IF (@ACTIVITY = 'GET_HELPDESK_DETAILED_REPORT')			--GET HELPDESK DETAILED REPORT (EXCEL)
    BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, PRIORITY, REQ_TYPE, dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG, dbo.FN_CODEDEF(24, SUB_CATG) AS SUB_CATG,
		CONVERT(VARCHAR, START_DATE, 20) AS START_DATE, CONVERT(VARCHAR, END_DATE, 20) AS END_DATE, SUBJECT, PROBLEM_DESCR, SOLUTION, DEPT_HOD + ' - ' + dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, IT_HOD + ' - ' + dbo.FN_EMPNAME(IT_HOD) AS IT_HOD, IT_ENGG + ' - ' + dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, IT_ENGG_AREA, 
		CONVERT(VARCHAR, FINISH_DATE, 20) AS FINISH_DATE, STATUS, dbo.FN_CODEDEF(21, STATUS) AS STATUSDESCR, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME
		FROM ITHELPDESK_MASTER WHERE CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE()) 
		AND STATUS=CASE WHEN @STATUS=20 THEN STATUS ELSE @STATUS END
		AND ISNULL(REQ_TYPE, '')=CASE WHEN @REQTYPE='0' THEN ISNULL(REQ_TYPE, '') ELSE @REQTYPE END
		ORDER BY 1 DESC
    END

	IF (@ACTIVITY = 'GET_HELPDESK_GRAPH_REPORT1')	--GET HELPDESK TOTAL REPORT (BY PROBLEM CATEGORY)
    BEGIN
		SELECT dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG, SUM(CLOSED_ISSUES) AS CLOSED_ISSUES, SUM(PENDING_ISSUES) AS PENDING_ISSUES
		FROM (
		SELECT PROBLEM_CATG, COUNT(*) AS CLOSED_ISSUES, 0 AS PENDING_ISSUES FROM ITHELPDESK_MASTER WHERE STATUS=7
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY PROBLEM_CATG
		UNION
		SELECT PROBLEM_CATG, 0, COUNT(*) AS PENDING_ISSUES FROM ITHELPDESK_MASTER WHERE STATUS IN (3,4,5)
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY PROBLEM_CATG
		) AS T  
		GROUP BY PROBLEM_CATG
		ORDER BY 1,2
    END

	IF (@ACTIVITY = 'GET_HELPDESK_ITENGG_REPORT1')	--GET HELPDESK TOTAL REPORT (BY IT_ENGG)
    BEGIN
		SELECT dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, SUM(CLOSED_ISSUES) AS CLOSED_ISSUES, SUM(PENDING_ISSUES) AS PENDING_ISSUES
		FROM (
		SELECT IT_ENGG, COUNT(*) AS CLOSED_ISSUES, 0 AS PENDING_ISSUES FROM ITHELPDESK_MASTER WHERE STATUS=7
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY IT_ENGG
		UNION
		SELECT IT_ENGG, 0, COUNT(*) AS PENDING_ISSUES FROM ITHELPDESK_MASTER WHERE STATUS=5
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY IT_ENGG
		) AS T  
		GROUP BY IT_ENGG
		ORDER BY 1,2
    END

	------------------------------------------------------------------USERID CREATE------------------------------------------------------------------------------------------------------------------------------------

	
	IF (@ACTIVITY = 'FILL_HOD_USERCREATE')	--FILL REQUEST APPROVER
    BEGIN
        SELECT @L_P1=dbo.FN_EMPADID(APPRID) FROM MST_EMPLOYEE WHERE ADID=@USERID OR EMPCODE=@USERID
		IF (@L_P1= 'NI00010')  --IF MD IS APPROVER THEN DIRECTLY GOES TO IT HOD
		BEGIN
			SELECT HODCODE AS CODE, dbo.FN_EMPNAME(HODCODE) AS NAME FROM MST_DEPTHOD WHERE ISACTIVE=1 AND DEPTCODE='DP0010' AND PLANT=dbo.FN_EMPPLANT(@USERID)
		END
		ELSE
		BEGIN
			SELECT HODCODE AS CODE, dbo.FN_EMPNAME(HODCODE) AS NAME FROM MST_DEPTHOD WHERE ISACTIVE=1 AND HODCODE<>@USERID AND DEPTCODE=dbo.FN_EMPDEPTCODE(@USERID) AND PLANT=dbo.FN_EMPPLANT(@USERID)
		END
    END

	IF (@ACTIVITY = 'GET_ITENGG_UID')	--GET IT ENGINEER's FOR USER ID CREATE		
    BEGIN
		SELECT @L_P1=PLANT, @L_P2=ID_TYPE FROM ITHELPDESK_USERID_CREATE WHERE REQNO=@DOCNO
		
		SELECT @L_P4=VALUE FROM MST_CONFIG WHERE MODULE='ITHELPDESK_USER_CREATE' AND (PLANT=@L_P1 OR PLANT='*') AND CATEGORY1=@L_P2

		IF (@L_P4 IS NOT NULL)
		BEGIN
			SELECT @L_P4 AS IT_ENGG
		END
		ELSE
		BEGIN
			SELECT 'NI00005' AS IT_ENGG
		END
    END

	IF (@ACTIVITY = 'USERID_CREATE')   --ADD/UPDATE
	BEGIN
		IF (@DOCNO > 0)
		BEGIN
			IF NOT EXISTS (SELECT * FROM ITHELPDESK_USERID_CREATE WHERE REQNO<>@DOCNO AND STATUS<=5 AND REQFOR_EMPCODE=@EMPCODE2 AND ID_TYPE=@PROBCATG)
			BEGIN
				UPDATE ITHELPDESK_USERID_CREATE SET PLANT=@PLANT, REQID=@EMPCODE, REQNAME=@NAME, DEPTCODE=@DEPT, CONTACTNO=@CONTACT, EMAIL=@EMAIL, REQ_FOR=@REQ_FOR, REQFOR_EMPCODE=@EMPCODE2, REQFOR_EMPNAME=@NAME2, ID_TYPE=@PROBCATG, EXT_EMAIL_ACCESS=@EMAIL_ACCESS,
				ADID_REQUIRED=@ADID_ACCESS, VPN_ACCESS=@VPN_ACCESS, ROLES=@ROLES, DESCRIPTION=@DESCR, DEPT_HOD=IIF(@STATUS=2, @APPRID, ''), IT_HOD=IIF(@STATUS=3, @APPRID, ''), STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@APPRTYPE
				WHERE REQNO=@DOCNO

				IF (@STATUS > 1)       
				BEGIN
					SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  ITHELPDESK_USERSCREATE_HISTORY WHERE REQNO=@DOCNO
					INSERT INTO ITHELPDESK_USERSCREATE_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS,  STATUSDESCR, TDATE)
									VALUES (@DOCNO, @L_NO, 'REQUESTOR', @USERID, @REMARKS, @STATUS, IIF(@STATUS=6, 'FINISH', 'POST'), GETDATE())
				END

				SELECT 2 AS FLAG, @DOCNO AS REQNO
			END
			ELSE
			BEGIN
				SELECT 3 AS FLAG, @DOCNO AS REQNO
			END
		END
		ELSE                                                                                                                                                  
		BEGIN
			IF NOT EXISTS (SELECT * FROM ITHELPDESK_USERID_CREATE WHERE STATUS<=5 AND REQFOR_EMPCODE=@EMPCODE2 AND ID_TYPE=@PROBCATG)
			BEGIN
				SELECT  @DOCNO=ISNULL(MAX(REQNO),0)+1  FROM  ITHELPDESK_USERID_CREATE
				INSERT INTO ITHELPDESK_USERID_CREATE(REQNO, PLANT, REQID, REQNAME, DEPTCODE, CONTACTNO, EMAIL, REQ_FOR, REQFOR_EMPCODE, REQFOR_EMPNAME, ID_TYPE, EXT_EMAIL_ACCESS, ADID_REQUIRED, VPN_ACCESS, ROLES, DESCRIPTION, DEPT_HOD, IT_HOD, STATUS, PENDING_WITH, APPRTYPE, USERID, TDATE)
									VALUES(@DOCNO, @PLANT, @EMPCODE, @NAME, @DEPT, @CONTACT, @EMAIL, @REQ_FOR, @EMPCODE2, @NAME2, @PROBCATG, @EMAIL_ACCESS, @ADID_ACCESS, @VPN_ACCESS, @ROLES, @DESCR, IIF(@STATUS=2, @APPRID, ''), IIF(@STATUS=3, @APPRID, ''), @STATUS, @APPRID, @APPRTYPE, @USERID, GETDATE())
				
				IF (@STATUS > 1)       
				BEGIN
					SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  ITHELPDESK_USERSCREATE_HISTORY WHERE REQNO=@DOCNO
					INSERT INTO ITHELPDESK_USERSCREATE_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS,  STATUSDESCR, TDATE)
									VALUES (@DOCNO, @L_NO, 'REQUESTOR', @USERID, @REMARKS, @STATUS, IIF(@STATUS=6, 'FINISH', 'POST'), GETDATE())
				END

				SELECT 1 AS FLAG, @DOCNO AS REQNO
			END
			ELSE
			BEGIN
				SELECT 3 AS FLAG, @DOCNO AS REQNO
			END
		END
	END



	IF (@ACTIVITY = 'GET_CREATE_USERS_BY_DOCNO')        --GET DEACTIVATE USERS DATA BY DOCNO
	BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, DEPTCODE, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, REQ_FOR, REQFOR_EMPCODE, REQFOR_EMPNAME, ID_TYPE, EXT_EMAIL_ACCESS, ADID_REQUIRED, VPN_ACCESS, ALLOCATED_ADID, ALLOCATED_EMAILID, ROLES, DESCRIPTION, 
		DEPT_HOD, IT_HOD, IT_ENGG, CORE_USER, STATUS, dbo.FN_CODEDEF(71, STATUS) AS STATUSDESCR, PENDING_WITH, APPRTYPE, USERID, FORMAT(TDATE, 'dd-MMM-yyyy') AS TDATE
		FROM ITHELPDESK_USERID_CREATE WHERE REQNO=@DOCNO
	END 

	IF (@ACTIVITY = 'FILL_CREATE_USERS_HISTORY')		--FILL CREATE USERS HISTORY	
    BEGIN
		SELECT REQNO AS REQUESTNO, SRNO, USERTYPE, ISNULL(USERID, '') AS USERID, ISNULL(dbo.FN_EMPNAME(USERID), '') AS EMPNAME, REMARKS, STATUS, STATUSDESCR, CAST(FORMAT(TDATE , 'dd-MMM-yyyy') AS VARCHAR) AS TDATE
		FROM ITHELPDESK_USERSCREATE_HISTORY WHERE REQNO=@DOCNO
    END  

	IF (@ACTIVITY = 'FILL_CREATE_USERS_VIEW_LIST')  --FILL USER CREATE VIEW LIST
	BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, REQ_FOR, REQFOR_EMPCODE AS EMPCODE, REQFOR_EMPNAME AS EMPNAME, ID_TYPE AS CATEGORY, EXT_EMAIL_ACCESS AS ACCESS, ADID_REQUIRED AS ADIDREQ, VPN_ACCESS AS VPN, ALLOCATED_ADID AS ADID, ALLOCATED_EMAILID AS EMAILID, ROLES, DESCRIPTION, STATUS, dbo.FN_CODEDEF(71, STATUS) AS STATUSDESCR,
		DEPT_HOD + ' - ' + dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, IT_HOD + ' - ' + dbo.FN_EMPNAME(IT_HOD) AS IT_HOD, IT_ENGG + ' - ' + dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, CORE_USER+ ' - ' + dbo.FN_EMPNAME(CORE_USER) AS COREUSER, USERID, 
		CAST(FORMAT(TDATE , 'dd-MMM-yyyy') AS VARCHAR) AS TDATE, PENDING_WITH, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME, APPRTYPE
		FROM ITHELPDESK_USERID_CREATE A WHERE @USERID IN (SELECT DISTINCT USERID FROM ITHELPDESK_USERSCREATE_HISTORY B WHERE B.REQNO=A.REQNO)
		AND STATUS=CASE WHEN @STATUS IN (0,20) THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY 1 DESC
	END


	IF (@ACTIVITY = 'FILL_CREATE_USERS_PENDING_LIST')  --FILL USER CREATE PENDING LIST
	BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, REQ_FOR, REQFOR_EMPCODE AS EMPCODE, REQFOR_EMPNAME AS EMPNAME, ID_TYPE AS CATEGORY, EXT_EMAIL_ACCESS AS ACCESS, ADID_REQUIRED AS ADIDREQ, VPN_ACCESS AS VPN, ALLOCATED_ADID AS ADID, ALLOCATED_EMAILID AS EMAILID, ROLES, DESCRIPTION, STATUS, dbo.FN_CODEDEF(71, STATUS) AS STATUSDESCR, 
		DEPT_HOD + ' - ' + dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, IT_HOD + ' - ' + dbo.FN_EMPNAME(IT_HOD) AS IT_HOD, IT_ENGG + ' - ' + dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, CORE_USER+ ' - ' + dbo.FN_EMPNAME(CORE_USER) AS COREUSER, USERID, 
		CAST(FORMAT(TDATE , 'dd-MMM-yyyy') AS VARCHAR) AS TDATE, PENDING_WITH, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME, APPRTYPE
		FROM ITHELPDESK_USERID_CREATE WHERE PENDING_WITH=@USERID
		AND STATUS=CASE WHEN @STATUS IN (0,20) THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY 1 DESC
	END

	IF (@ACTIVITY = 'GET_PENDING_USERS_REQ_COUNT')	--GET PENDING REQUESTS
	BEGIN
		SELECT COUNT(*) AS TOTAL FROM ITHELPDESK_USERID_CREATE WHERE PENDING_WITH = @USERID
	END
		
	IF (@ACTIVITY = 'GET_ALL_USERS_REQ_COUNT')	--GET ALL REQUEST COUNT
	BEGIN
		SELECT COUNT(*) AS TOTAL FROM ITHELPDESK_USERID_CREATE A WHERE @USERID IN (SELECT DISTINCT USERID FROM ITHELPDESK_USERSCREATE_HISTORY B WHERE B.REQNO=A.REQNO)
	END

	IF (@ACTIVITY = 'CANCEL_USER_REQUEST')		--CANCEL USERS REQUEST
	BEGIN
		UPDATE ITHELPDESK_USERID_CREATE SET STATUS = 8, PENDING_WITH='', APPRTYPE='' WHERE REQNO=@DOCNO 

		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  ITHELPDESK_USERSCREATE_HISTORY WHERE REQNO=@DOCNO
		INSERT INTO ITHELPDESK_USERSCREATE_HISTORY(REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS, STATUSDESCR, TDATE)
							VALUES (@DOCNO, @L_NO, 'REQUESTOR', @USERID, 'CANCELLED', 8, 'CANCELLED', GETDATE())
	END

	IF (@ACTIVITY = 'GET_GRAPH_BY_IDTYPE')	--GET  TOTAL CREATED ID's
    BEGIN
		SELECT ID_TYPE AS TYPE, COUNT(*) AS TOTAL FROM ITHELPDESK_USERID_CREATE WHERE STATUS=6 AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE3, '2022-04-01') AND ISNULL(@DATE4, GETDATE()) GROUP BY ID_TYPE
	END

	IF (@ACTIVITY = 'GET_GRAPH_BY_DEPTWISE')	--GET  TOTAL ID BY DEPTWISE
	BEGIN
		SELECT dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, COUNT(*) AS TOTAL FROM ITHELPDESK_USERID_CREATE WHERE STATUS=6 AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE5, '2022-04-01') AND ISNULL(@DATE6, GETDATE()) GROUP BY DEPTCODE
	END

	IF (@ACTIVITY = 'FILL_CREATE_USERS_REPORT_LIST')  --FILL USER CREATE REPORT VIEW LIST
	BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, REQ_FOR, REQFOR_EMPCODE AS EMPCODE, REQFOR_EMPNAME AS EMPNAME, ID_TYPE AS CATEGORY, EXT_EMAIL_ACCESS AS ACCESS, ADID_REQUIRED AS ADIDREQ, VPN_ACCESS AS VPN, ALLOCATED_ADID AS ADID, ALLOCATED_EMAILID AS EMAILID, ROLES, DESCRIPTION, STATUS, dbo.FN_CODEDEF(71, STATUS) AS STATUSDESCR,
		DEPT_HOD + ' - ' + dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, IT_HOD + ' - ' + dbo.FN_EMPNAME(IT_HOD) AS IT_HOD, IT_ENGG + ' - ' + dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, CORE_USER+ ' - ' + dbo.FN_EMPNAME(CORE_USER) AS COREUSER, USERID, 
		CAST(FORMAT(TDATE , 'dd-MMM-yyyy') AS VARCHAR) AS TDATE, PENDING_WITH, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME, APPRTYPE
		FROM ITHELPDESK_USERID_CREATE A WHERE 
	     STATUS=CASE WHEN @STATUS IN (0,20) THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY 1 DESC
	END


	IF (@ACTIVITY = 'APPROVE_USER_REQUEST')		--APPROVE REQUEST 		(Done)
    BEGIN
		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  ITHELPDESK_USERSCREATE_HISTORY WHERE REQNO=@DOCNO

        INSERT INTO ITHELPDESK_USERSCREATE_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS, STATUSDESCR)
                           VALUES (@DOCNO, @L_NO, @APPRTYPE, @USERID, @REMARKS, @STATUS, @STATUS_DESCR)


		IF(@APPRTYPE = 'HOD')	--FOR DEPT HOD
		BEGIN
			UPDATE ITHELPDESK_USERID_CREATE SET IT_HOD=IIF(@STATUS=3, @APPRID, IT_HOD), STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
			WHERE REQNO=@DOCNO
		END

		IF(@APPRTYPE = 'IT_HOD')	--FOR IT HOD
		BEGIN
			UPDATE ITHELPDESK_USERID_CREATE SET IT_ENGG=IIF(@STATUS=4, @APPRID, IT_ENGG), STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
			WHERE REQNO=@DOCNO
		END
		
		IF (@APPRTYPE = 'IT_ENGG')	--FOR IT ENGINEER
		BEGIN
			IF (@STATUS = 4)	--REQUEST FORWARDED TO ANOTHER IT ENGINEER
			BEGIN
				UPDATE ITHELPDESK_USERID_CREATE SET IT_ENGG=@APPRID, STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
				WHERE REQNO=@DOCNO
			END
			ELSE IF (@STATUS = 5)	--PENDING WITH CORE USER
			BEGIN
				UPDATE ITHELPDESK_USERID_CREATE SET CORE_USER=@APPRID, STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
				WHERE REQNO=@DOCNO
			END
			ELSE IF (@STATUS = 6)	--COMPLETED
			BEGIN
				UPDATE ITHELPDESK_USERID_CREATE SET STATUS=@STATUS, ALLOCATED_ADID=@PARAM2, ALLOCATED_EMAILID=@PARAM3, PENDING_WITH='', APPRTYPE=''
				WHERE REQNO=@DOCNO
			END
			ELSE
			BEGIN		--FOR REJECT/REVIEW BACK 
				UPDATE ITHELPDESK_USERID_CREATE SET STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1 WHERE REQNO=@DOCNO
			END
		END

		IF(@APPRTYPE = 'CORE_USER')	--FOR CORE USER
		BEGIN
			UPDATE ITHELPDESK_USERID_CREATE SET STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
			WHERE REQNO=@DOCNO
		END
		
        SELECT 2 AS FLAG 
    END



END
GO
/****** Object:  StoredProcedure [dbo].[usp_ITHelpDesk_2]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[usp_ITHelpDesk_2]
(
	@ACTIVITY           VARCHAR(50)='',
	@DOCNO              INT=0,
	@PLANT              VARCHAR(20)='',
	@EMPCODE            VARCHAR(50)='',
	@NAME               VARCHAR(50)='',
	@DEPT               VARCHAR(50)='',
	@EMAIL              VARCHAR(50)='',
	@CONTACT            VARCHAR(50)='',
	@EXTNO				VARCHAR(50)='',
	@PRIORITY           VARCHAR(50)='',
	@REQTYPE            VARCHAR(50)='',
	@PROBCATG           VARCHAR(50)='',
	@SUBCATG            VARCHAR(50)='',
	@FILENAME           VARCHAR(100)='',            
	@SUBJECT            VARCHAR(500)='',
	@DESCR              VARCHAR(2000)='',
	@SOLUTION           VARCHAR(2000)='',
	

	@REMARKS            VARCHAR(2000)='',
	@STATUS             VARCHAR(50)='',
	@STATUS_DESCR       VARCHAR(50)='',
	@USERID             VARCHAR(50)='',
	@APPRID				VARCHAR(50)='',	
	@APPRTYPE			VARCHAR(50)='',	
	@DATE1			    DATETIME='',
	@DATE2			    DATETIME='',
	@PARAM1				VARCHAR(100)='',
	@PARAM2				VARCHAR(100)='',
	@PARAM3				VARCHAR(100)='',
	@PARAM4				VARCHAR(100)=''
)
AS
BEGIN
DECLARE @L_NO INT, @L_P1 VARCHAR(50), @L_P2 VARCHAR(50), @L_P3 VARCHAR(50), @L_P4 VARCHAR(50)

	IF (@ACTIVITY = 'FILL_HOD')	--FILL REQUEST APPROVER
    BEGIN
        SELECT @L_P1=dbo.FN_EMPADID(APPRID) FROM MST_EMPLOYEE WHERE ADID=@USERID OR EMPCODE=@USERID
		IF (@L_P1= 'NI00010')  --IF MD IS APPROVER THEN DIRECTLY GOES TO IT HOD
		BEGIN
			SELECT HODCODE AS CODE, dbo.FN_EMPNAME(HODCODE) AS NAME FROM MST_DEPTHOD WHERE ISACTIVE=1 AND DEPTCODE='DP0010' AND PLANT=dbo.FN_EMPPLANT(@USERID)
		END
		ELSE
		BEGIN
			SELECT dbo.FN_EMPADID(APPRID) AS CODE, APPRNAME AS NAME FROM MST_EMPLOYEE WHERE (ISNULL(ADID,'')<>'' AND ADID=@USERID) OR (ISNULL(EMPCODE,'')<>'' AND EMPCODE=@USERID)
			UNION
			SELECT HODCODE AS CODE, dbo.FN_EMPNAME(HODCODE) AS NAME FROM MST_DEPTHOD WHERE ISACTIVE=1 AND HODCODE<>@USERID AND DEPTCODE=dbo.FN_EMPDEPTCODE(@USERID) AND PLANT=dbo.FN_EMPPLANT(@USERID)
		END
    END  

	IF (@ACTIVITY = 'GET_IT_HOD')	--GET IT HOD
    BEGIN
		SELECT HODCODE FROM MST_DEPTHOD WHERE ISACTIVE=1 AND DEPTCODE='DP0010' AND PLANT=dbo.FN_EMPPLANT(@USERID)
	END

	IF (@ACTIVITY = 'ADD_REQUEST')   --ADD/UPDATE
	BEGIN
		IF (@DOCNO > 0)
		BEGIN
			UPDATE ITHELPDESK_MASTER SET PLANT=@PLANT, REQID=@EMPCODE, REQNAME=@NAME, DEPTCODE=@DEPT, CONTACTNO=@CONTACT, EXTNO=@EXTNO, EMAIL=@EMAIL, REQ_TYPE=@REQTYPE, PRIORITY=@PRIORITY, 
			PROBLEM_CATG=@PROBCATG, SUB_CATG=@SUBCATG, FILENAME=@FILENAME, SUBJECT=@SUBJECT, PROBLEM_DESCR=@DESCR, SOLUTION=@SOLUTION, START_DATE=IIF(@REQTYPE='Task', @DATE1, NULL), END_DATE=IIF(@REQTYPE='Task', @DATE2, NULL), 
			STATUS=@STATUS, IT_ENGG=IIF(@REQTYPE='Task', @USERID, ''), DEPT_HOD=IIF(@STATUS=2, @APPRID, ''), IT_HOD=IIF(@STATUS=3, @APPRID, ''), PENDING_WITH=@APPRID, APPRTYPE=@APPRTYPE
			WHERE REQNO=@DOCNO
			SELECT 2 AS FLAG, @DOCNO AS REQNO
		END
		ELSE                                                                                                                                                             
		BEGIN
		    SELECT  @DOCNO=ISNULL(MAX(REQNO),0)+1  FROM  ITHELPDESK_MASTER
			INSERT INTO ITHELPDESK_MASTER (REQNO, PLANT, REQID, REQNAME, DEPTCODE, CONTACTNO, EXTNO, EMAIL, PRIORITY, REQ_TYPE, PROBLEM_CATG, SUB_CATG, START_DATE, END_DATE, FILENAME, 
											SUBJECT, PROBLEM_DESCR, SOLUTION, STATUS, DEPT_HOD, IT_HOD, IT_ENGG, PENDING_WITH, APPRTYPE, FINISH_DATE, USERID, TDATE )

								VALUES(@DOCNO, @PLANT, @EMPCODE, @NAME, @DEPT, @CONTACT, @EXTNO, @EMAIL, @PRIORITY, @REQTYPE, @PROBCATG, @SUBCATG, IIF(@REQTYPE='Task', @DATE1, NULL), IIF(@REQTYPE='Task', @DATE2, NULL), @FILENAME, 
											@SUBJECT, @DESCR, @SOLUTION, @STATUS, IIF(@STATUS=2, @APPRID, ''), IIF(@STATUS=3, @APPRID, ''), IIF(@REQTYPE='Task', @USERID, ''), @APPRID, @APPRTYPE, IIF(@STATUS=7, GETDATE(), NULL), @USERID, GETDATE() )

			SELECT 1 AS FLAG, @DOCNO AS REQNO
		END

		IF (@STATUS > 1)       -- ADD REQUEST
		BEGIN
			SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  ITHELPDESK_HISTORY WHERE REQNO=@DOCNO
			INSERT INTO ITHELPDESK_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS,  STATUSDESCR, TDATE)
							VALUES (@DOCNO, @L_NO, 'REQUESTOR', @USERID, @REMARKS, @STATUS, IIF(@STATUS=7, 'Finish', 'Post'), GETDATE())
		END
	END

	IF (@ACTIVITY = 'GET_HELPDESK_BY_DOCNO')        --GET HELPDESK DATA BY DOCNO
    BEGIN
        SELECT REQNO, PLANT, REQID, REQNAME, DEPTCODE, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EXTNO, EMAIL, PRIORITY, REQ_TYPE, PROBLEM_CATG, dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG_DESCR,
        SUB_CATG, dbo.FN_CODEDEF(24, SUB_CATG) AS SUB_CATG_DESCR, FILENAME, SUBJECT, PROBLEM_DESCR, ISNULL(SOLUTION , '') AS SOLUTION, FORMAT(START_DATE, 'dd-MMM-yyyy') AS START_DATE, CAST(START_DATE AS TIME) AS START_TIME,
		FORMAT(END_DATE, 'dd-MMM-yyyy') AS END_DATE, CAST(END_DATE AS TIME) AS END_TIME, DEPT_HOD, IT_HOD, IT_ENGG, IT_ENGG_AREA, 
		STATUS, dbo.FN_CODEDEF(21, STATUS) AS STATUSDESCR, PENDING_WITH, APPRTYPE, USERID, FORMAT(TDATE, 'dd-MMM-yyyy') AS TDATE
        FROM ITHELPDESK_MASTER WHERE REQNO=@DOCNO
    END 

	IF (@ACTIVITY = 'FILL_HELPDESK_HISTORY')		--FILL HELPDESK HISTORY	
    BEGIN
        SELECT REQNO AS REQUESTNO, SRNO, USERTYPE, ISNULL(USERID, '') AS USERID, ISNULL(dbo.FN_EMPNAME(USERID), '') AS EMPNAME, REMARKS, STATUS, STATUSDESCR, CONVERT(VARCHAR, TDATE, 20) AS TDATE
        FROM ITHELPDESK_HISTORY WHERE REQNO=@DOCNO
    END  

	IF (@ACTIVITY = 'FILL_HELPDESK_VIEW_LIST')  --FILL HELPDESK VIEW LIST
	BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, PRIORITY, REQ_TYPE, dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG, dbo.FN_CODEDEF(24, SUB_CATG) AS SUB_CATG,
		CONVERT(VARCHAR, START_DATE, 20) AS START_DATE, CONVERT(VARCHAR, END_DATE, 20) AS END_DATE,  DATEDIFF(MINUTE, START_DATE, END_DATE) AS TOTAL_TIME, SUBJECT, PROBLEM_DESCR, SOLUTION, DEPT_HOD + ' - ' + dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, IT_HOD + ' - ' + dbo.FN_EMPNAME(IT_HOD) AS IT_HOD, IT_ENGG + ' - ' + dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, IT_ENGG_AREA, 
		CONVERT(VARCHAR, FINISH_DATE, 20) AS FINISH_DATE, STATUS, dbo.FN_CODEDEF(21, STATUS) AS STATUSDESCR, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE, PENDING_WITH, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME, APPRTYPE
		FROM ITHELPDESK_MASTER A WHERE @USERID IN (SELECT DISTINCT USERID FROM ITHELPDESK_HISTORY B WHERE B.REQNO=A.REQNO)
		AND STATUS=CASE WHEN @STATUS IN (0,20) THEN STATUS ELSE @STATUS END
		AND ISNULL(REQ_TYPE, '')=CASE WHEN @REQTYPE='0' THEN ISNULL(REQ_TYPE, '') ELSE @REQTYPE END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY 1 DESC
	END

	IF (@ACTIVITY = 'FILL_HELPDESK_PENDING_LIST')  --FILL HELPDESK PENDING LIST
	BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, PRIORITY, REQ_TYPE, dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG, dbo.FN_CODEDEF(24, SUB_CATG) AS SUB_CATG,
		CONVERT(VARCHAR, START_DATE, 20) AS START_DATE, CONVERT(VARCHAR, END_DATE, 20) AS END_DATE, DATEDIFF(MINUTE, START_DATE, END_DATE) AS TOTAL_TIME, SUBJECT, PROBLEM_DESCR, SOLUTION, DEPT_HOD + ' - ' + dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, IT_HOD + ' - ' + dbo.FN_EMPNAME(IT_HOD) AS IT_HOD, IT_ENGG + ' - ' + dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, IT_ENGG_AREA, 
		CONVERT(VARCHAR, FINISH_DATE, 20) AS FINISH_DATE, STATUS, dbo.FN_CODEDEF(21, STATUS) AS STATUSDESCR, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE, PENDING_WITH, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME, APPRTYPE
		FROM ITHELPDESK_MASTER WHERE PENDING_WITH=@USERID
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY 1 DESC
	END

	IF (@ACTIVITY = 'FILL_HELPDESK_PENDING_IT_LIST')  --FILL HELPDESK PENDING WITH IT ADMIN LIST
	BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, PRIORITY, REQ_TYPE, dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG, dbo.FN_CODEDEF(24, SUB_CATG) AS SUB_CATG,
		CONVERT(VARCHAR, START_DATE, 20) AS START_DATE, CONVERT(VARCHAR, END_DATE, 20) AS END_DATE, DATEDIFF(MINUTE, START_DATE, END_DATE) AS TOTAL_TIME, SUBJECT, PROBLEM_DESCR, SOLUTION, DEPT_HOD + ' - ' + dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, IT_HOD + ' - ' + dbo.FN_EMPNAME(IT_HOD) AS IT_HOD, IT_ENGG + ' - ' + dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, IT_ENGG_AREA, 
		CONVERT(VARCHAR, FINISH_DATE, 20) AS FINISH_DATE, STATUS, dbo.FN_CODEDEF(21, STATUS) AS STATUSDESCR, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE, PENDING_WITH, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME, 'IT_ADMIN' AS APPRTYPE
		FROM ITHELPDESK_MASTER WHERE STATUS=4
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY 1 DESC
	END

	IF (@ACTIVITY = 'GET_PENDING_REQ_COUNT')	--GET PENDING REEQUESTS
    BEGIN
        SELECT COUNT(*) AS TOTAL FROM ITHELPDESK_MASTER WHERE PENDING_WITH = @USERID
    END  

	IF (@ACTIVITY = 'GET_PENDING_REQ_ITADMIN_COUNT')	--GET PENDING REEQUESTS FROM IT ADMIN
    BEGIN
        SELECT COUNT(*) AS TOTAL FROM ITHELPDESK_MASTER WHERE STATUS = 4
    END

	IF (@ACTIVITY = 'GET_ALL_REQ_COUNT')	--GET ALL REQUEST COUNT
    BEGIN
		SELECT COUNT(*) AS TOTAL FROM ITHELPDESK_MASTER A WHERE @USERID IN (SELECT DISTINCT USERID FROM ITHELPDESK_HISTORY B WHERE B.REQNO=A.REQNO)
    END

	IF (@ACTIVITY = 'CANCEL_HELPDESK_REQUEST')		--CANCEL HELPDESK REQUEST
    BEGIN
        UPDATE ITHELPDESK_MASTER SET STATUS = 9, PENDING_WITH='', APPRTYPE='' WHERE REQNO=@DOCNO 

        SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  ITHELPDESK_HISTORY WHERE REQNO=@DOCNO
        INSERT INTO ITHELPDESK_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS, STATUSDESCR, TDATE)
							VALUES (@DOCNO, @L_NO, 'REQUESTOR', @USERID, 'CANCELLED', 9, 'CANCELLED', GETDATE())
    END
	

	IF (@ACTIVITY = 'FILL_IT_ENGINEER')	--FILL IT ENGINEER's 		(Done)
    BEGIN
		SELECT ADID AS CODE, ADID +' - '+ EMPNAME + ' (' + EMPCODE + ')' AS NAME FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND ADID IS NOT NULL AND DEPTCODE= 'DP0010' ORDER BY EMPNAME
    END

	IF (@ACTIVITY = 'GET_IT_ENGINEER')	--GET IT ENGINEER's 		(Done)
    BEGIN
		SELECT @L_P1=PLANT, @L_P2=dbo.FN_CODEDEF(23, PROBLEM_CATG), @L_P3=dbo.FN_CODEDEF(24, SUB_CATG) FROM ITHELPDESK_MASTER WHERE REQNO=@DOCNO
		
		SELECT @L_P4=VALUE FROM MST_CONFIG WHERE MODULE='ITHELPDESK' AND (PLANT=@L_P1 OR PLANT='*') AND CATEGORY1=@L_P2 AND (CATEGORY2=@L_P3 OR CATEGORY2='*')

		IF (@L_P4 IS NOT NULL)
		BEGIN
			SELECT @L_P4 AS IT_ENGG
		END
		ELSE
		BEGIN
			SELECT 'NI00005' AS IT_ENGG
		END
    END

	IF (@ACTIVITY = 'APPROVE_REQUEST')		--APPROVE REQUEST 		(Done)
    BEGIN
		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  ITHELPDESK_HISTORY WHERE REQNO=@DOCNO

        INSERT INTO ITHELPDESK_HISTORY (REQNO, SRNO, USERTYPE, USERID, REMARKS, STATUS, STATUSDESCR)
                           VALUES (@DOCNO, @L_NO, @APPRTYPE, @USERID, @REMARKS, @STATUS, @STATUS_DESCR)


		IF(@APPRTYPE = 'HOD')	--FOR DEPT HOD
		BEGIN
			UPDATE ITHELPDESK_MASTER SET IT_HOD=IIF(@STATUS=3, @APPRID, IT_HOD), STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
			WHERE REQNO=@DOCNO
		END
		IF(@APPRTYPE = 'IT_HOD')	--FOR IT HOD
		BEGIN
			UPDATE ITHELPDESK_MASTER SET IT_ENGG=IIF(@STATUS=5, @APPRID, IT_ENGG), STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
			WHERE REQNO=@DOCNO
		END
		IF(@APPRTYPE = 'IT_ADMIN')	--FOR IT ADMIN
		BEGIN
			IF(@STATUS = 5)
			BEGIN
				UPDATE ITHELPDESK_MASTER SET PRIORITY=@PRIORITY, PROBLEM_CATG=@PROBCATG, SUB_CATG=@SUBCATG, IT_ENGG=@APPRID, IT_ENGG_AREA=@PARAM2,
				STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
				WHERE REQNO=@DOCNO
			END
			ELSE		--FOR REJECT/REVIEW BACK 
			BEGIN
				UPDATE ITHELPDESK_MASTER SET STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
				WHERE REQNO=@DOCNO
			END
		END
		IF (@APPRTYPE = 'IT_ENGG')	--FOR IT ENGINEER
		BEGIN
			IF (@STATUS = 5)	--REQUEST FORWARDED TO ANOTHER IT ENGINEER
			BEGIN
				UPDATE ITHELPDESK_MASTER SET IT_ENGG=@APPRID, STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1
				WHERE REQNO=@DOCNO
			END
			ELSE IF (@STATUS = 6)	--APPROVE (PENDING FOR UAT)
			BEGIN
				UPDATE ITHELPDESK_MASTER SET PRIORITY=@PRIORITY, PROBLEM_CATG=@PROBCATG, SUB_CATG=@SUBCATG, SOLUTION=@SOLUTION,
				FINISH_DATE=GETDATE(), STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1, START_DATE=IIF(@STATUS=6, @DATE1, ''), END_DATE=IIF(@STATUS=6, @DATE2, '')
				WHERE REQNO=@DOCNO
			END
			ELSE
			BEGIN		--FOR REJECT/REVIEW BACK 
				UPDATE ITHELPDESK_MASTER SET STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1 WHERE REQNO=@DOCNO
			END
		END
		IF(@APPRTYPE = 'UAT')	--FOR USER ACCEPTANCE TESTING
		BEGIN
			UPDATE ITHELPDESK_MASTER SET STATUS=@STATUS, PENDING_WITH=@APPRID, APPRTYPE=@PARAM1 WHERE REQNO=@DOCNO			
		END

        SELECT 2 AS FLAG 
    END


	IF (@ACTIVITY = 'GET_HELPDESK_DETAILED_REPORT')			--GET HELPDESK DETAILED REPORT (EXCEL)
    BEGIN
		SELECT REQNO, PLANT, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, EMAIL, PRIORITY, REQ_TYPE, dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG, dbo.FN_CODEDEF(24, SUB_CATG) AS SUB_CATG,
		CONVERT(VARCHAR, START_DATE, 20) AS START_DATE, CONVERT(VARCHAR, END_DATE, 20) AS END_DATE, DATEDIFF(MINUTE, START_DATE, END_DATE) AS TOTAL_TIME, SUBJECT, PROBLEM_DESCR, SOLUTION, DEPT_HOD + ' - ' + dbo.FN_EMPNAME(DEPT_HOD) AS DEPT_HOD, IT_HOD + ' - ' + dbo.FN_EMPNAME(IT_HOD) AS IT_HOD, IT_ENGG + ' - ' + dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, IT_ENGG_AREA, 
		CONVERT(VARCHAR, FINISH_DATE, 20) AS FINISH_DATE, STATUS, dbo.FN_CODEDEF(21, STATUS) AS STATUSDESCR, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME
		FROM ITHELPDESK_MASTER WHERE CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE()) 
		AND STATUS=CASE WHEN @STATUS=20 THEN STATUS ELSE @STATUS END
		AND ISNULL(REQ_TYPE, '')=CASE WHEN @REQTYPE='0' THEN ISNULL(REQ_TYPE, '') ELSE @REQTYPE END
		ORDER BY 1 DESC
    END

	IF (@ACTIVITY = 'GET_HELPDESK_GRAPH_REPORT1')	--GET HELPDESK TOTAL REPORT (BY PROBLEM CATEGORY)
    BEGIN
		SELECT dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG, SUM(CLOSED_ISSUES) AS CLOSED_ISSUES, SUM(PENDING_ISSUES) AS PENDING_ISSUES
		FROM (
		SELECT PROBLEM_CATG, COUNT(*) AS CLOSED_ISSUES, 0 AS PENDING_ISSUES FROM ITHELPDESK_MASTER WHERE STATUS=7
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY PROBLEM_CATG
		UNION
		SELECT PROBLEM_CATG, 0, COUNT(*) AS PENDING_ISSUES FROM ITHELPDESK_MASTER WHERE STATUS IN (3,4,5)
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY PROBLEM_CATG
		) AS T  
		GROUP BY PROBLEM_CATG
		ORDER BY 1,2
    END

	IF (@ACTIVITY = 'GET_HELPDESK_ITENGG_REPORT1')	--GET HELPDESK TOTAL REPORT (BY IT_ENGG)
    BEGIN
		SELECT dbo.FN_EMPNAME(IT_ENGG) AS IT_ENGG, SUM(CLOSED_ISSUES) AS CLOSED_ISSUES, SUM(PENDING_ISSUES) AS PENDING_ISSUES
		FROM (
		SELECT IT_ENGG, COUNT(*) AS CLOSED_ISSUES, 0 AS PENDING_ISSUES FROM ITHELPDESK_MASTER WHERE STATUS=7
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY IT_ENGG
		UNION
		SELECT IT_ENGG, 0, COUNT(*) AS PENDING_ISSUES FROM ITHELPDESK_MASTER WHERE STATUS=5
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-08-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY IT_ENGG
		) AS T  
		GROUP BY IT_ENGG
		ORDER BY 1,2
    END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_KAIZEN]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_KAIZEN]
(
@ACTIVITY				VARCHAR(100)='',
@DOCNO					INT=0,
@KAIZEN_NAME			VARCHAR(200)='',
@EMPCODE				VARCHAR(50)='',
@EMPNAME				VARCHAR(50)='',
@DEPTCODE				VARCHAR(10)='',
@PLANT					VARCHAR(20)='',
@IMPACT					VARCHAR(100)='',
@FINYEAR				VARCHAR(10)='',
@YR						VARCHAR(10)='',
@MON					VARCHAR(10)='',
@MACAREA				VARCHAR(100)='',
@HD_DONE				VARCHAR(10)='',
@CIRCLENO				VARCHAR(10)='',
@RESP_PILLAR			VARCHAR(50)='',
@KAIZEN_TYPE			VARCHAR(100)='',
@MP_WORTHY				VARCHAR(10)='',
@COST_SAVING			VARCHAR(10)='',
@FILENAME				VARCHAR(100)='',
@REMARKS				VARCHAR(2000)='',

@STATUS					INT=0,
@STATUS_DESCR			VARCHAR(50)='',
@USERID					VARCHAR(50)='',
@APPRID					VARCHAR(50)='',
@PARAM1					VARCHAR(100)='',
@PARAM2					VARCHAR(100)='',
@DATE1					VARCHAR(30)		= NULL,
@DATE2					VARCHAR(30)		= NULL
)

AS
BEGIN
SET NOCOUNT ON;
DECLARE @L_NO INT, @L_P1 VARCHAR(200)

--------------------------------- KAIZEN SYSTEM -----------------------------------

	IF(@ACTIVITY = 'ADD_UPD_KAIZEN')
	BEGIN
		IF (@DOCNO > 0)
		BEGIN			
			UPDATE KAIZEN_MASTER SET KAIZEN_NAME=@KAIZEN_NAME, EMPCODE=@EMPCODE, EMPNAME=@EMPNAME, DEPTCODE=@DEPTCODE, CIRCLENO=@CIRCLENO, PLANT=@PLANT, IMPACT=@IMPACT, FINYEAR=@FINYEAR, 
			YR=@YR, MON=@MON, MACHINE_AREA=@MACAREA, HD_DONE=@HD_DONE, RESP_PILLAR=@RESP_PILLAR, KAIZEN_TYPE=@KAIZEN_TYPE, MP_WORTHY=@MP_WORTHY, COST_SAVING=@COST_SAVING, 
			FILENAME=@FILENAME, STATUS=@STATUS, APPRID=@APPRID
			WHERE DOCNO=@DOCNO

			SELECT @DOCNO AS DOCNO, 2 AS FLAG 
		END
		ELSE
		BEGIN
			SELECT  @DOCNO=ISNULL(MAX(DOCNO),0)+1 FROM  KAIZEN_MASTER

			INSERT INTO KAIZEN_MASTER(DOCNO, KAIZEN_NAME, EMPCODE, EMPNAME, DEPTCODE, CIRCLENO, PLANT, IMPACT, FINYEAR, YR, MON, MACHINE_AREA, HD_DONE, RESP_PILLAR,  MP_WORTHY, COST_SAVING,APPRID, FILENAME, 
									STATUS,  USERID, TDATE, KAIZEN_TYPE)
							VALUES (@DOCNO, @KAIZEN_NAME, @EMPCODE, @EMPNAME, @DEPTCODE, @CIRCLENO, @PLANT, @IMPACT, @FINYEAR, @YR, @MON, @MACAREA, @HD_DONE, @RESP_PILLAR, @MP_WORTHY, @COST_SAVING,@APPRID,@FILENAME, 
									@STATUS, @USERID, GETDATE(),@KAIZEN_TYPE)	
		
			SELECT @DOCNO AS DOCNO, 1 AS FLAG 
		END

		IF (@STATUS > 1)  
		BEGIN
			SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  KAIZEN_HISTORY WHERE DOCNO=@DOCNO
			INSERT INTO KAIZEN_HISTORY (DOCNO, SRNO, USERTYPE, USERID, REMARKS, STATUS,  STATUSDESCR, TDATE)
							VALUES (@DOCNO, @L_NO, 'REQUESTOR', @USERID, @REMARKS, @STATUS, 'Post', GETDATE())
		END
	END

	IF(@ACTIVITY = 'GET_KAIZEN_BY_DOCNO') 
	BEGIN
		SELECT DOCNO, REG_NO, KAIZEN_NAME, EMPCODE, EMPNAME, DEPTCODE, DBO.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CIRCLENO, PLANT, IMPACT, FINYEAR, YR, MON, MACHINE_AREA, 
		HD_DONE, RESP_PILLAR, KAIZEN_TYPE, MP_WORTHY, COST_SAVING, FILENAME, STATUS, USERID, TDATE, APPRID, DBO.FN_EMPNAME(APPRID) AS APPRNAME, APPRDATE
		FROM KAIZEN_MASTER WHERE DOCNO=@DOCNO
	END

	IF (@ACTIVITY = 'FILL_HISTORY')		--FILL KAIZEN HISTORY
    BEGIN
        SELECT DOCNO, SRNO, USERTYPE, USERID, ISNULL(dbo.FN_EMPNAME(USERID), '') AS EMPNAME, REMARKS, STATUS, STATUSDESCR, CONVERT(VARCHAR, TDATE, 20) AS TDATE
        FROM KAIZEN_HISTORY WHERE DOCNO=@DOCNO
    END    

	IF(@ACTIVITY = 'FILL_KAIZEN_LIST')	--FILL KAIZEN'S
	BEGIN
		SELECT DOCNO, REG_NO, KAIZEN_NAME, EMPCODE, EMPNAME, DEPTCODE, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CIRCLENO, PLANT, IMPACT, FINYEAR, YR, MON, MACHINE_AREA, HD_DONE, RESP_PILLAR, 
		KAIZEN_TYPE, MP_WORTHY, COST_SAVING, STATUS, dbo.FN_CODEDEF(31, STATUS) AS STATUS_DESCR, USERID, dbo.FN_EMPNAME(USERID) AS USERNAME, CONVERT(VARCHAR, TDATE, 23) AS TDATE, 
		APPRID, dbo.FN_EMPNAME(APPRID) AS APPRNAME, CONVERT(VARCHAR, APPRDATE, 20) AS APPRDATE, USERTYPE, PENDING_WITH
		FROM (
		SELECT DOCNO, REG_NO, KAIZEN_NAME, EMPCODE, EMPNAME, DEPTCODE, CIRCLENO, PLANT, IMPACT, FINYEAR, YR, MON, MACHINE_AREA, HD_DONE, RESP_PILLAR, 
		KAIZEN_TYPE, MP_WORTHY, COST_SAVING, STATUS, USERID, TDATE, APPRID, APPRDATE, 'REQUESTOR' AS USERTYPE, USERID AS PENDING_WITH 
		FROM KAIZEN_MASTER WHERE USERID=@USERID 
		AND STATUS=CASE WHEN @STATUS=0 THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2021-04-01') AND ISNULL(@DATE2, GETDATE())
		UNION
		SELECT DOCNO, REG_NO, KAIZEN_NAME, EMPCODE, EMPNAME, DEPTCODE, CIRCLENO, PLANT, IMPACT, FINYEAR, YR, MON, MACHINE_AREA, HD_DONE, RESP_PILLAR, 
		KAIZEN_TYPE, MP_WORTHY, COST_SAVING, STATUS, USERID, TDATE, APPRID, APPRDATE, 'HOD' AS USERTYPE, APPRID AS PENDING_WITH  
		FROM KAIZEN_MASTER WHERE APPRID=@USERID AND STATUS > 1
		AND STATUS=CASE WHEN @STATUS=0 THEN 2 ELSE @STATUS END 
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2021-04-01') AND ISNULL(@DATE2, GETDATE())
		) AS T1
		ORDER BY DOCNO DESC
	END

	IF (@ACTIVITY = 'KAIZEN_CANCEL')		--CANCEL KAIZEN
    BEGIN
        UPDATE KAIZEN_MASTER SET STATUS = 5 WHERE DOCNO=@DOCNO 

		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  KAIZEN_HISTORY WHERE DOCNO=@DOCNO
        INSERT INTO KAIZEN_HISTORY (DOCNO, SRNO, USERTYPE, USERID, REMARKS, STATUS, STATUSDESCR, TDATE)
							VALUES (@DOCNO, @L_NO, 'REQUESTOR', @USERID, 'CANCELLED', 5, 'CANCELLED', GETDATE())
    END

	IF(@ACTIVITY = 'APPROVE_KAIZEN')
	BEGIN
		UPDATE KAIZEN_MASTER SET STATUS=@STATUS, APPRDATE=IIF(@STATUS=3, GETDATE(), NULL) WHERE DOCNO=@DOCNO
		
		IF (@STATUS = 3)		--GENERATE REGD NO ON HOD APPROVAL
		BEGIN
			UPDATE KAIZEN_MASTER SET REG_NO=SUBSTRING(PLANT,1,1)+'/'+dbo.FN_CODEDEF_VALBYDESCR(33,KAIZEN_TYPE)+'/'+UPPER(MON)+CAST(RIGHT(YR,2) AS VARCHAR)+'/'+dbo.FN_DEPTSHORTNAME(DEPTCODE)+'/'+CAST(DOCNO AS VARCHAR)
			WHERE DOCNO=@DOCNO
		END

		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  KAIZEN_HISTORY WHERE DOCNO=@DOCNO

        INSERT INTO KAIZEN_HISTORY (DOCNO, SRNO, USERTYPE, USERID, REMARKS, STATUS, STATUSDESCR)
                           VALUES (@DOCNO, @L_NO, 'HOD', @USERID, @REMARKS, @STATUS, @STATUS_DESCR)

		SELECT 1 AS FLAG;
	END

	IF(@ACTIVITY = 'GET_ALL_KAIZEN') 
	BEGIN
		SELECT DOCNO, REG_NO, KAIZEN_NAME, EMPCODE, EMPNAME, DEPTCODE, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CIRCLENO, PLANT, IMPACT, FINYEAR, YR, MON, MACHINE_AREA, 
		HD_DONE, RESP_PILLAR, KAIZEN_TYPE, MP_WORTHY, COST_SAVING, FILENAME, dbo.FN_CODEDEF(31, STATUS) AS STATUS_DESCR, USERID, DBO.FN_EMPNAME(USERID) AS USERNAME, 
		CONVERT(VARCHAR, TDATE, 23) AS TDATE, APPRID, dbo.FN_EMPNAME(APPRID) AS APPRNAME, CONVERT(VARCHAR, APPRDATE, 20) AS APPRDATE		
		FROM KAIZEN_MASTER WHERE --DEPTCODE=@DEPTCODE AND 
		STATUS=CASE WHEN @STATUS=0 THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2021-04-01') AND ISNULL(@DATE2, GETDATE()) 
		ORDER BY DOCNO DESC
	END

	IF (@ACTIVITY = 'GET_KAIZEN_DASHBOARD_DEPT') --GET_DASHBOARD_KAIZEN_DEPARTMENTS
	BEGIN
		SELECT DBO.FN_DEPTNAME(T1.DEPTCODE) AS DEPTNAME, SUM(TOTAL) AS TOTAL
		FROM (
		SELECT DEPTCODE, COUNT(*) AS TOTAL  FROM KAIZEN_MASTER	WHERE 
		STATUS=CASE WHEN @STATUS=0 THEN STATUS ELSE @STATUS END
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2021-04-01') AND ISNULL(@DATE2, GETDATE()) 
		GROUP BY DEPTCODE
		UNION 
		SELECT DEPTCODE, 0 FROM MST_DEPARTMENT
		) AS T1
		GROUP BY T1.DEPTCODE
		ORDER BY 1
	END

END
	
GO
/****** Object:  StoredProcedure [dbo].[usp_KPI]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROC [dbo].[usp_KPI]
(
	@ACTIVITY			VARCHAR(200)='',
	@KPINO				INT=0,	
	@FINYEAR			VARCHAR(10)='',
	@EMPCODE			NVARCHAR(10)='',
	@DEPTCODE			NVARCHAR(1000)='',
	@HODCODE			VARCHAR(10)='',
	@RESPDEPT           VARCHAR(10)='',
	@ISAPPR				CHAR(1)='',
	@APPR_CODE			VARCHAR(10)='',
	@KPINAME			NVARCHAR(400)='',
	@KPITYPE			VARCHAR(100)='',
	@CATEGORY			VARCHAR(100)='',
	@BOTTOMTGT			NUMERIC(9, 3)=NULL,
	@BASICTGT			NUMERIC(9, 3)=NULL,
	@CHALLENGETGT		NUMERIC(9, 3)=NULL,
	@WEIGHTAGE			NUMERIC(9, 3)=NULL,
	@STATUS				INT=0,
	@SRNO				INT=0,
	@INPUTVAL			NUMERIC(9, 3)=NULL,
	@MONTH				INT=0,
	@ISALL				BIT=0,
	@CALC				NUMERIC(9, 3)=NULL,
	@REMARKS			NVARCHAR(1000)=NULL,
	@DOC_ID				NVARCHAR(1000)=NULL,
	@PARAM1				VARCHAR(100)='',
	@CONFIG_CATEGORY1	VARCHAR(20)='',
	@CONFIG_CATEGORY2	VARCHAR(20)='',
	@USERID				NVARCHAR(20)=NULL
)
AS
BEGIN
	DECLARE @L_NO INT=0, @L_P1 DATETIME=NULL

	IF(@ACTIVITY = 'GetConfigValue')
	BEGIN
		SELECT MODULE,CATEGORY1 CONFIGCATEGORY1, CATEGORY2 CONFIGCATEGORY1, VALUE CONFIGVALUE, LVL CONFIGLEVEL FROM MST_CONFIG 
		WHERE MODULE=@PARAM1 AND CATEGORY1=@CONFIG_CATEGORY1 AND (CATEGORY2=@CONFIG_CATEGORY2 OR @CONFIG_CATEGORY2 ='')
	END

	IF(@ACTIVITY = 'IsHod')
	BEGIN
		IF(EXISTS(SELECT ID FROM MST_DEPARTMENT WHERE HOD_ADID=@USERID))
		BEGIN
			SELECT 1 FLAG
		END
		ELSE
		BEGIN
			SELECT 0 FLAG
		END
	END
	
	IF(@ACTIVITY = 'IsKPIHod')
	BEGIN
		IF(EXISTS(SELECT ID FROM MST_CONFIG WHERE CATEGORY2='DDL' AND VALUE=@EMPCODE))
		BEGIN
			SELECT 1 FLAG
		END
		ELSE
		BEGIN
			SELECT 0 FLAG
		END
	END

	IF(@ACTIVITY = 'GetHodDepts')
	BEGIN
		SELECT C.CATEGORY1 AS CODE, (SELECT TOP 1 DEPTNAME FROM MST_DEPARTMENT D WHERE D.DEPTCODE = C.CATEGORY1) AS NAME
		FROM MST_CONFIG C WHERE C.MODULE='KPI' AND C.VALUE=@PARAM1 AND C.CATEGORY2='DDL'
	END

	IF(@ACTIVITY = 'GetAllKPIDepts')
	BEGIN
		SELECT C.CATEGORY1 AS CODE, (SELECT TOP 1 DEPTNAME FROM MST_DEPARTMENT D WHERE D.DEPTCODE = C.CATEGORY1) AS NAME
		FROM MST_CONFIG C WHERE C.MODULE='KPI' AND C.CATEGORY2='DDL' order BY NAME
	END

	IF(@ACTIVITY = 'GetDraftKpiByFinYear')
	BEGIN
		SELECT CAST(KPINO AS VARCHAR) KPINO,CAST(FINYEAR AS VARCHAR) FINYEARCODE,EMPCODE,DEPTCODE,STATUS FROM KPI_MASTER 
		WHERE EMPCODE=@EMPCODE AND USERID=@USERID AND KPI_TYPE=@KPITYPE AND FINYEAR=@FINYEAR AND DEPTCODE=@DEPTCODE
	END

	IF(@ACTIVITY = 'GetKpiDetails')
	BEGIN
		SELECT CAST(KPINO AS VARCHAR) KPINO,CAST(SRNO AS VARCHAR) SRNO,KPI_NAME KPINAME,CAST(FINYEAR AS VARCHAR) FINYEARCODE,DBO.FN_CODEDEF(4, FINYEAR) AS FINYEARNAME,CAST(CATEGORY AS VARCHAR) CATEGORYCODE,RESP_DEPT RESPDEPTCODE,
		DBO.FN_DEPTNAME(RESP_DEPT) 'RESPDEPTNAME',CAST(WEIGHTAGE AS VARCHAR) WEIGHTAGE,ISAPPR,ISNULL(DOC_ID, '') DOCUID,
		CAST(APR_BT AS VARCHAR) APR_BT,CAST(APR_BS AS VARCHAR) APR_BS,CAST(APR_CH AS VARCHAR) APR_CH,
		CAST(MAY_BT AS VARCHAR) MAY_BT,CAST(MAY_BS AS VARCHAR) MAY_BS,CAST(MAY_CH AS VARCHAR) MAY_CH,
		CAST(JUN_BT AS VARCHAR) JUN_BT,CAST(JUN_BS AS VARCHAR) JUN_BS,CAST(JUN_CH AS VARCHAR) JUN_CH,
		CAST(JUL_BT AS VARCHAR) JUL_BT,CAST(JUL_BS AS VARCHAR) JUL_BS,CAST(JUL_CH AS VARCHAR) JUL_CH,
		CAST(AUG_BT AS VARCHAR) AUG_BT,CAST(AUG_BS AS VARCHAR) AUG_BS,CAST(AUG_CH AS VARCHAR) AUG_CH,
		CAST(SEP_BT AS VARCHAR) SEP_BT,CAST(SEP_BS AS VARCHAR) SEP_BS,CAST(SEP_CH AS VARCHAR) SEP_CH,
		CAST(OCT_BT AS VARCHAR) OCT_BT,CAST(OCT_BS AS VARCHAR) OCT_BS,CAST(OCT_CH AS VARCHAR) OCT_CH,
		CAST(NOV_BT AS VARCHAR) NOV_BT,CAST(NOV_BS AS VARCHAR) NOV_BS,CAST(NOV_CH AS VARCHAR) NOV_CH,
		CAST(DEC_BT AS VARCHAR) DEC_BT,CAST(DEC_BS AS VARCHAR) DEC_BS,CAST(DEC_CH AS VARCHAR) DEC_CH,
		CAST(JAN_BT AS VARCHAR) JAN_BT,CAST(JAN_BS AS VARCHAR) JAN_BS,CAST(JAN_CH AS VARCHAR) JAN_CH,
		CAST(FEB_BT AS VARCHAR) FEB_BT,CAST(FEB_BS AS VARCHAR) FEB_BS,CAST(FEB_CH AS VARCHAR) FEB_CH,
		CAST(MAR_BT AS VARCHAR) MAR_BT,CAST(MAR_BS AS VARCHAR) MAR_BS,CAST(MAR_CH AS VARCHAR) MAR_CH
		FROM KPI_DETAIL 
		WHERE KPINO=@KPINO AND FINYEAR=@FINYEAR AND (SRNO=@SRNO OR @SRNO=0)
	END

	IF(@ACTIVITY = 'CheckWeightage')
	BEGIN
		SELECT ISNULL(WEIGHTAGE,0) WEIGHTAGE FROM KPI_DETAIL WHERE KPINO=@KPINO
	END

	IF(@ACTIVITY = 'InsertMstKPI')
	BEGIN
		INSERT INTO KPI_MASTER(KPI_TYPE,FINYEAR,EMPCODE,DEPTCODE,HODCODE,STATUS,USERID)
		VALUES(@KPITYPE,@FINYEAR,@EMPCODE,@DEPTCODE,@HODCODE,@STATUS,@USERID)
		SELECT @@IDENTITY AS KPINO ,1 STATUS
	END

	IF(@ACTIVITY = 'AddKpiDetail')
	BEGIN
		SELECT @L_NO=ISNULL(MAX(SRNO),0)+1 FROM KPI_DETAIL
		IF(@ISAPPR='Y')
		BEGIN
			SELECT @L_P1 = GETDATE()
		END

		INSERT INTO KPI_DETAIL(KPINO,SRNO,KPI_NAME,FINYEAR,KPI_TYPE,CATEGORY,WEIGHTAGE,RESP_DEPT,ISAPPR,APPR_CODE,APPR_DATE,
		APR_BT,APR_BS,APR_CH,
		MAY_BT,MAY_BS,MAY_CH,
		JUN_BT,JUN_BS,JUN_CH,
		JUL_BT,JUL_BS,JUL_CH,
		AUG_BT,AUG_BS,AUG_CH,
		SEP_BT,SEP_BS,SEP_CH,
		OCT_BT,OCT_BS,OCT_CH,
		NOV_BT,NOV_BS,NOV_CH,
		DEC_BT,DEC_BS,DEC_CH,
		JAN_BT,JAN_BS,JAN_CH,
		FEB_BT,FEB_BS,FEB_CH,
		MAR_BT,MAR_BS,MAR_CH)
		VALUES(@KPINO,@L_NO,@KPINAME,@FINYEAR,@KPITYPE,@CATEGORY,@WEIGHTAGE,@RESPDEPT,@ISAPPR,@APPR_CODE,@L_P1,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT,
		@BOTTOMTGT,@BASICTGT,@CHALLENGETGT)
		SELECT MAX(SRNO) SRNO FROM KPI_DETAIL
	END

	IF(@ACTIVITY = 'KpiDetailDocUpdate')
	BEGIN
		UPDATE KPI_DETAIL SET DOC_ID=@DOC_ID WHERE KPINO=@KPINO AND SRNO=@SRNO
	END

	IF(@ACTIVITY = 'RemoveKpiDetail')
	BEGIN
		DELETE FROM KPI_DETAIL WHERE KPINO = @KPINO AND SRNO=@SRNO
		IF (NOT EXISTS (SELECT KPINO FROM KPI_DETAIL WHERE KPINO = @KPINO))
		BEGIN
			DELETE FROM KPI_MASTER WHERE KPINO = @KPINO
		END
		SELECT '1' FLAG, 'KPI removed successfully' MSG
	END	

	IF(@ACTIVITY = 'SubmitKpi')
	BEGIN
		UPDATE KPI_MASTER SET STATUS=@STATUS,UDATE=GETDATE() WHERE KPINO=@KPINO
		SELECT '1' FLAG, 'KPI submitted successfully.' MSG
	END

	IF(@ACTIVITY = 'GetDeptEmp')
	BEGIN
		SELECT EMPCODE AS CODE,EMPCODE +' - '+ EMPNAME AS NAME
		FROM MST_EMPLOYEE 
		WHERE DEPTCODE in(SELECT VALUE FROM STRING_SPLIT(@DEPTCODE,',')) AND ISACTIVE='1'
		ORDER BY EMPNAME
	END

	IF(@ACTIVITY = 'GetViewKPI')
		BEGIN
			SELECT CAST(KD.KPINO AS VARCHAR) KPINO,CAST(SRNO AS VARCHAR) SRNO,DBO.FN_EMPNAME(KM.EMPCODE) EMPNAME,KPI_NAME KPINAME,DBO.[FN_CODEDEF](4, KD.FINYEAR) AS FINYEARNAME,
			CAST(CATEGORY AS VARCHAR) CATEGORYCODE,RESP_DEPT,dbo.FN_DEPTNAME(RESP_DEPT) 'RESPDEPTNAME',CAST(WEIGHTAGE AS VARCHAR)WEIGHTAGE,ISAPPR,ISNULL(DOC_ID, '') DOCUID,KM.DEPTCODE,dbo.FN_DEPTNAME(KM.DEPTCODE) DEPTNAME,
			CAST(APR_BT AS VARCHAR) APR_BT,CAST(APR_BS AS VARCHAR) APR_BS,CAST(APR_CH AS VARCHAR) APR_CH,ISNULL(CAST(APR_IN AS VARCHAR),'') APR_IN,ISNULL(CAST(APR_CALC AS VARCHAR),'') APR_CALC,
			CAST(MAY_BT AS VARCHAR) MAY_BT,CAST(MAY_BS AS VARCHAR) MAY_BS,CAST(MAY_CH AS VARCHAR) MAY_CH,ISNULL(CAST(MAY_IN AS VARCHAR),'') MAY_IN,ISNULL(CAST(MAY_CALC AS VARCHAR),'') MAY_CALC,
			CAST(JUN_BT AS VARCHAR) JUN_BT,CAST(JUN_BS AS VARCHAR) JUN_BS,CAST(JUN_CH AS VARCHAR) JUN_CH,ISNULL(CAST(JUN_IN AS VARCHAR),'') JUN_IN,ISNULL(CAST(JUN_CALC AS VARCHAR),'') JUN_CALC,
			CAST(JUL_BT AS VARCHAR) JUL_BT,CAST(JUL_BS AS VARCHAR) JUL_BS,CAST(JUL_CH AS VARCHAR) JUL_CH,ISNULL(CAST(JUL_IN AS VARCHAR),'') JUL_IN,ISNULL(CAST(JUL_CALC AS VARCHAR),'') JUL_CALC,
			CAST(AUG_BT AS VARCHAR) AUG_BT,CAST(AUG_BS AS VARCHAR) AUG_BS,CAST(AUG_CH AS VARCHAR) AUG_CH,ISNULL(CAST(AUG_IN AS VARCHAR),'') AUG_IN,ISNULL(CAST(AUG_CALC AS VARCHAR),'') AUG_CALC,
			CAST(SEP_BT AS VARCHAR) SEP_BT,CAST(SEP_BS AS VARCHAR) SEP_BS,CAST(SEP_CH AS VARCHAR) SEP_CH,ISNULL(CAST(SEP_IN AS VARCHAR),'') SEP_IN,ISNULL(CAST(SEP_CALC AS VARCHAR),'') SEP_CALC,
			CAST(OCT_BT AS VARCHAR) OCT_BT,CAST(OCT_BS AS VARCHAR) OCT_BS,CAST(OCT_CH AS VARCHAR) OCT_CH,ISNULL(CAST(OCT_IN AS VARCHAR),'') OCT_IN,ISNULL(CAST(OCT_CALC AS VARCHAR),'') OCT_CALC,
			CAST(NOV_BT AS VARCHAR) NOV_BT,CAST(NOV_BS AS VARCHAR) NOV_BS,CAST(NOV_CH AS VARCHAR) NOV_CH,ISNULL(CAST(NOV_IN AS VARCHAR),'') NOV_IN,ISNULL(CAST(NOV_CALC AS VARCHAR),'') NOV_CALC,
			CAST(DEC_BT AS VARCHAR) DEC_BT,CAST(DEC_BS AS VARCHAR) DEC_BS,CAST(DEC_CH AS VARCHAR) DEC_CH,ISNULL(CAST(DEC_IN AS VARCHAR),'') DEC_IN,ISNULL(CAST(DEC_CALC AS VARCHAR),'') DEC_CALC,
			CAST(JAN_BT AS VARCHAR) JAN_BT,CAST(JAN_BS AS VARCHAR) JAN_BS,CAST(JAN_CH AS VARCHAR) JAN_CH,ISNULL(CAST(JAN_IN AS VARCHAR),'') JAN_IN,ISNULL(CAST(JAN_CALC AS VARCHAR),'') JAN_CALC,
			CAST(FEB_BT AS VARCHAR) FEB_BT,CAST(FEB_BS AS VARCHAR) FEB_BS,CAST(FEB_CH AS VARCHAR) FEB_CH,ISNULL(CAST(FEB_IN AS VARCHAR),'') FEB_IN,ISNULL(CAST(FEB_CALC AS VARCHAR),'') FEB_CALC,
			CAST(MAR_BT AS VARCHAR) MAR_BT,CAST(MAR_BS AS VARCHAR) MAR_BS,CAST(MAR_CH AS VARCHAR) MAR_CH,ISNULL(CAST(MAR_IN AS VARCHAR),'') MAR_IN,ISNULL(CAST(MAR_CALC AS VARCHAR),'') MAR_CALC
			FROM KPI_DETAIL KD
			LEFT JOIN KPI_MASTER KM  ON KM.KPINO = KD.KPINO
			WHERE KD.FINYEAR=@FINYEAR AND (EMPCODE=@EMPCODE OR @EMPCODE='0') AND STATUS=4 AND DEPTCODE=@DEPTCODE
		END

	IF(@ACTIVITY = 'ChangeKpiTarget')
		BEGIN
			IF(@MONTH = 1)
			BEGIN
				UPDATE KPI_DETAIL SET JAN_BT=@BOTTOMTGT,JAN_BS=@BASICTGT,JAN_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
			IF(@MONTH = 2)
			BEGIN
				UPDATE KPI_DETAIL SET FEB_BT=@BOTTOMTGT,FEB_BS=@BASICTGT,FEB_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
			IF(@MONTH = 3)
			BEGIN
				UPDATE KPI_DETAIL SET MAR_BT=@BOTTOMTGT,MAR_BS=@BASICTGT,MAR_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
			IF(@MONTH = 4)
			BEGIN
				UPDATE KPI_DETAIL SET APR_BT=@BOTTOMTGT,APR_BS=@BASICTGT,APR_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
			IF(@MONTH = 5)
			BEGIN
				UPDATE KPI_DETAIL SET MAY_BT=@BOTTOMTGT,MAY_BS=@BASICTGT,MAY_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
			IF(@MONTH = 6)
			BEGIN
				UPDATE KPI_DETAIL SET JUN_BT=@BOTTOMTGT,JUN_BS=@BASICTGT,JUN_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
			IF(@MONTH = 7)
			BEGIN
				UPDATE KPI_DETAIL SET JUL_BT=@BOTTOMTGT,JUL_BS=@BASICTGT,JUL_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
			IF(@MONTH = 8)
			BEGIN
				UPDATE KPI_DETAIL SET AUG_BT=@BOTTOMTGT,AUG_BS=@BASICTGT,AUG_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
			IF(@MONTH = 9)
			BEGIN
				UPDATE KPI_DETAIL SET SEP_BT=@BOTTOMTGT,SEP_BS=@BASICTGT,SEP_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
			IF(@MONTH = 10)
			BEGIN
				UPDATE KPI_DETAIL SET OCT_BT=@BOTTOMTGT,OCT_BS=@BASICTGT,OCT_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
			IF(@MONTH = 11)
			BEGIN
				UPDATE KPI_DETAIL SET NOV_BT=@BOTTOMTGT,NOV_BS=@BASICTGT,NOV_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
			IF(@MONTH = 12)
			BEGIN
				UPDATE KPI_DETAIL SET DEC_BT=@BOTTOMTGT,DEC_BS=@BASICTGT,DEC_CH=@CHALLENGETGT WHERE KPINO=@KPINO AND SRNO=@SRNO
			END
	END

	IF(@ACTIVITY = 'KpiDetailsInput')
	BEGIN
		IF(@MONTH = 1)
		BEGIN
			UPDATE KPI_DETAIL SET JAN_IN=@INPUTVAL,JAN_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
		IF(@MONTH = 2)
		BEGIN
			UPDATE KPI_DETAIL SET FEB_IN=@INPUTVAL,FEB_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
		IF(@MONTH = 3)
		BEGIN
			UPDATE KPI_DETAIL SET MAR_IN=@INPUTVAL,MAR_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
		IF(@MONTH = 4)
		BEGIN
			UPDATE KPI_DETAIL SET APR_IN=@INPUTVAL,APR_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
		IF(@MONTH = 5)
		BEGIN
			UPDATE KPI_DETAIL SET MAY_IN=@INPUTVAL,MAY_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
		IF(@MONTH = 6)
		BEGIN
			UPDATE KPI_DETAIL SET JUN_IN=@INPUTVAL,JUN_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
		IF(@MONTH = 7)
		BEGIN
			UPDATE KPI_DETAIL SET JUL_IN=@INPUTVAL,JUL_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
		IF(@MONTH = 8)
		BEGIN
			UPDATE KPI_DETAIL SET AUG_IN=@INPUTVAL,AUG_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
		IF(@MONTH = 9)
		BEGIN
			UPDATE KPI_DETAIL SET SEP_IN=@INPUTVAL,SEP_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
		IF(@MONTH = 10)
		BEGIN
			UPDATE KPI_DETAIL SET OCT_IN=@INPUTVAL,OCT_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
		IF(@MONTH = 11)
		BEGIN
			UPDATE KPI_DETAIL SET NOV_IN=@INPUTVAL,NOV_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
		IF(@MONTH = 12)
		BEGIN
			UPDATE KPI_DETAIL SET DEC_IN=@INPUTVAL,DEC_CALC=@CALC WHERE KPINO=@KPINO AND SRNO=@SRNO
		END
	END

	IF (@ACTIVITY = 'GET_DASHBOARD_ORG') --GET_DASHBOARD_KPI_ORGANIZATION
	BEGIN
		SELECT
		CAST(ISNULL(SUM(APR_CALC),0) AS VARCHAR) AS M12, 
		CAST(ISNULL(SUM(MAY_CALC),0) AS VARCHAR) AS M11, 
		CAST(ISNULL(SUM(JUN_CALC),0) AS VARCHAR) AS M10,
		CAST(ISNULL(SUM(JUL_CALC),0) AS VARCHAR) AS M9, 
		CAST(ISNULL(SUM(AUG_CALC),0) AS VARCHAR) AS M8, 
		CAST(ISNULL(SUM(SEP_CALC),0) AS VARCHAR) AS M7, 
		CAST(ISNULL(SUM(OCT_CALC),0) AS VARCHAR) AS M6, 
		CAST(ISNULL(SUM(NOV_CALC),0) AS VARCHAR) AS M5, 
		CAST(ISNULL(SUM(DEC_CALC),0) AS VARCHAR) AS M4,
		CAST(ISNULL(SUM(JAN_CALC),0) AS VARCHAR) AS M3, 
		CAST(ISNULL(SUM(FEB_CALC),0) AS VARCHAR) AS M2, 
		CAST(ISNULL(SUM(MAR_CALC),0) AS VARCHAR) AS M1 
		FROM KPI_DETAIL where KPI_TYPE='ORG' AND FINYEAR=@FINYEAR
	END	
	
	IF (@ACTIVITY = 'GET_DASHBOARD_DEPT') --GET_DASHBOARD_KPI_DEPARTMENTS
	BEGIN
		SELECT MC.CATEGORY1 DEPTCODE,MD.DEPTNAME,MC.VALUE HODCODE,ME.EMPNAME HODNAME,CAST(ISNULL(KM.KPINO,'') AS VARCHAR) KPINO,
		CASE 
		WHEN @MONTH=1	THEN CAST((SELECT ISNULL(SUM(JAN_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		WHEN @MONTH=2	THEN CAST((SELECT ISNULL(SUM(FEB_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		WHEN @MONTH=3	THEN CAST((SELECT ISNULL(SUM(MAR_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		WHEN @MONTH=4	THEN CAST((SELECT ISNULL(SUM(APR_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		WHEN @MONTH=5	THEN CAST((SELECT ISNULL(SUM(MAY_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		WHEN @MONTH=6	THEN CAST((SELECT ISNULL(SUM(JUN_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		WHEN @MONTH=7	THEN CAST((SELECT ISNULL(SUM(JUL_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		WHEN @MONTH=8	THEN CAST((SELECT ISNULL(SUM(AUG_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		WHEN @MONTH=9	THEN CAST((SELECT ISNULL(SUM(SEP_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		WHEN @MONTH=10	THEN CAST((SELECT ISNULL(SUM(OCT_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		WHEN @MONTH=11	THEN CAST((SELECT ISNULL(SUM(NOV_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		WHEN @MONTH=12	THEN CAST((SELECT ISNULL(SUM(DEC_CALC),0) FROM KPI_DETAIL WHERE KPINO=KM.KPINO) AS VARCHAR)
		ELSE '0' END SCORE
		FROM MST_CONFIG MC
		LEFT JOIN MST_DEPARTMENT MD ON MD.DEPTCODE = MC.CATEGORY1
		LEFT JOIN MST_EMPLOYEE ME ON ME.EMPCODE = MC.VALUE
		LEFT JOIN KPI_MASTER KM ON KM.DEPTCODE=MC.CATEGORY1 AND KM.FINYEAR=@FINYEAR AND KM.STATUS=4 AND KM.KPI_TYPE='DEPT'
		WHERE MODULE='KPI' AND CATEGORY2='DDL' AND MC.CATEGORY1 IS NOT NULL AND MC.CATEGORY1 NOT IN ('DP0017')
		ORDER BY 2		
     END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_LAB]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[usp_LAB]
(
    @Activity				VARCHAR(200)	=	''
	,@Id					INT				=	0 
    ,@Product				VARCHAR(MAX)	=	''
    ,@ProductOther			VARCHAR(MAX)	=	''
    ,@ModelName				VARCHAR(MAX)	=	''
	,@PartNumber			VARCHAR(MAX)	=	''
	,@SampleQty				VARCHAR(MAX)	=	''
	,@TestName				VARCHAR(MAX)	=	''
    ,@TestConditionIfAny	VARCHAR(MAX)	=	''
	,@Status				VARCHAR(MAX)	=	''
	,@Department			VARCHAR(MAX)	=	''
	,@EmpCode				VARCHAR(MAX)	=	''
	,@TestStartDate			VARCHAR(MAX)	=	''
	,@Param1				VARCHAR(MAX)	=	''
	,@Param2				VARCHAR(MAX)	=	''
	,@Param3				VARCHAR(MAX)	=	''
)
AS
BEGIN
	IF(@Activity='GetPendingRequest')BEGIN		
		SELECT ID,Product,ProductOther,ModelName,PartNumber,SampleQty,TestName,TestConditionIfAny,[Status],DBO.FN_DEPTNAME(Department) Department, ISNULL(RejectReason,'') RejectReason,
		REPLACE(CONVERT(NVARCHAR, RequestDate, 106), ' ', '-') RequestDate,EmpCode,dbo.FN_EMPNAME(EmpCode) EmpName, CAST(RequestDate as date) as 'SortDate',ISNULL(TestConditionDocId,'') as DocUId
		FROM LAB_SAMPLE WHERE [Status] = 'Pending' and (EmpCode=@EmpCode or @EmpCode='0')
        ORDER BY SortDate DESC        
    END
	IF(@Activity='GetAllRequest')BEGIN		
		SELECT ID,Product,ProductOther,ModelName,PartNumber,SampleQty,TestName,TestConditionIfAny,[Status],DBO.FN_DEPTNAME(Department) Department, ISNULL(RejectReason,'') RejectReason,
		REPLACE(CONVERT(NVARCHAR, RequestDate, 106), ' ', '-') RequestDate,EmpCode,dbo.FN_EMPNAME(EmpCode) EmpName,CAST(RequestDate as date) as 'SortDate',ISNULL(TestConditionDocId,'') as DocUId
		FROM LAB_SAMPLE WHERE [Status] != 'Pending' and EmpCode=@EmpCode
        ORDER BY SortDate DESC        
    END
    IF(@Activity='AddRequest')BEGIN
        INSERT INTO LAB_SAMPLE(Product,ProductOther,ModelName,PartNumber,SampleQty,TestName,TestConditionIfAny,Status,Department,RequestDate,EmpCode)
		VALUES(@Product,@ProductOther,@ModelName,@PartNumber,@SampleQty,@TestName,@TestConditionIfAny,'Pending',@Department,GETDATE(),@EmpCode)
		SELECT @@IDENTITY RETVAL, '1' FLAG, '' AS MSG
    END
	IF(@Activity='LabTestCondDoc')BEGIN
        UPDATE LAB_SAMPLE set TestConditionDocId=@Param1 where ID=@Id
    END
	IF(@Activity='GetSample')BEGIN
        SELECT ID,Product,ProductOther,ModelName,PartNumber,SampleQty,TestName,TestConditionIfAny,[Status],DBO.FN_DEPTNAME(Department) Department, ISNULL(RejectReason,'') RejectReason,
		REPLACE(CONVERT(NVARCHAR, RequestDate, 106), ' ', '-') RequestDate,EmpCode,dbo.FN_EMPNAME(EmpCode) EmpName,(select EMAILID_O from MST_EMPLOYEE where EmpCode=LAB_SAMPLE.EmpCode) ReqEmail
		FROM LAB_SAMPLE WHERE ID= @Id
    END
	IF(@Activity='DeleteSample')BEGIN
        DELETE FROM LAB_SAMPLE WHERE ID=@Id
    END
	IF(@Activity='UpdateSample')BEGIN
        UPDATE LAB_SAMPLE SET SampleQty=@SampleQty,TestName=@TestName,TestConditionIfAny=@TestConditionIfAny where ID=@Id
    END
	IF(@Activity='AcceptSample')BEGIN
        UPDATE LAB_SAMPLE SET Status='Accepted' WHERE ID=@Id
    END
	IF(@Activity='GetAcceptedRequest')BEGIN		
		SELECT ID,Product,ProductOther,ModelName,PartNumber,SampleQty,TestName,TestConditionIfAny,[Status],DBO.FN_DEPTNAME(Department) Department, ISNULL(RejectReason,'') RejectReason,
		REPLACE(CONVERT(NVARCHAR, RequestDate, 106), ' ', '-') RequestDate,EmpCode,dbo.FN_EMPNAME(EmpCode) EmpName, CAST(RequestDate as date) as 'SortDate',ISNULL(TestConditionDocId,'') as DocUId
		FROM LAB_SAMPLE WHERE [Status] = 'Accepted'
        ORDER BY SortDate DESC        
    END
	IF(@Activity='GetTestRunningRequest')BEGIN		
		SELECT ID,Product,ProductOther,ModelName,PartNumber,SampleQty,TestName,TestConditionIfAny,[Status],DBO.FN_DEPTNAME(Department) Department, ISNULL(RejectReason,'') RejectReason,
		REPLACE(CONVERT(NVARCHAR, RequestDate, 106), ' ', '-') RequestDate,EmpCode,dbo.FN_EMPNAME(EmpCode) EmpName, 
		(REPLACE(CONVERT(NVARCHAR, TestStartDate, 106), ' ', '-') + ' ' + TestStartTime) TestStartDate, CAST(RequestDate as date) as 'SortDate',ISNULL(TestConditionDocId,'') as DocUId
		FROM LAB_SAMPLE WHERE [Status] = 'TestRunning'
        ORDER BY SortDate DESC        
    END
	IF(@Activity='GetTestCompletedRequest')BEGIN		
		SELECT ID,Product,ProductOther,ModelName,PartNumber,SampleQty,TestName,TestConditionIfAny,[Status],DBO.FN_DEPTNAME(Department) Department, ISNULL(RejectReason,'') RejectReason,
		REPLACE(CONVERT(NVARCHAR, RequestDate, 106), ' ', '-') RequestDate,EmpCode,dbo.FN_EMPNAME(EmpCode) EmpName, CAST(RequestDate as date) as 'SortDate',ISNULL(TestConditionDocId,'') as DocUId
		FROM LAB_SAMPLE WHERE [Status] = 'Pass' 
        ORDER BY SortDate DESC        
    END
	IF(@Activity='GetTestHoldFailedRequest')BEGIN		
		SELECT ID,Product,ProductOther,ModelName,PartNumber,SampleQty,TestName,TestConditionIfAny,[Status],DBO.FN_DEPTNAME(Department) Department, ISNULL(RejectReason,'') RejectReason,
		REPLACE(CONVERT(NVARCHAR, RequestDate, 106), ' ', '-') RequestDate,EmpCode,dbo.FN_EMPNAME(EmpCode) EmpName, CAST(RequestDate as date) as 'SortDate',ISNULL(TestConditionDocId,'') as DocUId
		FROM LAB_SAMPLE WHERE [Status] IN ('HoldFailed','Fail')
        ORDER BY SortDate DESC        
    END
	IF(@Activity='GetRejectRequest')BEGIN		
		SELECT ID,Product,ProductOther,ModelName,PartNumber,SampleQty,TestName,TestConditionIfAny,[Status],DBO.FN_DEPTNAME(Department) Department, ISNULL(RejectReason,'') RejectReason,
		REPLACE(CONVERT(NVARCHAR, RequestDate, 106), ' ', '-') RequestDate,EmpCode,dbo.FN_EMPNAME(EmpCode) EmpName, CAST(RequestDate as date) as 'SortDate',ISNULL(TestConditionDocId,'') as DocUId
		FROM LAB_SAMPLE WHERE [Status] = 'Reject'
        ORDER BY SortDate DESC        
    END
	IF(@Activity='RejectSample')BEGIN
        UPDATE LAB_SAMPLE SET Status='Reject',RejectReason=@Param1 WHERE ID=@Id
    END
	IF(@Activity='UpdateSampleTime')BEGIN
        UPDATE LAB_SAMPLE SET Status='TestRunning',TestStartDate=@TestStartDate,TestStartTime=(@Param1 +':'+@Param2+' '+@Param3) WHERE ID=@Id
    END
	IF(@Activity='URunningTest')BEGIN
        UPDATE LAB_SAMPLE SET Status=@Status,RejectReason=@Param1,TestEnd=GETDATE() WHERE ID=@Id
    END
	IF(@Activity='UReviewStatus')BEGIN
        UPDATE LAB_SAMPLE SET Status=@Status, IsResultReview=1,ResultReviewRemark=@Param1 WHERE ID=@Id
    END	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Legal]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Legal]
(
@ACTIVITY				VARCHAR(100)='',
@DOCNO					INT=0,
@SRNO					INT=0,
@CONTRACT_NAME			VARCHAR(200)='',
@CONTRACT_NUMBER		VARCHAR(200)='',
@CONTRACT_VALUE			VARCHAR(200)='',
@CURRENCY				VARCHAR(200)='',
@CONTRACT_CATG			VARCHAR(100)='',
@CONTRACT_NATURE		VARCHAR(200)='',
@VENDOR					VARCHAR(200)='',
@DEPTCODE				VARCHAR(50)='',
@PLANT					VARCHAR(20)='',
@EMAIL					VARCHAR(100)='',
@EXE_DATE				DATETIME=NULL,
@EFF_DATE				DATETIME=NULL,
@EXP_DATE				DATETIME=NULL,
@MASTER_CONTRACT		VARCHAR(10)=NULL,
@REMARK					VARCHAR(500)='',
@SERVICE_DESC			VARCHAR(500)='',
@USERID					VARCHAR(20)='',
@DOC_DRAFT				VARCHAR(1000)='',
@DOC_SIGNED				VARCHAR(1000)='',
@PARAM1					VARCHAR(100)='',
@PARAM2					VARCHAR(100)='',
@DATE1					DATETIME=NULL,
@DATE2					DATETIME=NULL,
@DATE3					DATETIME=NULL,
@DATE4					DATETIME=NULL,
@DATE5					DATETIME=NULL,
@DATE6					DATETIME=NULL
)
AS
BEGIN
DECLARE @L_NO INT, @SQL NVARCHAR(MAX)

	IF(@ACTIVITY = 'ADD_UPD_CONTRACT')
	BEGIN
		IF (@DOCNO > 0)
		BEGIN			
			UPDATE CONTRACT_MASTER SET PLANT=@PLANT, SERVICE_DESC=@SERVICE_DESC, EMAIL=@EMAIL, CONTRACT_NAME=@CONTRACT_NAME, 
			CONTRACT_VALUE=@CONTRACT_VALUE, CURRENCY=@CURRENCY, CONTRACT_NUMBER=@CONTRACT_NUMBER, MASTER_CONTRACT=@MASTER_CONTRACT,
			EXE_DATE=@EXE_DATE, EFF_DATE=@EFF_DATE, EXP_DATE=@EXP_DATE, CREATEDBY=@USERID WHERE DOCNO=@DOCNO

			SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  CONTRACT_HISTORY WHERE DOCNO=@DOCNO

			INSERT INTO CONTRACT_HISTORY(DOCNO, SRNO, PLANT, SERVICE_DESC, EXE_DATE, EFF_DATE, EXP_DATE, DOC_DRAFT, DOC_SIGNED, REMARK, CREATEDBY)
			VALUES (@DOCNO, @L_NO,@PLANT, @SERVICE_DESC, @EXE_DATE, @EFF_DATE, @EXP_DATE, @DOC_DRAFT, @DOC_SIGNED, @REMARK, @USERID)
		
			SELECT @L_NO AS DOCNO, 2 AS FLAG 
		END
		ELSE
		BEGIN
			SELECT  @DOCNO=ISNULL(MAX(DOCNO),0)+1 FROM  CONTRACT_MASTER

			INSERT INTO CONTRACT_MASTER(DOCNO, CONTRACT_NAME, CONTRACT_NUMBER, CONTRACT_VALUE, CURRENCY, CONTRACT_CATG, CONTRACT_NATURE, VENDOR, PLANT, DEPTCODE, EMAIL, EXE_DATE, EFF_DATE, EXP_DATE, MASTER_CONTRACT, REMARK, SERVICE_DESC, CREATEDBY, TDATE)
								 VALUES(@DOCNO,@CONTRACT_NAME,@CONTRACT_NUMBER,@CONTRACT_VALUE,@CURRENCY,@CONTRACT_CATG,@CONTRACT_NATURE,@VENDOR,@PLANT,@DEPTCODE,@EMAIL,@EXE_DATE,@EFF_DATE,@EXP_DATE,@MASTER_CONTRACT,@REMARK,@SERVICE_DESC,@USERID,GETDATE())

			SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM CONTRACT_HISTORY WHERE DOCNO=@DOCNO

			INSERT INTO CONTRACT_HISTORY(DOCNO, SRNO, PLANT, SERVICE_DESC, EXE_DATE, EFF_DATE, EXP_DATE, DOC_DRAFT, DOC_SIGNED, REMARK, CREATEDBY)
			VALUES (@DOCNO, @L_NO,@PLANT, @SERVICE_DESC, @EXE_DATE, @EFF_DATE, @EXP_DATE, @DOC_DRAFT, @DOC_SIGNED, @REMARK, @USERID)
		
			SELECT @DOCNO DOCNO, 1 AS FLAG 
		END
	END

	IF(@ACTIVITY = 'GET_CONTRACT_BY_DOC')
	BEGIN
		SELECT CM.DOCNO, CM.VENDOR, CM.DEPTCODE, DBO.FN_DEPTNAME(CM.DEPTCODE)DEPTNAME, CM.PLANT, CM.CONTRACT_CATG, CM.CONTRACT_NAME, CM.CONTRACT_NATURE, CM.CONTRACT_VALUE,
		CM.CURRENCY, CM.CONTRACT_NUMBER, CM.MASTER_CONTRACT, CM.SERVICE_DESC, CM.EMAIL, CH.DOC_DRAFT,CH.DOC_SIGNED,
		REPLACE(CONVERT(NVARCHAR,CM.EXE_DATE, 106), ' ', '-') EXE_DATE,
		REPLACE(CONVERT(NVARCHAR,CM.EFF_DATE, 106), ' ', '-') EFF_DATE,
		REPLACE(CONVERT(NVARCHAR,CM.EXP_DATE, 106), ' ', '-') EXP_DATE,
		CM.REMARK, CM.CREATEDBY,(SELECT MAX(SRNO) SRNO FROM CONTRACT_HISTORY WHERE DOCNO=CM.DOCNO) SRNO	
		FROM CONTRACT_MASTER CM
		LEFT JOIN CONTRACT_HISTORY CH ON CH.DOCNO=CM.DOCNO AND CH.SRNO = (SELECT MAX(SRNO) SRNO FROM CONTRACT_HISTORY WHERE DOCNO=CM.DOCNO)
		WHERE CM.DOCNO=@DOCNO
	END

	IF(@ACTIVITY = 'GET_HISTORY')
	BEGIN
		SELECT DOCNO, PLANT, SERVICE_DESC AS SERVICEDESCRIPTION, REPLACE(CONVERT(NVARCHAR,EXE_DATE, 106), ' ', '-') EXEDATE, 
		REPLACE(CONVERT(NVARCHAR,EFF_DATE, 106), ' ', '-') EFFDATE, 
		REPLACE(CONVERT(NVARCHAR,EXP_DATE, 106), ' ', '-') EXPDATE, 
		ISNULL(DOC_DRAFT, '') DOCDRAFT, ISNULL(DOC_SIGNED, '') DOCSIGNED, REMARK,
		REPLACE(CONVERT(NVARCHAR,TDATE, 106), ' ', '-') DATE1
		FROM CONTRACT_HISTORY WHERE DOCNO=@DOCNO ORDER BY SRNO DESC
	END 

	IF(@ACTIVITY = 'REMOVE_CONTRACT')
	BEGIN
		DELETE FROM CONTRACT_MASTER WHERE DOCNO = @DOCNO

		DELETE FROM CONTRACT_HISTORY WHERE DOCNO = @DOCNO
	END
	

	IF(@ACTIVITY = 'GET_CONTRACT_LIST')
	BEGIN
		SELECT DOCNO, VENDOR, DBO.FN_DEPTNAME(DEPTCODE)DEPTNAME, PLANT, CONTRACT_CATG AS CONTRACTCATEGORY, CONTRACT_NAME AS CONTRACTNAME, 
		ISNULL(CONTRACT_NATURE, 'NA')CONTRACTNATURE,ISNULL(CONTRACT_VALUE,'NA')CONTRACTVALUE, ISNULL(CURRENCY,'NA')CURRENCY, ISNULL(CONTRACT_NUMBER, 'NA')CONTRACTNUMBER, 
		ISNULL(MASTER_CONTRACT,'NA')MASTERCONTRACT, SERVICE_DESC AS SERVICEDESCRIPTION, EMAIL,
		REPLACE(CONVERT(NVARCHAR,EXE_DATE, 106), ' ', '-') EXEDATE,
		REPLACE(CONVERT(NVARCHAR,EFF_DATE, 106), ' ', '-') EFFDATE ,
		ISNULL(REPLACE(CONVERT(NVARCHAR,EXP_DATE, 106), ' ', '-'), 'NA') EXPDATE,
		ISNULL(DATEDIFF(DAY, GETDATE(),EXP_DATE), '') AS DAYSLEFT, CONVERT(VARCHAR, TDATE, 23) AS TDATE, CREATEDBY FROM CONTRACT_MASTER
		ORDER BY DOCNO DESC
	END

	IF(@ACTIVITY = 'GET_FILTERED_LIST')
	BEGIN 
		SELECT @SQL = 'SELECT DOCNO,VENDOR,DBO.FN_DEPTNAME(DEPTCODE)DEPTNAME,PLANT,CONTRACT_CATG AS CONTRACTCATEGORY,CONTRACT_NAME AS CONTRACTNAME,CONTRACT_NATURE AS CONTRACTNATURE,
		CONTRACT_VALUE AS CONTRACTVALUE,CURRENCY,CONTRACT_NUMBER AS CONTRACTNUMBER,MASTER_CONTRACT AS MASTERCONTRACT,SERVICE_DESC AS SERVICEDESCRIPTION,EMAIL,
		REPLACE(CONVERT(VARCHAR, EXE_DATE, 106), '' '', ''-'') AS EXEDATE,
		REPLACE(CONVERT(VARCHAR, EFF_DATE, 106), '' '', ''-'') AS EFFDATE,
		ISNULL(REPLACE(CONVERT(VARCHAR, EXP_DATE, 106), '' '', ''-''), '' '') AS EXPDATE,
		ISNULL(DATEDIFF(DAY, GETDATE(), EXP_DATE), '''') AS DAYSLEFT, CONVERT(VARCHAR, TDATE, 23) AS TDATE, CREATEDBY FROM CONTRACT_MASTER WHERE 1=1 ';		 
		IF(@DATE1 IS NOT NULL AND @DATE2 IS NOT NULL)
		BEGIN
			SELECT @SQL += ' AND CONVERT(DATE, EXE_DATE) BETWEEN '''+ CONVERT(NVARCHAR, @DATE1) +''' AND '''+ CONVERT(NVARCHAR, @DATE2) +''' ';
		END
		IF(@DATE3 IS NOT NULL AND @DATE4 IS NOT NULL)
		BEGIN
			SELECT @SQL += ' AND CONVERT(DATE, EFF_DATE) BETWEEN '''+ CONVERT(NVARCHAR, @DATE3) +''' AND '''+ CONVERT(NVARCHAR, @DATE4) +''' ';
		END
		IF(@DATE5 IS NOT NULL AND @DATE6 IS NOT NULL)
		BEGIN
			SELECT @SQL += ' AND CONVERT(DATE, EXP_DATE) BETWEEN '''+ CONVERT(NVARCHAR, @DATE5) +''' AND '''+ CONVERT(NVARCHAR, @DATE6) +''' ';
		END
			EXEC (@SQL);
	END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Login]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[usp_Login]
(
	@ACTIVITY		VARCHAR(200) = '',
	@USERID			VARCHAR(50)='',
	@NAME			VARCHAR(50)='',
	@PARAM1			VARCHAR(100) = '',
	@PARAM2			VARCHAR(100) = '',
	@PARAM3			VARCHAR(100) = '',
	@PARAM4			VARCHAR(100) = '',
	@PARAM5			VARCHAR(100) = ''
)
AS
BEGIN

	IF (@ACTIVITY = 'IS_CHATBOT_ENABLE') -- Get CAHTBOT ENABLE-DISABLE
    BEGIN
		SELECT VALUE FROM MST_CONFIG WHERE MODULE='CHATBOT' AND CATEGORY1='ENABLE'
    END

	IF (@ACTIVITY = 'GET_LOGIN_DETAILS')--GET LOGIN DETAILS
	BEGIN
		SELECT PLANT, ADID, EMPCODE, EMPNAME, DESIGNATION, DEPTCODE, DEPTNAME, EMAILID_O, CONTACTNO_O, LANDLINE, ISACTIVE
		FROM MST_EMPLOYEE WHERE ADID=@USERID
    END

	IF (@ACTIVITY = 'GET_EMP_DETAILS')		--GET LOGIN DETAILS
	BEGIN
		SELECT PLANT, ADID, EMPCODE, EMPNAME, DESIGNATION, DEPTCODE, DEPTNAME, EMAILID_O, CONTACTNO_O, LANDLINE, ISACTIVE
		FROM MST_EMPLOYEE WHERE ADID=@USERID OR EMPCODE=@USERID
    END


	IF (@ACTIVITY = 'UPDATE_ADID')--UPDATE AD ID
	BEGIN
		IF EXISTS (SELECT * FROM MST_EMPLOYEE WHERE EMPCODE=@PARAM1 AND ISNULL(ADID, '')='')
		BEGIN
			UPDATE MST_EMPLOYEE SET ADID=@USERID WHERE EMPCODE=@PARAM1			
		END
		SELECT PLANT, ADID, EMPCODE, EMPNAME, DESIGNATION, DEPTCODE, DEPTNAME, EMAILID_O, CONTACTNO_O, ISACTIVE
		FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND ADID=@USERID
	END

	IF (@ACTIVITY = 'UPDATE_LOGIN_DETAILS')--UPDATE LOGIN TIME / EMPLOYEE RECORD
	BEGIN
		INSERT INTO MST_LOGIN_LOGS(ADID, EMPCODE, EMPNAME,  IPADDRESS, PCNAME, LOGIN_TIME)
			VALUES (@USERID, @PARAM1, @NAME, @PARAM4,@PARAM5, GETDATE())

		--IF EXISTS (SELECT * FROM MST_EMPLOYEE WHERE EMPCODE=@PARAM1)
		--BEGIN
		--	UPDATE MST_EMPLOYEE SET EMPNAME=IIF(ISNULL(EMPNAME, '')='', @NAME, EMPNAME), EMAILID_O=IIF(ISNULL(EMAILID_O, '')='', @PARAM2, EMAILID_O), 
		--	CONTACTNO_O=IIF(ISNULL(CONTACTNO_O, '')='', REPLACE(@PARAM3, '+91 ', ''), CONTACTNO_O) WHERE EMPCODE=@PARAM1
		--END		
	END

	IF (@ACTIVITY = 'GET_PHONEBOOK') -- PHONEBOOK FOR ON TEXT CHANGED
	BEGIN
		SELECT ISNULL(EMPNAME,'') AS EMPNAME, ISNULL(DEPTNAME,'') AS DEPTNAME, ISNULL(EMAILID_O,'') AS EMAILID_O, ISNULL(CONTACTNO,'') AS CONTACTNO, ISNULL(LANDLINE,'') AS LANDLINE,ISNULL(EMPCODE,'') AS EMPCODE,ISNULL(ADID,'') AS ADID
		FROM 
		(
		SELECT EMPNAME, DEPTNAME,ISNULL(EMAILID_O,'') EMAILID_O, CONTACTNO_O AS CONTACTNO,ISNULL(LANDLINE,'') LANDLINE,ISNULL(EMPCODE,'')EMPCODE,ISNULL(ADID,'')ADID
		FROM MST_EMPLOYEE WHERE ISACTIVE=1
		UNION
		SELECT NAME, DEPTNAME,ISNULL(EMAILID,'') AS EMAILID_O, CONTACTNO, '','','' FROM MST_CONTACTS
		) T 
		WHERE (EMPNAME+ISNULL(LANDLINE, '')+ISNULL(EMPCODE, '')+ISNULL(ADID, '')) LIKE '%'+@PARAM1+'%'
		ORDER BY EMPNAME
	END

	IF (@ACTIVITY = 'GET_ACTIVE_MENUS') -- GET ACTIVE MENU FOR LEFT PANEL
	BEGIN
		SELECT MENUID, MENU_NAME AS MENUNAME, MENU_ICON AS MENUICON, CAST(HAS_CHILD AS INT) AS HASCHILD, CAST(STATUS AS INT) AS STATUS, URL, MENU_ORDER AS MENUORDER
		FROM MST_MENUS WHERE MENUID<1000 AND STATUS=1 ORDER BY MENU_ORDER
	END

	IF (@ACTIVITY = 'GET_ACTIVE_SUBMENUS') -- GET ACTIVE SUBMENU FOR LEFT PANEL
	BEGIN
		SELECT MENUID, SUBMENUID, SUBMENU_NAME AS SUBMENUNAME, CAST(STATUS AS INT) AS STATUS, URL 
		FROM MST_SUBMENUS WHERE STATUS=1 AND MENUID<1000 ORDER BY SUBMENUID
	END

	IF (@ACTIVITY = 'FILL_MENU')		--FILL MENU HEADER
	BEGIN
		SELECT MENUID, MENU_NAME AS MENUNAME, MENU_ICON AS MENUICON, CAST(HAS_CHILD AS INT) AS HASCHILD, URL 
		FROM MST_MENUS  WHERE STATUS=1 AND MENUID IN (SELECT DISTINCT MENUID FROM MST_MENUACCESS WHERE MENUID < 1000 AND (ADID='*' OR ADID=@USERID))		
		ORDER BY MENU_ORDER
	END

	IF (@ACTIVITY = 'FILL_SUBMENU')		--FILL SUB-MENU BY PARENT MENU ID & USER DETAILS
	BEGIN
		SELECT SUBMENUID, SUBMENU_NAME AS SUBMENUNAME, URL FROM MST_SUBMENUS A WHERE STATUS=1 AND MENUID=@PARAM1 
		AND SUBMENUID IN (SELECT SUBMENUID FROM MST_MENUACCESS B WHERE MENUID < 1000 AND MENUID=@PARAM1  AND (ADID='*' OR ADID=@USERID))
		AND SUBMENUID NOT IN (SELECT SUBMENUID FROM MST_MENUEXCLUDE C WHERE A.MENUID=C.MENUID AND A.SUBMENUID=C.SUBMENUID AND EMPCODE=@USERID)
		ORDER BY SUBMENUID
	END

	-------------------------------------------------PK-Other project Activities-------------------------------------------------------------------------------------
	IF (@ACTIVITY = 'FILL_SLIDER')
	BEGIN
		SELECT ID, IMAGE_NAME, '~/Files/SLIDER/'+IMAGE_NAME AS IMAGE_URL, ISACTIVE, USERID, UNAME, TDATE 
		FROM MST_SLIDER WHERE ISACTIVE=1 ORDER BY ID
	END

	IF (@ACTIVITY = 'FILL_MENU_OLD')		--FILL MENU HEADER (FOR OLD eConnect)
	BEGIN
		SELECT MENUID, MENU_NAME, COUNT(*) AS TOTAL FROM MST_MENUS  WHERE STATUS=1 
		AND MENUID IN (SELECT DISTINCT MENUID FROM MST_MENUACCESS WHERE MENUID>1000 AND (ADID='*' OR ADID=@USERID))		
		GROUP BY MENUID, MENU_NAME ORDER BY MENU_NAME
	END

	IF (@ACTIVITY = 'FILL_SUBMENU_OLD')		--FILL SUB-MENU BY PARENT MENU ID & USER DETAILS (FOR OLD eConnect)
	BEGIN
		SELECT SUBMENUID, SUBMENU_NAME, URL FROM MST_SUBMENUS WHERE STATUS=1 AND MENUID=@PARAM1 
		AND SUBMENUID IN (SELECT SUBMENUID FROM MST_MENUACCESS WHERE MENUID > 1000 AND MENUID=@PARAM1  AND (ADID='*' OR ADID=@USERID))		
		ORDER BY SUBMENUID
	END

	IF (@ACTIVITY = 'CHECK_PERMISSION') -- CHECK WEBPAGE PERMISSION BY ADID AND REQUESTED URL
	BEGIN
		IF EXISTS (SELECT * FROM MST_MENUS WHERE URL=@PARAM1 AND MENUID IN (SELECT MENUID FROM MST_MENUACCESS WHERE ADID=@USERID OR ADID='*'))
		BEGIN
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT A.* FROM MST_SUBMENUS A INNER JOIN MST_MENUACCESS B ON A.MENUID=B.MENUID AND A.SUBMENUID=B.SUBMENUID WHERE A.URL=@PARAM1 AND (B.ADID=@USERID OR B.ADID='*'))
			BEGIN
				SELECT 1 AS FLAG
			END
			ELSE
			BEGIN
				SELECT 0 AS FLAG
			END
		END
    END

	IF (@ACTIVITY = 'FILL_MENU_BY_ADID')
	BEGIN
		SELECT MENUID, SUBMENUID, ADID AS EMPADID FROM MST_MENUACCESS WHERE ADID IN (@USERID,'*')
	END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Master]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROC [dbo].[usp_Master]
(
    @ACTIVITY			VARCHAR(200)='',
    @DOCNO				INT=0,
	@PLANT				VARCHAR(20)='',
	@DEPT				VARCHAR(20)='',
	@USERID				VARCHAR(20)=NULL,	
    @PARAM1				VARCHAR(100)='',
    @PARAM2				VARCHAR(100)='',
    @PARAM3				VARCHAR(100)=''
)
AS
BEGIN

    IF(@ACTIVITY = 'FILL_OPTION_KEYID')             --FILL BY KEY ID
    BEGIN
        SELECT KEYID AS CODE, TRIM(DESCR) AS NAME FROM MST_CODEDEF WHERE ISACTIVE=1 AND CODE=@DOCNO 
        AND ISNULL(VALUE, '')=IIF(@PARAM1='', ISNULL(VALUE, ''), @PARAM1) ORDER BY KEYID
    END

    IF(@ACTIVITY = 'FILL_OPTION_VALUE')             --FILL BY KEY VALUE
    BEGIN
        SELECT VALUE AS CODE, TRIM(DESCR) AS NAME FROM MST_CODEDEF WHERE ISACTIVE=1 AND CODE=@DOCNO 
		ORDER BY KEYID
    END

	IF(@ACTIVITY = 'FILL_OPTION_DESCR')             --FILL BY DESCRIPTION
    BEGIN
        SELECT TRIM(DESCR) AS CODE, TRIM(DESCR) AS NAME FROM MST_CODEDEF WHERE ISACTIVE=1 AND CODE=@DOCNO 
		AND ISNULL(VALUE, '')=IIF(@PARAM1='', ISNULL(VALUE, ''), @PARAM1) ORDER BY KEYID
    END

    IF(@ACTIVITY = 'GET_CONFIG')                    --GET CONFIG DATA
    BEGIN
        SELECT MODULE, CATEGORY1, CATEGORY2, VALUE, LVL FROM MST_CONFIG WHERE MODULE=@PARAM1 AND CATEGORY1=@PARAM2 AND (CATEGORY2=@PARAM3 OR @PARAM3 ='')
    END

    IF (@ACTIVITY = 'FILL_EMP_BY_CODE')             --FILL EMPLOYEE WITH EMPLOYEE CODE
    BEGIN
        SELECT EMPCODE AS CODE, EMPCODE + ' - ' + EMPNAME + ' (' + DEPTNAME +')' AS NAME FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND EMPCODE<>'' ORDER BY EMPNAME
    END

    IF (@ACTIVITY = 'FILL_EMP_BY_ADID')             --FILL EMPLOYEE WITH ADID
    BEGIN
        SELECT ADID AS CODE, ADID + ' - ' + EMPNAME + ' (' + DEPTNAME +')' AS NAME FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND ADID<>'' ORDER BY EMPNAME
    END

	IF (@ACTIVITY = 'FILL_EMP_BY_AD_EMPCODE')				--FILL EMPLOYEE WITH NAME AND EMPCODE
	BEGIN
		SELECT ADID AS CODE, EMPCODE +' - '+ EMPNAME AS NAME FROM MST_EMPLOYEE WHERE ADID IS NOT NULL ORDER BY EMPNAME
	END

	IF (@ACTIVITY = 'FILL_EMP_BY_AD_EMPCODE1')				--FILL EMPLOYEE WITH ADID AND EMPCODE/ADID
	BEGIN
		SELECT ADID AS CODE, EMPCODE +' - '+ EMPNAME +' - '+ ADID AS NAME FROM MST_EMPLOYEE WHERE ADID IS NOT NULL ORDER BY EMPNAME
	END

    IF (@ACTIVITY = 'FILL_DEPT')                    --FILL DEPARTMENT
    BEGIN
        SELECT DEPTCODE AS CODE, TRIM(DEPTNAME) AS NAME FROM MST_DEPARTMENT WHERE ISACTIVE=1 ORDER BY DEPTNAME
    END    

    IF (@ACTIVITY = 'GET_HOD')               --FILL HOD BY DEPTCODE
    BEGIN
		SELECT HODCODE AS HOD_ADID, dbo.FN_EMPCODE(HODCODE) AS HOD_EMPCODE, dbo.FN_EMPNAME(HODCODE) AS HOD_NAME, dbo.FN_DEPTNAME(@PARAM1) AS DEPT_NAME 
		FROM MST_DEPTHOD WHERE ISACTIVE=1 AND DEPTCODE=@PARAM1 AND PLANT=IIF(@PLANT='', 'BAWAL-PACK', @PLANT)
        --SELECT HOD_ADID, dbo.FN_EMPCODE(HOD_ADID) AS HOD_EMPCODE, dbo.FN_EMPNAME(HOD_ADID) AS HOD_NAME, dbo.FN_DEPTNAME(@PARAM1) AS DEPT_NAME FROM MST_DEPARTMENT WHERE ISACTIVE=1 AND DEPTCODE=@PARAM1;
    END
	
	IF (@ACTIVITY = 'FILL_DEPT_HOD')					--FILL PRIMARY DEPT HOD BY DEPTCODE
    BEGIN
        SELECT HODCODE AS CODE, dbo.FN_EMPNAME(HODCODE) AS NAME FROM MST_DEPTHOD WHERE ISACTIVE=1 AND DEPTCODE=@DEPT AND PLANT=@PLANT
    END

	IF (@ACTIVITY = 'FILL_DEPT_HOD_ALL')          --FILL PRIMARY & SECONDARY DEPT HOD BY DEPTCODE
    BEGIN
		SELECT HODCODE2 AS CODE, dbo.FN_EMPNAME(HODCODE2) AS NAME FROM MST_DEPTHOD WHERE ISNULL(HODCODE2,'')<>'' AND DEPTCODE=@DEPT AND PLANT=@PLANT
		UNION
        SELECT HODCODE, dbo.FN_EMPNAME(HODCODE) FROM MST_DEPTHOD WHERE ISACTIVE=1 AND DEPTCODE=@DEPT AND PLANT=@PLANT
    END

	IF (@ACTIVITY = 'FILL_EMP_HOD')					    --FILL PRIMARY DEPT HOD BY EMPCODE
    BEGIN
		SELECT HODCODE AS CODE, dbo.FN_EMPNAME(HODCODE) AS NAME FROM MST_DEPTHOD WHERE ISACTIVE=1 AND DEPTCODE=dbo.FN_EMPDEPTCODE(@USERID) AND PLANT=dbo.FN_EMPPLANT(@USERID)
    END

	IF (@ACTIVITY = 'FILL_EMP_HOD_PS')          --FILL PRIMARY & SECONDARY DEPT HOD BY EMPCODE
    BEGIN
		SELECT HODCODE2 AS CODE, dbo.FN_EMPNAME(HODCODE2) AS NAME FROM MST_DEPTHOD WHERE ISNULL(HODCODE2,'')<>'' AND DEPTCODE=dbo.FN_EMPDEPTCODE(@USERID) AND PLANT=dbo.FN_EMPPLANT(@USERID)
		UNION
        SELECT HODCODE, dbo.FN_EMPNAME(HODCODE) FROM MST_DEPTHOD WHERE ISACTIVE=1 AND DEPTCODE=dbo.FN_EMPDEPTCODE(@USERID) AND PLANT=dbo.FN_EMPPLANT(@USERID)
    END

	IF (@ACTIVITY = 'FILL_EMP_HOD_ALL')				--FILL ALL APPROVERS BY EMPCODE
    BEGIN
        SELECT dbo.FN_EMPADID(APPRID) AS CODE, APPRNAME AS NAME FROM MST_EMPLOYEE WHERE (ISNULL(ADID,'')<>'' AND ADID=@USERID) OR (ISNULL(EMPCODE,'')<>'' AND EMPCODE=@USERID)
		UNION
		SELECT HODCODE AS CODE, dbo.FN_EMPNAME(HODCODE) AS NAME FROM MST_DEPTHOD WHERE ISACTIVE=1 AND DEPTCODE=dbo.FN_EMPDEPTCODE(@USERID) AND PLANT=dbo.FN_EMPPLANT(@USERID)
    END

	--IF (@ACTIVITY = 'FILL_EMP_HOD')          --FILL CURRENT APPROVER AND DEPT HOD BY DEPTCODE
 --   BEGIN
 --       SELECT dbo.FN_EMPADID(APPRID) AS CODE, APPRNAME AS NAME FROM MST_EMPLOYEE WHERE (ISNULL(ADID,'')<>'' AND ADID=@USERID) OR (ISNULL(EMPCODE,'')<>'' AND EMPCODE=@USERID)
	--	UNION
	--	SELECT HOD_ADID, dbo.FN_EMPNAME(HOD_ADID) AS HOD_NAME
	--	FROM MST_DEPARTMENT WHERE ISACTIVE=1 AND DEPTCODE=(SELECT DEPTCODE FROM MST_EMPLOYEE WHERE (ISNULL(ADID,'')<>'' AND ADID=@USERID) OR (ISNULL(EMPCODE,'')<>'' AND EMPCODE=@USERID))
 --   END

	IF (@ACTIVITY = 'GET_EMAILID')               --GET EMAIL ID
    BEGIN
        SELECT EMAILID_O AS EMAILID FROM MST_EMPLOYEE WHERE (ISNULL(ADID,'')<>'' AND ADID=@USERID) OR (ISNULL(EMPCODE,'')<>'' AND EMPCODE=@USERID)
    END  

	IF (@ACTIVITY = 'FILL_DESIGNATION')               --FILL DESIGNATION
    BEGIN
        SELECT DISTINCT DESIGNATION AS CODE, DESIGNATION AS NAME FROM MST_EMPLOYEE WHERE DESIGNATION <>''
        ORDER BY  DESIGNATION
    END 
	   
	IF(@ACTIVITY = 'GETMONTH')
	BEGIN
		SELECT CONVERT(CHAR(3),DATEADD(MM, S.NUMBER, CONVERT(DATETIME, 0)), 0) AS CODE, CONVERT(CHAR(3),DATEADD(MM, S.NUMBER, CONVERT(DATETIME, 0)), 0) AS NAME
	   	FROM MASTER.DBO.SPT_VALUES S WHERE [TYPE] = 'P' AND S.NUMBER BETWEEN 0 AND 11
	END

	IF(@ACTIVITY = 'GetTodayFoodMenu')
	BEGIN
		SELECT CATEGORY1 Snacks, CATEGORY2 Day, VALUE Menu FROM MST_CONFIG WHERE MODULE='FOOD' AND CATEGORY2 = FORMAT(GETDATE(), 'dddd')
	END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Misc]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Misc]
@ACTIVITY				VARCHAR(50)='',
@STATUS					INT=0,
@USERID					VARCHAR(20)='',
@IMAGE					VARBINARY(MAX)	= NULL,	

@DATE1					DATETIME='',
@DATE2					DATETIME='',
@PARAM1					VARCHAR(100)='',
@PARAM2					VARCHAR(100)=''
AS
BEGIN
SET NOCOUNT ON;
DECLARE @L_NO INT=0, @L_STATUS INT=0;

	IF (@ACTIVITY = 'FILL_USER_LINES')		--FILL LINES FOR USERS
	BEGIN
		SELECT LINE_NO, ASSIGNED_USER, STATUS, dbo.FN_CODEDEF(35, STATUS) AS STATUS_DESCR, UPD_BY, UPD_DATE 
		FROM MAT_MOV_USERS WHERE ASSIGNED_USER=@USERID ORDER BY SRNO		
	END

	IF (@ACTIVITY = 'GENERATE_REQ')		--REQUEST GENERATE FOR PICK-UP
	BEGIN
		IF NOT EXISTS (SELECT * FROM MAT_MOV_DETAILS WHERE STATUS=1 AND LINE_NO=@PARAM1)
		BEGIN
			UPDATE MAT_MOV_USERS SET STATUS=1, UPD_BY=@USERID, UPD_DATE=GETDATE() WHERE LINE_NO=@PARAM1

			INSERT INTO MAT_MOV_DETAILS (LINE_NO, STATUS, REQ_RAISED_BY, REQ_DATE)
								 VALUES (@PARAM1, 1, @USERID, GETDATE())
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			SELECT 2 AS FLAG
		END
	END

	IF (@ACTIVITY = 'FILL_WH_LINES')		--FILL LINES FOR WAREHOUSE
	BEGIN
		SELECT LINE_NO, ASSIGNED_USER, STATUS, dbo.FN_CODEDEF(35, STATUS) AS STATUS_DESCR, UPD_BY, UPD_DATE 
		FROM MAT_MOV_USERS ORDER BY SRNO		
	END

	IF (@ACTIVITY = 'RECIEVE_REQ')		--REQUEST RECIEVE FOR PICK-UP
	BEGIN
		SELECT @L_NO=SRNO, @L_STATUS=STATUS FROM MAT_MOV_DETAILS WHERE STATUS<>3 AND LINE_NO=@PARAM1
		IF(@L_STATUS = 1)	--FOR ACKNOWLEDGEMENT
		BEGIN
			UPDATE MAT_MOV_USERS SET STATUS=2, UPD_BY=@USERID, UPD_DATE=GETDATE() WHERE LINE_NO=@PARAM1

			UPDATE MAT_MOV_DETAILS SET STATUS=2, ACKNOWLEDGE_BY=@USERID, ACKNOWLEDGE_DATE=GETDATE() WHERE SRNO=@L_NO AND LINE_NO=@PARAM1

			SELECT 1 AS FLAG, 'Request Acknowledged' AS MSG
		END
		ELSE IF(@L_STATUS = 2)	--FOR PICK-UP
		BEGIN
			UPDATE MAT_MOV_USERS SET STATUS=NULL, UPD_BY=NULL, UPD_DATE=NULL WHERE LINE_NO=@PARAM1

			UPDATE MAT_MOV_DETAILS SET STATUS=3, PICKED_BY=@USERID, PICKED_DATE=GETDATE() WHERE SRNO=@L_NO AND LINE_NO=@PARAM1

			SELECT 1 AS FLAG, 'Pick-Up Successfully' AS MSG
		END
		ELSE
		BEGIN
			SELECT 2 AS FLAG
		END
	END

	IF (@ACTIVITY = 'CHECK_PENDING_STATUS')		--GET PENDING STATUS
	BEGIN
		SELECT * FROM MAT_MOV_USERS WHERE STATUS=1	
	END

	----------------- SLIDER ---------------------

	IF(@ACTIVITY = 'SLIDER')
	BEGIN
		SELECT (SELECT COUNT(*) FROM MISC_SLIDER where ISVALID = 1) AS TIMAGES, SNO AS PARAM1, IMAGE_NAME AS DOCNAME FROM MISC_SLIDER WHERE ISVALID= 1
	END
	IF(@ACTIVITY = 'ADDIMAGE')
	BEGIN
		INSERT INTO MISC_SLIDER(IMAGE_NAME, ISVALID, USERID) VALUES(@IMAGE, 1, @USERID)
	END
	IF(@ACTIVITY = 'SLIDER_IMAGE_COUNT')
	BEGIN
		SELECT CAST(SNO AS VARCHAR) AS PARAM1 FROM MISC_SLIDER where ISVALID = 1
	END
	IF(@ACTIVITY = 'DELETE_IMAGE')
	BEGIN
		DELETE FROM MISC_SLIDER WHERE SNO = @PARAM1
	END

	--IF(@ACTIVITY = 'SLIDER')
	--BEGIN
	--	SELECT (SELECT COUNT(*) FROM MISC_SLIDER where ISVALID = 1) AS TIMAGES, SNO AS PARAM1, IMAGE_NAME AS DOCNAME FROM MISC_SLIDER WHERE ISVALID= 1
	--END
	--IF(@ACTIVITY = 'ADDIMAGE')
	--BEGIN
	--	INSERT INTO MISC_SLIDER(IMAGE_NAME, ISVALID, USERID) VALUES(@IMAGE, 1, @USERID)
	--END
	--IF(@ACTIVITY = 'SLIDER_IMAGE_COUNT')
	--BEGIN
	--	SELECT CAST(SNO AS VARCHAR) AS PARAM1 FROM MISC_SLIDER where ISVALID = 1
	--END
	--IF(@ACTIVITY = 'DELETE_IMAGE')
	--BEGIN
	--	DELETE FROM MISC_SLIDER WHERE SNO = @PARAM1
	--END

	--------------------ECONNECT URLS--------------

	IF (@ACTIVITY = 'ECONNECT_URL')						-- APPLICATION URLS DATA
	BEGIN
		SELECT SYS_NAME AS PARAM1,  PRIMARY_URL AS PARAM2, ISNULL(SECONDARY_URL,'') AS PARAM3, DESCRIPTION AS REMARKS 
		FROM URL_INFO WHERE DEPT= @PARAM1 OR DEPT='*'
		ORDER BY SRNO
	END	
	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_OHC]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[usp_OHC]
(
    @ACTIVITY             VARCHAR(50)='',
	@REQNO                INT=0,
	@AADHAR               VARCHAR(20)='',
	@PLANT                VARCHAR(20)='',
	@EMPCODE              VARCHAR(50)='',
	@EMPNAME              VARCHAR(100)='',
	@DEPT                 VARCHAR(50)='',
	@CONDITION            VARCHAR(20)='',
	@INJURY               VARCHAR(20)='',
	@INJURY_TYPE          VARCHAR(20)='',
	@INJURY_TYPE_OTHER    VARCHAR(20)='',
	@NURSHING_STAFF       VARCHAR(100)='',
	@QTY                  VARCHAR(2000)='',
	@RESTGIVEN            CHAR(1) ='',
	@REFER                CHAR(1)='',
	@TREATMENT            VARCHAR(2000)='',
	@REMARKS              VARCHAR(2000)='',
	@USERID               VARCHAR(50)='',
	@DATE1			      DATETIME='',
	@DATE2			      DATETIME='',
	@TIME1                TIME='',
	@TIME2                TIME='',
	@PARAM1				  VARCHAR(100)='',
	@PARAM2				  VARCHAR(100)=''
)

AS
BEGIN
DECLARE @L_NO INT, @L_P1 VARCHAR(100)=''

	IF (@ACTIVITY = 'ADD_OHC')   --ADD/UPDATE 
	BEGIN
		IF (@REQNO > 0)
		BEGIN
			UPDATE OHC SET AADHARNO=@AADHAR, EMPCODE=@EMPCODE, EMPNAME=@EMPNAME, DEPT=@DEPT, PATIENT_CONDITION=@CONDITION, INJURY=@INJURY,INJURY_TYPE=@INJURY_TYPE, INJURY_TYPE_OTHER=@INJURY_TYPE_OTHER, NURSHING_STAFF=@NURSHING_STAFF, MEDICINE_QTY=@QTY, REST_GIVEN=@RESTGIVEN, REFER=@REFER, REPORTING_DATE=@DATE1, INTIME=@TIME1, OUTTIME=@TIME2, TREATMENT=@TREATMENT, REMARKS=@REMARKS             
	        WHERE REQNO=@REQNO
			SELECT 2 AS FLAG, @REQNO AS REQNO
		END
		ELSE                                                                                                                                                       
		BEGIN
			SELECT  @REQNO=ISNULL(MAX(REQNO),0)+1  FROM  OHC

			INSERT INTO OHC ( REQNO, AADHARNO, EMPCODE, EMPNAME, DEPT, PATIENT_CONDITION, INJURY, INJURY_TYPE, INJURY_TYPE_OTHER, NURSHING_STAFF, MEDICINE_QTY, REST_GIVEN, REFER, REPORTING_DATE, INTIME, OUTTIME, TREATMENT, REMARKS, USERID, TDATE)
			VALUES( @REQNO, @AADHAR, @EMPCODE, @EMPNAME, @DEPT, @CONDITION, @INJURY, @INJURY_TYPE, @INJURY_TYPE_OTHER, @NURSHING_STAFF, @QTY, @RESTGIVEN, @REFER, @DATE1, @TIME1, @TIME2, @TREATMENT, @REMARKS, @USERID, GETDATE())
	        SELECT 1 AS FLAG, @REQNO AS DOCNO
		END
		
		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  OHC_HISTORY WHERE REQNO=@REQNO
		INSERT INTO OHC_HISTORY(REQNO, SRNO, EMPCODE, EMPNAME,  AADHARNO, NURSHING_STAFF, TREATMENT, REMARKS, USERID, TDATE)
						VALUES (@REQNO, @L_NO, @EMPCODE, @EMPNAME, @AADHAR, @NURSHING_STAFF, @TREATMENT, @REMARKS, @USERID, GETDATE())
	END

	IF(@ACTIVITY  = 'GET_EMP_DATA')
	BEGIN
		SELECT EMPNAME, DEPTNAME FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND EMPCODE=@EMPCODE 
    END

	IF(@ACTIVITY = 'GET_OHC_BY_DOCNO') 
	BEGIN
		SELECT REQNO, AADHARNO, EMPCODE, EMPNAME, DEPT, PATIENT_CONDITION, INJURY, INJURY_TYPE, INJURY_TYPE_OTHER, NURSHING_STAFF, MEDICINE_QTY, REST_GIVEN, REFER, FORMAT(REPORTING_DATE, 'dd-MMM-yyyy') AS REPORTING_DATE, CONVERT(VARCHAR(5),INTIME, 108) AS INTIME , CONVERT(VARCHAR(5),OUTTIME, 108) AS OUTTIME, TREATMENT, REMARKS, USERID, FORMAT(TDATE, 'dd-MMM-yyyy') AS TDATE		          
		FROM OHC  WHERE REQNO=@REQNO 
	END

	IF (@ACTIVITY = 'FILL_PATIENT_HISTORY')		--FILL OHC HISTORY
    BEGIN
		IF(@AADHAR<>'')
		BEGIN
			SELECT REQNO AS REQUESTNO, SRNO, EMPCODE, EMPNAME, ISNULL(AADHARNO, '') AS AADHARNO,  
			ISNULL(NURSHING_STAFF, '') AS NURSHINGSTAFF, ISNULL(TREATMENT, '') AS TREATMENT, REMARKS, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE
			FROM OHC_HISTORY WHERE AADHARNO=@AADHAR ORDER BY REQNO DESC --OR AADHARNO=@AADHAR
		END
		ELSE
		BEGIN
			SELECT REQNO AS REQUESTNO, SRNO, EMPCODE, EMPNAME, ISNULL(AADHARNO, '') AS AADHARNO,  
			ISNULL(NURSHING_STAFF, '') AS NURSHINGSTAFF, ISNULL(TREATMENT, '') AS TREATMENT, REMARKS, USERID, CONVERT(VARCHAR, TDATE, 20) AS TDATE
			FROM OHC_HISTORY WHERE EMPCODE=@EMPCODE ORDER BY REQNO DESC --OR AADHARNO=@AADHAR
		END        
    END 

	IF (@ACTIVITY = 'FILL_OHC_LIST')			
	BEGIN
		SELECT REQNO, AADHARNO, EMPCODE, EMPNAME, DEPT, PATIENT_CONDITION, INJURY, INJURY_TYPE, INJURY_TYPE_OTHER, NURSHING_STAFF, MEDICINE_QTY, REST_GIVEN, REFER, FORMAT(REPORTING_DATE, 'dd-MMM-yyyy') AS REPORTING_DATE, CONVERT(VARCHAR(5),INTIME, 108) AS INTIME, CONVERT(VARCHAR(5),OUTTIME, 108) AS OUTTIME, TREATMENT, REMARKS, USERID, FORMAT(TDATE, 'dd-MMM-yyyy') AS TDATE		          
		FROM OHC WHERE CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2022-04-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY REQNO DESC
	END


	IF (@ACTIVITY = 'GET_INJURYWISE_COUNT')			
	BEGIN
		SELECT INJURY_TYPE AS TYPE, COUNT(*) AS TOTAL FROM OHC
		WHERE CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2022-04-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY INJURY_TYPE
	END

	IF (@ACTIVITY = 'GET_PATIENT_CONDITION_COUNT')			
	BEGIN
		SELECT PATIENT_CONDITION AS TYPE, COUNT(*) AS TOTAL FROM OHC
		WHERE CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2022-04-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY PATIENT_CONDITION
	END

	IF (@ACTIVITY = 'GET_DEPTWISE_COUNT')			
	BEGIN
		SELECT DEPT AS DEPTNAME, COUNT(*) AS TOTAL FROM OHC
		WHERE CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2022-04-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY DEPT
	END

	IF (@ACTIVITY = 'GET_DATEWISE_COUNT')			
	BEGIN
		SELECT  RIGHT('0' + DAY(CONVERT(DATE, TDATE)), 2) + ' ' + CONVERT(CHAR(4), CONVERT(DATE, TDATE), 100) AS DATADATE, COUNT(*) AS TOTAL FROM OHC
		WHERE CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2022-04-01') AND ISNULL(@DATE2, GETDATE())
		GROUP BY CONVERT(DATE, TDATE)

	END


END
GO
/****** Object:  StoredProcedure [dbo].[usp_PE]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[usp_PE]
(
	@DOCNO				int,
	@ACTIVITY           VARCHAR(50)='',
	@BARCODE            VARCHAR(50)='',
	@CUSTOMER           VARCHAR(50)='',
	@MODEL              VARCHAR(50)='',
	@LINE               VARCHAR(50)='',
	@SCRAP_CATG         VARCHAR(50)='',
	@SCRAP_SUB_CATG     VARCHAR(50)='',
	@4M_CATG			VARCHAR(50)='',
	@SHIFT				VARCHAR(50)='',
	@REMARKS			VARCHAR(500)='',
	@USERID				VARCHAR(50)='',
	@SCRAP_DATE			DATETIME='',
	@PROD_DATE			DATETIME='',
	@QUANTITY			int,
	@DATE1			    DATETIME='',
	@DATE2			    DATETIME='',
    @PARAM1				VARCHAR(100)=''
)
AS
BEGIN
DECLARE @L_NO INT
	IF(@ACTIVITY = 'FILL_OPTION_VALUE')             --FILL CODE DESCR LIST BY VALUE
	BEGIN
		SELECT VALUE AS CODE, TRIM(DESCR) AS NAME FROM MST_CODEDEF WHERE ISACTIVE=1 AND CODE=@DOCNO 
	END

	IF(@ACTIVITY = 'FILL_OPTION_KEYID')             --FILL CODE DESCR LIST ON SELECTION OF PARAM1
	BEGIN
		SELECT TRIM(DESCR) AS CODE, TRIM(DESCR) AS NAME FROM MST_CODEDEF WHERE ISACTIVE=1 AND CODE=@DOCNO AND VALUE=@PARAM1
	END

	IF (@ACTIVITY = 'ADD_SCRAP')	--ADD SCRAP MATERIAL
	BEGIN
		IF NOT EXISTS(SELECT * FROM REDBIN_MASTER WHERE BARCODE=@BARCODE)
		BEGIN
			INSERT INTO REDBIN_MASTER (BARCODE, CUSTOMER, MODEL, LINE_NO, SCRAP_CATG, SCRAP_SUB_CATG, [4M_CATG], SHIFT, SCRAP_DATE, REMARKS, OPERATORID, USERID, TDATE)
								VALUES(@BARCODE, @CUSTOMER, @MODEL, @LINE, @SCRAP_CATG, @SCRAP_SUB_CATG, @4M_CATG, @SHIFT, @SCRAP_DATE, @REMARKS, @PARAM1, @USERID, GETDATE())
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			SELECT 3 AS FLAG
		END
	END 

	IF (@ACTIVITY = 'DELETE_SCRAP')		--DELETE SCRAP MATERIAL
    BEGIN
        DELETE FROM REDBIN_MASTER WHERE BARCODE=@BARCODE
        SELECT 1 AS FLAG
    END

	IF(@ACTIVITY='FILL_SCRAP_LIST')		--FILL ALL SCRAP DATA
	BEGIN
		 SELECT BARCODE, CUSTOMER, MODEL AS MODELNAME, LINE_NO AS LINE, SCRAP_CATG AS SCRAPCATG, SCRAP_SUB_CATG AS SCRAPSUBCATG, [4M_CATG] AS MCATG, SHIFT, 
		 CONVERT(VARCHAR, SCRAP_DATE, 23) AS SCRAPDATE, REMARKS, ISNULL(OPERATORID, '') AS OPERATORID, USERID, CONVERT(VARCHAR, TDATE, 23) AS DATE1 
		 FROM REDBIN_MASTER ORDER BY TDATE DESC
	END

	IF(@ACTIVITY='CHECK_REDBIN_ADMIN')		--CHECK REDBIN SYSTEM ADMIN
	BEGIN
		IF  EXISTS(SELECT * FROM MST_CONFIG WHERE MODULE='REDBIN' AND CATEGORY1='ADMIN' AND VALUE=@USERID)
		BEGIN
			SELECT 1 AS FLAG
		END
	END

	IF (@ACTIVITY = 'ADD_PROD_QTY')	--ADD PROD QTY
	BEGIN
		IF NOT EXISTS(SELECT * FROM REDBIN_PROD_QTY WHERE CUSTOMER=@CUSTOMER AND PROD_DATE=@PROD_DATE)
		BEGIN
			SELECT  @L_NO=ISNULL(MAX(ID),0)+1 FROM  REDBIN_PROD_QTY

			INSERT INTO REDBIN_PROD_QTY(ID, CUSTOMER, QUANTITY, PROD_DATE, USERID, TDATE)
								VALUES(@L_NO, @CUSTOMER, @QUANTITY, @PROD_DATE, @USERID, GETDATE())
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			SELECT 3 AS FLAG
		END
	END 

	IF (@ACTIVITY = 'FILL_PROD_LIST')		--FILL ALL PRODUCTION QUANTITY DATA
	BEGIN
		 SELECT CUSTOMER, QUANTITY, CONVERT(VARCHAR, PROD_DATE, 23) AS PRODDATE, (USERID + ' - ' + dbo.FN_EMPNAME(USERID)) AS USERID, CONVERT(VARCHAR, TDATE, 23) AS DATE1 
		 FROM REDBIN_PROD_QTY ORDER BY TDATE DESC
	END

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Rept_Misc]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_Rept_Misc]
@TYPE					INT=0,
@DOCNO					INT=0,
@EMPCODE				VARCHAR(50)='',
@USERID					VARCHAR(50)='',
@DATE1					DATETIME,
@DATE2					DATETIME,
@PARAM1					VARCHAR(100)='',
@PARAM2					VARCHAR(100)='',
@PARAM3					VARCHAR(100)=''
AS
BEGIN
SET NOCOUNT ON;
DECLARE @SQL NVARCHAR(MAX)
	
	IF (@TYPE = 501)		--GET SHIFT PUNCH RECORD IN EXCEL
	BEGIN
		IF(@PARAM1 = 'IN')
		BEGIN
			SELECT A.EMPCODE, B.EMPNAME, B.DEPTNAME, B.BUS_STOP, B.SHIFT, CONVERT(VARCHAR, A.PIN, 105) AS IN_DATE, FORMAT(A.PIN, N'HH:mm') AS IN_TIME, 
			CONVERT(VARCHAR, A.POUT, 105) AS OUT_DATE, FORMAT(A.POUT, N'HH:mm') AS OUT_TIME, dbo.FN_GETDATEDIFF_HHMM(A.PIN, A.POUT) AS WORKING_HOURS,  
			CASE WHEN CONVERT(FLOAT, dbo.FN_GETDATEDIFF_HHMM(A.PIN, A.POUT)) > 8 THEN ROUND(CONVERT(FLOAT, dbo.FN_GETDATEDIFF_HHMM(A.PIN, A.POUT)) - 8, 2) ELSE 0 END AS OT_HOURS, 
			A.LOCATION, A.REMARKS  
			FROM EMPPUNCH_SHIFT A LEFT JOIN EMPCONTRACT_MASTER B ON A.EMPCODE=B.EMPCODE 
			WHERE UPPER(A.EMPCODE)=IIF(@EMPCODE = '', A.EMPCODE, @EMPCODE)  
			AND UPPER(A.LOCATION)=IIF(@PARAM2 = 'ALL', A.LOCATION, @PARAM2)
			AND CONVERT(DATE, A.PIN) BETWEEN ISNULL(@DATE1, GETDATE()) AND ISNULL(@DATE2, GETDATE())
			ORDER BY A.TDATE DESC
		END
		ELSE IF(@PARAM1 = 'OUT')
		BEGIN
			SELECT A.EMPCODE, B.EMPNAME, B.DEPTNAME, B.BUS_STOP, B.SHIFT, CONVERT(VARCHAR, A.PIN, 105) AS IN_DATE, FORMAT(A.PIN, N'HH:mm') AS IN_TIME, 
			CONVERT(VARCHAR, A.POUT, 105) AS OUT_DATE, FORMAT(A.POUT, N'HH:mm') AS OUT_TIME, dbo.FN_GETDATEDIFF_HHMM(A.PIN, A.POUT) AS WORKING_HOURS,  
			CASE WHEN CONVERT(FLOAT, dbo.FN_GETDATEDIFF_HHMM(A.PIN, A.POUT)) > 8 THEN ROUND(CONVERT(FLOAT, dbo.FN_GETDATEDIFF_HHMM(A.PIN, A.POUT)) - 8, 2) ELSE 0 END AS OT_HOURS, 
			A.LOCATION, A.REMARKS  
			FROM EMPPUNCH_SHIFT A LEFT JOIN EMPCONTRACT_MASTER B ON A.EMPCODE=B.EMPCODE 
			WHERE UPPER(A.EMPCODE)=IIF(@EMPCODE = '', A.EMPCODE, @EMPCODE)  
			AND UPPER(A.LOCATION)=IIF(@PARAM2 = 'ALL', A.LOCATION, @PARAM2)
			AND CONVERT(DATE, A.POUT) BETWEEN ISNULL(@DATE1, GETDATE()) AND ISNULL(@DATE2, GETDATE())
			ORDER BY A.TDATE DESC
		END
		--;WITH TBL1 AS
		--(
		--	SELECT ROW_NUMBER() OVER (PARTITION BY EMPCODE ORDER BY VALIDITY_TO DESC) AS SRNO1, *
		--	FROM EMPVALIDITY_HISTORY
		--),
		--TBL2 AS
		--(
		--SELECT * FROM TBL1 WHERE SRNO1=1
		--),
		--TBL3 AS
		--(
		--SELECT A.EMPCODE, B.EMPNAME, B.GENDER, B.DEPTNAME, B.SHIFT AS PLANED_SHIFT, CONVERT(VARCHAR, A.PIN, 23) + ' ' + CONVERT(VARCHAR, A.PIN, 14) AS PIN, CONVERT(VARCHAR, A.POUT, 23) + ' ' + CONVERT(VARCHAR, A.POUT, 14) AS POUT, 
		--DATEDIFF(SECOND, A.PIN, A.POUT) AS TOTAL_SECONDS, dbo.FN_GETDATEDIFF(A.PIN, A.POUT) AS TOTAL_TIME, CASE WHEN A.ISVALID=1 THEN 'Yes' ELSE 'No' END AS ISVALID, A.REMARKS, A.TDATE
		--FROM EMPPUNCH_SHIFT A LEFT JOIN TBL2 B ON A.EMPCODE=B.EMPCODE
		--)
		--SELECT * FROM TBL3
		--ORDER BY TDATE DESC

		--SELECT A.EMPCODE, B.EMPNAME, B.DEPTNAME, CASE WHEN PIN IS NULL THEN (SELECT TOP 1 SHIFT FROM EMPSHIFT_TIME WHERE CONVERT(TIME(0), POUT) BETWEEN DATEADD(minute, 20, CONVERT(TIME(0), END_TIME)) AND END_TIME)
		--ELSE (SELECT TOP 1 SHIFT FROM EMPSHIFT_TIME WHERE CONVERT(TIME(0), PIN) BETWEEN DATEADD(minute, -40, CONVERT(TIME(0), START_TIME)) AND START_TIME) END AS SHIFT,
		--CONVERT(VARCHAR, PIN, 105) AS IN_DATE, FORMAT(PIN, N'HH:mm') AS IN_TIME, CONVERT(VARCHAR, POUT, 105) AS OUT_DATE, FORMAT(POUT, N'HH:mm') AS OUT_TIME, 
		--dbo.FN_GETDATEDIFF_HHMM(PIN, POUT) AS WORKING_HOURS, CASE WHEN CONVERT(FLOAT, dbo.FN_GETDATEDIFF_HHMM(PIN, POUT)) > 8 THEN ROUND(CONVERT(FLOAT, dbo.FN_GETDATEDIFF_HHMM(PIN, POUT)) - 8, 2) ELSE 0 END AS OT_HOURS, LOCATION  
		--FROM EMPPUNCH_SHIFT A LEFT JOIN EMPCONTRACT_MASTER B ON A.EMPCODE=B.EMPCODE 
		--WHERE UPPER(A.EMPCODE)=IIF(@EMPCODE = '', A.EMPCODE, @EMPCODE)  
		--AND UPPER(LOCATION)=@PARAM1
		--AND CONVERT(DATE, A.PIN) = ISNULL(@DATE1, GETDATE())
		--ORDER BY A.TDATE DESC
	END

	IF (@TYPE = 502)		--EMPLOYEE DATEWISE REPORT
	BEGIN
		;WITH DATERANGE  AS
		(
			SELECT PUNCH_DAY=DAY(DATEADD(DD, 0, ISNULL(@DATE1, '2020-06-01'))), PUNCH_DATE=CONVERT(DATE, DATEADD(DD, 0, ISNULL(@DATE1, '2020-06-01'))) WHERE DATEADD(DD, 1, ISNULL(@DATE1, '2020-06-01')) <= ISNULL(@DATE2, CONVERT(DATE, GETDATE()))
			UNION ALL
			SELECT DAY(DATEADD(DD, 1, PUNCH_DATE)),CONVERT(DATE, DATEADD(DD, 1, PUNCH_DATE)) FROM DATERANGE WHERE DATEADD(DD, 1, PUNCH_DATE) <= ISNULL(@DATE2, CONVERT(DATE, GETDATE()))
		)
		SELECT * INTO #TMP_DATES FROM DATERANGE

		DECLARE @COLUMN VARCHAR(MAX)
		SELECT @COLUMN=ISNULL(@COLUMN + ',','')+ '['+ CAST(PUNCH_DAY AS VARCHAR) + ']' FROM #TMP_DATES T

		DECLARE @QUERY VARCHAR(MAX)

		SET @QUERY = 'SELECT * FROM
		(
				SELECT A.EMPCODE, (SELECT EMPNAME FROM EMPCONTRACT_MASTER WHERE EMPCODE=A.EMPCODE) AS EMPNAME,
				(SELECT DEPTNAME FROM EMPCONTRACT_MASTER WHERE EMPCODE=A.EMPCODE) AS DEPTNAME,
				B.PUNCH_DAY, dbo.FN_GETDATEDIFF_HHMM(A.PIN, A.POUT) AS TOTAL_TIME 
				FROM EMPPUNCH_SHIFT A INNER JOIN #TMP_DATES B ON CONVERT(DATE, A.PIN)=B.PUNCH_DATE AND A.POUT IS NOT NULL 
				AND UPPER(A.EMPCODE)=IIF('''+ @EMPCODE +''' = '''', EMPCODE, '''+ @EMPCODE +''') 
				AND UPPER(A.LOCATION)=IIF('''+ @PARAM1 +''' = ''ALL'', A.LOCATION, '''+ @PARAM1 +''')
		) AS T2 
		PIVOT
		(
				MIN([TOTAL_TIME]) FOR [PUNCH_DAY] IN (' + @COLUMN + ')
		) AS P1 ORDER BY EMPCODE'
		EXEC (@QUERY)
		DROP TABLE #TMP_DATES
	END

	IF (@TYPE = 503)		--EMPLOYEE SHIFT PUNCH HISTORY REPORT
	BEGIN
		SELECT EMPCODE, PUNCH_DATE, PUNCH_TYPE, PLACE, LOCATION, REMARKS, TDATE, USERID, PCNAME FROM EMPPUNCH_HISTORY WHERE PLACE='GATE'
		AND UPPER(EMPCODE)=IIF(@EMPCODE = '', EMPCODE, @EMPCODE) 
		AND UPPER(LOCATION)=IIF(@PARAM1 = 'ALL', LOCATION, @PARAM1)
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-05-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY TDATE DESC, EMPCODE
	END

	IF (@TYPE = 504)		--CANTEEN PUNCH REPORT
	BEGIN
		SELECT EMPCODE, CONVERT(VARCHAR, PIN, 23) + ' ' + CONVERT(VARCHAR, PIN, 14) AS PUNCH_TIME, IIF(ISVALID=1, 'Y', 'N') AS ISVALID  
		FROM EMPPUNCH_CANTEEN WHERE UPPER(EMPCODE)=IIF(@EMPCODE = '', EMPCODE, @EMPCODE) 
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2022-02-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY TDATE DESC, EMPCODE
	END

	IF (@TYPE = 505)		--LINE PUNCH REPORT
	BEGIN
		SELECT EMPCODE, CONVERT(VARCHAR, PUNCH_TIME, 23) + ' ' + CONVERT(VARCHAR, PUNCH_TIME, 14) AS PUNCH_TIME, LINE_NO, STATION
		FROM EMPPUNCH_LINE_NEW WHERE UPPER(EMPCODE)=IIF(@EMPCODE = '', EMPCODE, @EMPCODE) 
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2022-02-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY TDATE DESC, EMPCODE
	END

	--IF (@TYPE = 503)		--GET LINE PUNCH RECORD IN EXCEL
	--BEGIN
	--	SELECT A.EMPCODE, (SELECT TOP 1 EMPNAME FROM EMPVALIDITY_HISTORY B WHERE B.EMPCODE=A.EMPCODE AND CONVERT(DATE, A.TDATE) BETWEEN B.VALIDITY_FROM AND B.VALIDITY_TO) AS EMPNAME,
	--	(SELECT TOP 1 GENDER FROM EMPVALIDITY_HISTORY B WHERE B.EMPCODE=A.EMPCODE AND CONVERT(DATE, A.TDATE) BETWEEN B.VALIDITY_FROM AND B.VALIDITY_TO) AS GENDER,
	--	(SELECT TOP 1 DEPTNAME FROM EMPVALIDITY_HISTORY B WHERE B.EMPCODE=A.EMPCODE AND CONVERT(DATE, A.TDATE) BETWEEN B.VALIDITY_FROM AND B.VALIDITY_TO) AS DEPTNAME,
	--	(SELECT TOP 1 SHIFT FROM EMPVALIDITY_HISTORY B WHERE B.EMPCODE=A.EMPCODE AND CONVERT(DATE, A.TDATE) BETWEEN B.VALIDITY_FROM AND B.VALIDITY_TO) AS PLANNED_SHIFT,
	--	A.USER_TYPE, A.PC_GRID, A.EMP_GRID, A.TYPE, CONVERT(VARCHAR, A.PIN, 23) + ' ' + CONVERT(VARCHAR, A.PIN, 14) AS PIN, CONVERT(VARCHAR, A.POUT, 23) + ' ' + CONVERT(VARCHAR, A.POUT, 14) AS POUT,
	--	CASE WHEN TYPE='SHIFT_TIME' THEN DATEDIFF(SECOND, A.PIN, A.POUT) ELSE DATEDIFF(SECOND, A.POUT, A.PIN) END AS TOTAL_SECONDS, CASE WHEN TYPE='SHIFT_TIME' THEN dbo.FN_GETDATEDIFF(A.PIN, A.POUT) ELSE dbo.FN_GETDATEDIFF(A.POUT, A.PIN) END AS TOTAL_TIME,  
	--	CASE WHEN A.ISVALID=1 THEN 'Yes' ELSE 'No' END AS ISVALID, A.REMARKS, A.TDATE
	--	FROM EMPPUNCH_LINE A WHERE UPPER(EMPCODE)=IIF(@EMPCODE = '', EMPCODE, @EMPCODE)  
	--	AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-05-01') AND ISNULL(@DATE2, GETDATE())
	--	ORDER BY TDATE DESC
	--END

	--IF (@TYPE = 505)		--GET TOTAL WORKING HOURS 
	--BEGIN
	--	SELECT EMPCODE, TOTAL_SHIFT_TIME, CAST((TOTAL_SHIFT_TIME/60)/60 AS VARCHAR(8)) + ':' + RIGHT('0' + CAST((TOTAL_SHIFT_TIME/60)%60 AS VARCHAR(2)), 2) + ':' + RIGHT('0' + CAST(TOTAL_SHIFT_TIME%60 AS VARCHAR(2)), 2) AS 'HH:MM:SS',
	--	TOTAL_BREAK_TIME, CAST((TOTAL_BREAK_TIME/60)/60 AS VARCHAR(8)) + ':' + RIGHT('0' + CAST((TOTAL_BREAK_TIME/60)%60 AS VARCHAR(2)), 2) + ':' + RIGHT('0' + CAST(TOTAL_BREAK_TIME%60 AS VARCHAR(2)), 2) AS 'HH:MM:SS',
	--	(TOTAL_SHIFT_TIME - TOTAL_BREAK_TIME) AS WORKING_HOURS, CAST(((TOTAL_SHIFT_TIME - TOTAL_BREAK_TIME)/60)/60 AS VARCHAR(8)) + ':' + RIGHT('0' + CAST(((TOTAL_SHIFT_TIME - TOTAL_BREAK_TIME)/60)%60 AS VARCHAR(2)), 2) + ':' + RIGHT('0' + CAST((TOTAL_SHIFT_TIME - TOTAL_BREAK_TIME)%60 AS VARCHAR(2)), 2) AS 'HH:MM:SS'
	--	FROM 
	--	(
	--		SELECT EMPCODE, DATEDIFF(SECOND, A.PIN, A.POUT) AS TOTAL_SHIFT_TIME, 
	--		(SELECT SUM(DATEDIFF(SECOND, B.POUT, B.PIN)) FROM  EMPPUNCH_LINE B WHERE B.USER_TYPE='EMPLOYEE' AND B.TYPE<>'SHIFT_TIME' AND (B.TDATE BETWEEN A.PIN AND A.POUT) AND B.EMPCODE=A.EMPCODE GROUP BY B.EMPCODE) AS TOTAL_BREAK_TIME
	--		FROM  EMPPUNCH_SHIFT A WHERE A.PIN IS NOT NULL AND A.POUT IS NOT NULL AND UPPER(A.EMPCODE)=IIF(@EMPCODE = '', A.EMPCODE, @EMPCODE) AND CONVERT(DATE, A.PIN) = @DATE1
	--	) T
	--END
	

	--IF (@TYPE = 506)		--GET EMPLOYEE MASTER UPLOADED DATA 
	--BEGIN
	--	SELECT EMPCODE, EMPNAME, GENDER, DEPTNAME, CONTACTNO, CONVERT(VARCHAR, DOJ, 23) AS DOJ, PICKUP_POINT, GRID, SHIFT, CONVERT(VARCHAR, VALIDITY_FROM, 23) AS VALIDITY_FROM, CONVERT(VARCHAR, VALIDITY_TO, 23) AS VALIDITY_TO, CONVERT(VARCHAR, TDATE, 23) AS TDATE, USERID
	--	FROM EMPVALIDITY_MASTER  WHERE EMPCODE+EMPNAME LIKE '%'+@EMPCODE+'%'
	--	AND (CONVERT(DATE, VALIDITY_FROM) = ISNULL(@DATE1, VALIDITY_FROM) OR CONVERT(DATE, VALIDITY_TO) = ISNULL(@DATE2, VALIDITY_TO) )
	--	ORDER BY TDATE DESC, EMPCODE
	--END

	--IF (@TYPE = 509)
	--BEGIN
	--	SELECT EMPCODE, CONVERT(VARCHAR, PIN, 105) AS IN_DATE, FORMAT(PIN, N'HH:mm') AS IN_TIME, CONVERT(VARCHAR, POUT, 105) AS OUT_DATE,
	--	FORMAT(POUT, N'HH:mm') AS OUT_TIME
	--	FROM EMPPUNCH_SHIFT WHERE CONVERT(DATE, PIN) = ISNULL(@DATE1, GETDATE())
	--	AND EMPCODE NOT IN (SELECT DISTINCT EMPCODE FROM EMPPUNCH_SHIFT WHERE CONVERT(DATE, PIN) < ISNULL(@DATE1, GETDATE()))
	--	ORDER BY TDATE DESC 

	--END

END
GO
/****** Object:  StoredProcedure [dbo].[usp_SampleScrap]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_SampleScrap]
(
	@ACTIVITY        VARCHAR(50)='',
	@DOCNO           INT=0,
	@PLANT           VARCHAR(20)='',
	@DIVISION        VARCHAR(20)='',
	@MODEL			 VARCHAR(50)='',
	@CUST_NAME	     VARCHAR(50)='',
	@PERIOD		     INT=0,
	@QTY			 VARCHAR(50)='',
	@ST_LOC          VARCHAR(50)='',
	@PRODUCT		 VARCHAR(20)='',
	@DESCR			 VARCHAR(2000)='',
	@USERID			 VARCHAR(50)='',
	@STATUS			 INT=0,
	@STATUS_DESCR    VARCHAR(50)='',
	@REMARKS	     VARCHAR(2000)='',
	@APPRID		     VARCHAR(50)='',	
	@APPRTYPE		 VARCHAR(50)='',
	@NEXTAPPRID		 VARCHAR(50)='',	
	@NEXTAPPRTYPE	 VARCHAR(50)='',	
	@DATE1			 DATETIME='', 
	@DATE2			 DATETIME='',  
	@PARAM1          VARCHAR(100)='', 
	@PARAM2          VARCHAR(100)=''	
)
AS
BEGIN
DECLARE @L_NO INT=0, @L_P1 VARCHAR(100)=''
	IF (@ACTIVITY = 'ADD_SAMPLE_SCRAP')   --ADD/UPDATE 
	BEGIN
		IF (@DOCNO > 0)
		BEGIN
			UPDATE SAMPLE_SCRAP SET PLANT=@PLANT, DIVISION=@DIVISION, MODEL_NAME=@MODEL, CUSTOMER_NAME=@CUST_NAME, TEST_COMP_DATE=@DATE1, SAMPLE_DISP_DATE=@DATE2, RETENTION_PERIOD=@PERIOD, 
			SAMPLE_QTY=@QTY, STORAGE_LOC=@ST_LOC, PRODUCT=@PRODUCT, DESCRIPTION=@DESCR, STATUS=@STATUS, USERID=@USERID        
			WHERE DOCNO=@DOCNO
			SELECT 2 AS FLAG, @DOCNO AS DOCNO
		END
		ELSE                                                                                                                                                       
		BEGIN
			SELECT  @DOCNO=ISNULL(MAX(DOCNO),0)+1 FROM SAMPLE_SCRAP
			SELECT  @L_NO=COUNT(*) FROM SAMPLE_SCRAP WHERE PRODUCT=@PRODUCT AND MODEL_NAME=@MODEL AND MONTH(TEST_COMP_DATE)=MONTH(@DATE1) AND SAMPLE_QTY=@QTY
			--SET @L_P1 = @PRODUCT+'/'+@MODEL+'/'+CAST(MONTH(@DATE1) AS VARCHAR)+'/'+CAST(@QTY AS VARCHAR)+'/'+CAST(@DOCNO AS VARCHAR)
			SET @L_P1 = IIF(@PRODUCT='BATTERY','BAT',@PRODUCT)+'/'+@MODEL+'/'+CAST(MONTH(@DATE1) AS VARCHAR)+'/'+CAST(@QTY AS VARCHAR)+'/'+CAST(@L_NO+1 AS VARCHAR)
			INSERT INTO SAMPLE_SCRAP (DOCNO, PLANT, DIVISION, BOXID, MODEL_NAME, CUSTOMER_NAME, TEST_COMP_DATE, SAMPLE_DISP_DATE, RETENTION_PERIOD, SAMPLE_QTY, STORAGE_LOC, PRODUCT, DESCRIPTION, STATUS, USERID, TDATE)          
							   VALUES(@DOCNO, @PLANT, @DIVISION, @L_P1, @MODEL, @CUST_NAME, @DATE1, @DATE2, @PERIOD, @QTY, @ST_LOC, @PRODUCT, @DESCR, @STATUS, @USERID, GETDATE())
			SELECT 1 AS FLAG, @DOCNO AS DOCNO
		END
		IF (@STATUS = 2)       --POST SAMPLE DATA
		BEGIN
			SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  SAMPLE_SCRAP_HISTORY WHERE DOCNO=@DOCNO
			INSERT INTO SAMPLE_SCRAP_HISTORY (DOCNO, SRNO, USERTYPE, USERID, REMARKS, STATUS,  STATUSDESCR, TDATE)
									  VALUES (@DOCNO, @L_NO, 'Requestor', @USERID, @REMARKS, @STATUS, 'Save', GETDATE())
		END
	END

	IF (@ACTIVITY = 'POST_TO_HOD')		--UPDATE SCRAP STATUS FOR APPROVAL
    BEGIN
        UPDATE SAMPLE_SCRAP SET STATUS = 3, APPR1=@APPRID, PENDING_WITH=@APPRID, APPRTYPE='L1' WHERE DOCNO=@DOCNO 
		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  SAMPLE_SCRAP_HISTORY WHERE DOCNO=@DOCNO
		INSERT INTO SAMPLE_SCRAP_HISTORY (DOCNO, SRNO, USERTYPE, USERID, REMARKS, STATUS,  STATUSDESCR, TDATE)
								VALUES (@DOCNO, @L_NO, 'Requestor', @USERID, '', @STATUS, 'Post', GETDATE())
    END

	IF(@ACTIVITY = 'GET_SAMPLE_SCRAP_BY_DOCNO') 
	BEGIN
		SELECT DOCNO, BOXID, PLANT, DIVISION, MODEL_NAME, CUSTOMER_NAME, FORMAT(TEST_COMP_DATE, 'dd-MMM-yyyy') AS TEST_COMP_DATE, FORMAT(SAMPLE_DISP_DATE, 'dd-MMM-yyyy') AS SAMPLE_DISP_DATE, DATEDIFF(DAY, GETDATE(), SAMPLE_DISP_DATE) AS DUE_DAYS,    
		RETENTION_PERIOD, SAMPLE_QTY, STORAGE_LOC, PRODUCT, DESCRIPTION, APPR1, APPR2, ISSCRAP, STATUS, dbo.FN_CODEDEF(67, STATUS) AS STATUSDESCR, PENDING_WITH, APPRTYPE, USERID, FORMAT(TDATE, 'dd-MMM-yyyy') AS TDATE 		
		FROM SAMPLE_SCRAP  WHERE DOCNO=@DOCNO 
	END

	IF (@ACTIVITY = 'FILL_HISTORY')		--FILL SCRAP HISTORY
    BEGIN
		SELECT DOCNO AS REQUESTNO, SRNO, USERTYPE, USERID, ISNULL(dbo.FN_EMPNAME(USERID), '') AS EMPNAME, REMARKS, STATUS, STATUSDESCR, CONVERT(VARCHAR, TDATE, 20) AS TDATE
        FROM SAMPLE_SCRAP_HISTORY WHERE DOCNO=@DOCNO
    END 

	IF(@ACTIVITY = 'FILL_VIEW_LIST') 
	BEGIN
		SELECT * FROM (
		SELECT DOCNO, BOXID, PLANT, DIVISION, MODEL_NAME, CUSTOMER_NAME, FORMAT(TEST_COMP_DATE, 'dd-MMM-yyyy') AS TEST_COMP_DATE, FORMAT(SAMPLE_DISP_DATE, 'dd-MMM-yyyy') AS SAMPLE_DISP_DATE, DATEDIFF(DAY, GETDATE(), SAMPLE_DISP_DATE) AS DUE_DAYS, 
		RETENTION_PERIOD, SAMPLE_QTY, STORAGE_LOC, PRODUCT, DESCRIPTION, ISSCRAP, APPR1 + ' - ' + dbo.FN_EMPNAME(APPR1) AS APPR1, APPR2 + ' - ' + dbo.FN_EMPNAME(APPR2) AS APPR2, STATUS, dbo.FN_CODEDEF(67, STATUS) AS STATUSDESCR, USERID, CAST(FORMAT(TDATE , 'dd-MMM-yyyy') AS VARCHAR) AS TDATE, PENDING_WITH, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME, APPRTYPE		          
		FROM SAMPLE_SCRAP) AS T1 WHERE @USERID IN (SELECT DISTINCT USERID FROM SAMPLE_SCRAP_HISTORY B WHERE B.DOCNO=T1.DOCNO)
		AND T1.ISSCRAP=IIF(@PARAM1='0', T1.ISSCRAP, @PARAM1)
		AND ISNULL(T1.DUE_DAYS, 0) <= CASE WHEN @PARAM2=0 THEN T1.DUE_DAYS ELSE @PARAM2 END
		AND T1.STATUS=CASE WHEN @STATUS IN (0,20) THEN T1.STATUS ELSE @STATUS END
		ORDER BY T1.DOCNO DESC	
	END

	IF(@ACTIVITY = 'FILL_PENDING_LIST') 
	BEGIN
		SELECT * FROM (
		SELECT DOCNO, BOXID, PLANT, DIVISION, MODEL_NAME, CUSTOMER_NAME, FORMAT(TEST_COMP_DATE, 'dd-MMM-yyyy') AS TEST_COMP_DATE, FORMAT(SAMPLE_DISP_DATE, 'dd-MMM-yyyy') AS SAMPLE_DISP_DATE, DATEDIFF(DAY, GETDATE(), SAMPLE_DISP_DATE) AS DUE_DAYS, 
		RETENTION_PERIOD, SAMPLE_QTY, STORAGE_LOC, PRODUCT, DESCRIPTION, ISSCRAP, APPR1 + ' - ' + dbo.FN_EMPNAME(APPR1) AS APPR1, APPR2 + ' - ' + dbo.FN_EMPNAME(APPR2) AS APPR2, STATUS, dbo.FN_CODEDEF(6, STATUS) AS STATUSDESCR, USERID, CAST(FORMAT(TDATE , 'dd-MMM-yyyy') AS VARCHAR) AS TDATE, PENDING_WITH, PENDING_WITH  + ' - ' + dbo.FN_EMPNAME(PENDING_WITH) AS APPRNAME, APPRTYPE		          
		FROM SAMPLE_SCRAP) AS T1 WHERE PENDING_WITH=@USERID
		ORDER BY T1.DOCNO DESC	
	END

	IF (@ACTIVITY = 'GET_PENDING_REQ_COUNT')	--GET PENDING REQUESTS
    BEGIN
        SELECT COUNT(*) AS TOTAL FROM SAMPLE_SCRAP WHERE PENDING_WITH = @USERID
    END  

	IF (@ACTIVITY = 'GET_ALL_REQ_COUNT')	--GET ALL REQUEST COUNT
    BEGIN
		SELECT COUNT(*) AS TOTAL FROM SAMPLE_SCRAP A WHERE @USERID IN (SELECT DISTINCT USERID FROM SAMPLE_SCRAP_HISTORY B WHERE B.DOCNO=A.DOCNO)
    END

	IF(@ACTIVITY  = 'GET_LABEL_DATA')
	BEGIN
		SELECT BOXID, MODEL_NAME AS MODELNAME, SAMPLE_QTY AS QUANTITY, CAST(FORMAT(TEST_COMP_DATE , 'dd-MMM-yyyy') AS VARCHAR) AS DATE1, CAST(FORMAT(SAMPLE_DISP_DATE, 'dd-MMM-yyyy') AS VARCHAR) AS DATE2, RETENTION_PERIOD AS PERIOD 
		FROM SAMPLE_SCRAP WHERE DOCNO=@DOCNO
    END 
	
	IF (@ACTIVITY = 'FILL_APPR_L1')		--FILL L1 APPROVERS
    BEGIN
		SELECT VALUE AS CODE, VALUE +' - '+ ISNULL(dbo.FN_EMPNAME(VALUE), '') + ' (' + ISNULL(dbo.FN_EMPCODE(VALUE), '') + ')' AS NAME 
		FROM MST_CONFIG WHERE MODULE='SAMPLE_SCRAP_QA' AND CATEGORY1='APPROVERS' AND CATEGORY2='L1'
    END

	IF (@ACTIVITY = 'FILL_APPR_L2')		--FILL L2 APPROVERS
    BEGIN
		SELECT VALUE AS APPRID FROM MST_CONFIG WHERE MODULE='SAMPLE_SCRAP_QA' AND CATEGORY1='APPROVERS' AND CATEGORY2='L2'
    END

	IF (@ACTIVITY = 'FILL_APPR_L2')		--FILL L2 APPROVERS
    BEGIN
		SELECT VALUE AS APPRID FROM MST_CONFIG WHERE MODULE='SAMPLE_SCRAP_QA' AND CATEGORY1='APPROVERS' AND CATEGORY2='L2'
    END

	IF (@ACTIVITY = 'GET_EMAILID_CC')		--GET EMAILID FOR NOTIFICATION ON APPROVAL
    BEGIN
		SELECT STRING_AGG(dbo.FN_EMPEMAIL(VALUE), ',') AS EMAILID FROM MST_CONFIG WHERE MODULE='SAMPLE_SCRAP_QA' AND CATEGORY1='EMAIL_USERS' AND CATEGORY2='CC'
    END

	IF (@ACTIVITY = 'APPROVE_REQUEST')		--APPROVE REQUEST 		(Done)
    BEGIN
		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM SAMPLE_SCRAP_HISTORY  WHERE DOCNO=@DOCNO
        INSERT INTO SAMPLE_SCRAP_HISTORY (DOCNO, SRNO, USERTYPE, USERID, REMARKS, STATUS, STATUSDESCR)
                           VALUES (@DOCNO, @L_NO, @APPRTYPE, @APPRID, @REMARKS, @STATUS, @STATUS_DESCR)

		IF(@STATUS_DESCR = 'APPROVE')    --APPROVE
		BEGIN
			IF(@APPRTYPE = 'L1')	--FOR L1 APPROVER
			BEGIN
				UPDATE SAMPLE_SCRAP SET STATUS=@STATUS, APPR2=@NEXTAPPRID, PENDING_WITH=@NEXTAPPRID, APPRTYPE=@NEXTAPPRTYPE
				WHERE DOCNO=@DOCNO	
				SELECT 2 AS FLAG 
			END
			IF(@APPRTYPE = 'L2')	--FOR L2 APPROVER
			BEGIN
				UPDATE SAMPLE_SCRAP SET STATUS=@STATUS, PENDING_WITH='', APPRTYPE='', ISSCRAP='Y'
				WHERE DOCNO=@DOCNO
				SELECT 2 AS FLAG 
			END
		END
		IF(@STATUS_DESCR = 'REJECT')    --REJECT 
		BEGIN
			UPDATE SAMPLE_SCRAP SET STATUS=@STATUS, PENDING_WITH='', APPRTYPE=''
			WHERE DOCNO=@DOCNO
			SELECT 2 AS FLAG 
		END
		IF(@STATUS_DESCR = 'REVIEWBACK')    --REVIEW BACK
		BEGIN
			UPDATE SAMPLE_SCRAP SET STATUS=@STATUS, PENDING_WITH=@NEXTAPPRID, APPRTYPE=@NEXTAPPRTYPE
			WHERE DOCNO=@DOCNO
			SELECT 2 AS FLAG 
		END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Scheduler]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_Scheduler]
@ACTIVITY				VARCHAR(50)='',
@DOCNO					INT=0,
@EMPCODE				VARCHAR(20)='',
@EMPNAME				VARCHAR(50)='',
@GRADE					VARCHAR(20)='',
@DESIGNATION			VARCHAR(50)='',
@DEPTCODE				VARCHAR(20)='',
@DEPTNAME				VARCHAR(50)='',
@EMAILID1				VARCHAR(50)='',
@EMAILID2				VARCHAR(50)='',
@CONTACTNO1				VARCHAR(20)='',
@CONTACTNO2				VARCHAR(20)='',
@STATUS					INT=0,
@USERID					VARCHAR(50)='',
@UNAME					VARCHAR(50)='',
@APPRID					VARCHAR(20)='',
@APPRNAME				VARCHAR(50)='',

@DATE1					DATETIME,
@DATE2					DATETIME,
@DATE3					DATETIME,
@PARAM1					VARCHAR(500)='',
@PARAM2					VARCHAR(500)='',
@PARAM3					VARCHAR(500)='',
@PARAM4					VARCHAR(500)='',
@PARAM5					VARCHAR(500)='',
@PARAM6					VARCHAR(500)='',
@PARAM7					VARCHAR(500)='',
@PARAM8					VARCHAR(500)='',
@PARAM9					VARCHAR(500)='',
@PARAM10				VARCHAR(500)=''
AS
BEGIN
SET NOCOUNT ON;
DECLARE @L_NO INT=0 

	IF (@ACTIVITY = 'ADD_EMP_MASTER')		--UPDATE EMPLOYEE MASTER
	BEGIN
		IF NOT EXISTS (SELECT * FROM MST_EMPLOYEE WHERE EMPCODE=@EMPCODE)
		BEGIN
			INSERT INTO MST_EMPLOYEE(EMPCODE, EMPNAME, PLANT, FATHER_NAME, GENDER, MARRIED, GRADE, DESIGNATION, DEPTCODE, DEPTNAME, EMAILID_O, EMAILID_P, CONTACTNO_O, CONTACTNO_P, DOB, DOJ, APPRID, APPRNAME, LAST_ACTIVITY_DATE, 
									ADDRESS, HOME_ADDRESS, HOME_CITY, HOME_STATE, PRESENT_ADDRESS, PRESENT_CITY, PRESENT_STATE, ISACTIVE, TDATE)
						VALUES(@EMPCODE, @EMPNAME, 'BAWAL-PACK', @PARAM1, @PARAM2, @PARAM3, @GRADE, @DESIGNATION, @DEPTCODE, @DEPTNAME, @EMAILID1, @EMAILID2, @CONTACTNO1, @CONTACTNO2, @DATE1, @DATE2, @APPRID, @APPRNAME, @DATE3,
									@PARAM4, @PARAM5, @PARAM6, @PARAM7, @PARAM8, @PARAM9, @PARAM10, @STATUS, GETDATE() )
			
			SELECT 1 AS FLAG
		END
		ELSE
		BEGIN
			UPDATE MST_EMPLOYEE SET EMPNAME=@EMPNAME, FATHER_NAME=@PARAM1, GENDER=@PARAM2, MARRIED=@PARAM3, GRADE=@GRADE, DESIGNATION=@DESIGNATION, DEPTCODE=@DEPTCODE, DEPTNAME=@DEPTNAME,  
									EMAILID_O=IIF(EMAILID_O LIKE '%NVTPOWER.COM', EMAILID_O, @EMAILID1), EMAILID_P=@EMAILID2, CONTACTNO_O=IIF(ISNULL(CONTACTNO_O, '')='', @CONTACTNO1, CONTACTNO_O), CONTACTNO_P=@CONTACTNO2, DOB=@DATE1, 
									DOJ=@DATE2, APPRID=@APPRID, APPRNAME=@APPRNAME, LAST_ACTIVITY_DATE=@DATE3, ADDRESS=@PARAM4, HOME_ADDRESS=@PARAM5, HOME_CITY=@PARAM6, HOME_STATE=@PARAM7, PRESENT_ADDRESS=@PARAM8, PRESENT_CITY=@PARAM9, PRESENT_STATE=@PARAM10, ISACTIVE=@STATUS, UDATE=GETDATE() 
			WHERE ISACTIVE=1 AND EMPCODE=@EMPCODE

			IF (@STATUS = 0)
			BEGIN
				UPDATE MST_DEPTHOD SET ISACTIVE=0 WHERE ISACTIVE=1 AND HODCODE=dbo.FN_EMPADID(@EMPCODE) 
			END

			SELECT 2 AS FLAG
		END		
	END	

	IF (@ACTIVITY = 'UPD_EMP_MASTER')		--UPDATE EMPLOYEE DETAILS WITH LDAP
	BEGIN
		IF EXISTS (SELECT * FROM MST_EMPLOYEE WHERE EMPCODE=@EMPCODE)
		BEGIN
			UPDATE MST_EMPLOYEE SET ADID=@USERID, EMAILID_O=IIF(ISNULL(EMAILID_O, '')='', @EMAILID1, EMAILID_O), CONTACTNO_O=IIF(ISNULL(CONTACTNO_O, '')='', @CONTACTNO1, CONTACTNO_O) 
			WHERE EMPCODE=@EMPCODE			
		END
	END

	IF (@ACTIVITY = 'HAPPY_BDAY')		--GET TODAY BIRTHDAY
	BEGIN
		SELECT * FROM MST_EMPLOYEE WHERE ISACTIVE=1 AND LEN(EMPCODE)>3 AND DATEPART(DAY, DOB)=DATEPART(DAY, GETDATE()) AND DATEPART(MONTH, DOB)=DATEPART(MONTH, GETDATE())
	END

	IF (@ACTIVITY = 'LEGAL_REPOSITORY')		--LEGAL REPOSITORY 
	BEGIN
		SELECT DOCNO, EMAIL, VENDOR, CONTRACT_CATG, SERVICE_DESC, EXP_DATE AS EXPDATE, CONVERT(VARCHAR(11), EXP_DATE, 106) AS EXP_DATE FROM CONTRACT_MASTER 
		WHERE DATEDIFF(DAY, GETDATE(), EXP_DATE) IN (7, 30) ORDER BY EXP_DATE
	END

	IF (@ACTIVITY = 'HELPDESK_PENDING_USERS')		--GET USERS HAVING HELPDESK REQUEST PENDING 
	BEGIN
		SELECT A.PENDING_WITH, B.EMPNAME, B.EMAILID_O
		FROM ITHELPDESK_MASTER A INNER JOIN MST_EMPLOYEE B ON A.PENDING_WITH=B.ADID
		WHERE B.ISACTIVE=1 AND STATUS IN (2,3,4,5,6) AND B.EMAILID_O LIKE '%NVTPOWER.COM'
		GROUP BY PENDING_WITH, B.EMPNAME, B.EMAILID_O
		ORDER BY 1
	END

	IF (@ACTIVITY = 'HELPDESK_DETAILS_USERWISE')		--GET HELPDESK REQUEST DETAILS BY USERWISE
	BEGIN
		SELECT REQNO, REQID, REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, dbo.FN_CODEDEF(23, PROBLEM_CATG) AS PROBLEM_CATG, 
		SUBJECT, dbo.FN_CODEDEF(21, STATUS) AS STATUS, TDATE
		FROM ITHELPDESK_MASTER WHERE PENDING_WITH=@USERID
	END

	IF (@ACTIVITY = 'HELPDESK_PENDING_ITENGG')			--GET PENDING HELPDESK REQUEST AGAINST IT OPERATION TEAM
	BEGIN
		SELECT A.REQNO, A.REQID, A.REQNAME, dbo.FN_DEPTNAME(A.DEPTCODE) AS DEPTNAME, dbo.FN_CODEDEF(23, A.PROBLEM_CATG) AS PROBLEM_CATG, 
		A.SUBJECT, dbo.FN_CODEDEF(21, A.STATUS) AS STATUS, A.TDATE, A.PENDING_WITH, B.EMPNAME AS ITENGG_NAME
		FROM ITHELPDESK_MASTER A LEFT JOIN MST_EMPLOYEE B ON A.PENDING_WITH=B.ADID
		WHERE A.STATUS IN (4,5) AND B.REMARK1='INFRA' AND B.ADID NOT IN ('NI00008', 'NI00097')
	END

	IF (@ACTIVITY = 'DEVIATION_LAST_DATE')			--VALIDITY DATE = TODAY DATE (INFORMATION MAIL TO ALL APPROVERS)
	BEGIN
		SELECT REQNO, REQID + ' - ' + dbo.FN_EMPNAME(REQID) AS REQNAME, DEPTCODE, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, FORMAT(VALIDITY, 'dd-MMM-yyyy') AS VALIDITY,
		DEVIATION_TYPE, CUSTOMER, NATURE_OF_ISSUE, (SELECT STRING_AGG(dbo.FN_EMPEMAIL(USERID), ',') FROM DEVIATION_HISTORY B WHERE B.REQNO=A.REQNO) AS EMAILID
		FROM DEVIATION_MASTER A WHERE STATUS=3 AND CONVERT(DATE, VALIDITY)=CONVERT(DATE, GETDATE())
	END

	IF (@ACTIVITY = 'DEVIATION_PENDING_APPRS')		--GET APPROVERS HAVING DEVIATION PENDING FROM MORE THEN 2 DAYS
	BEGIN
		SELECT APPRID, APPRNAME, EMAILID
		FROM (
		SELECT REQNO, STRING_AGG(B.VALUE, ',') AS APPRID, STRING_AGG(dbo.FN_EMPNAME(B.VALUE), ',') AS APPRNAME, STRING_AGG(dbo.FN_EMPEMAIL(B.VALUE), ',') AS EMAILID
		FROM DEVIATION_MASTER A INNER JOIN MST_CONFIG B ON B.MODULE='DEVIATION' AND B.PLANT=A.PLANT AND B.CATEGORY1=A.PENDING_WITH
		WHERE STATUS=2 AND CONVERT(DATE, LAST_APPR_DATE)<=CONVERT(DATE, DATEADD(DAY, -2, GETDATE()))
		GROUP BY REQNO
		) AS T1
		GROUP BY T1.APPRID, t1.APPRNAME, T1.EMAILID
		ORDER BY 1
	END

	IF (@ACTIVITY = 'DEVIATION_DETAILS_APPRWISE')		--GET DEVIATION DETAILS BY APPROVER WISE
	BEGIN
		SELECT REQNO, PLANT, REQID, dbo.FN_EMPNAME(REQID) AS REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, VALIDITY, DEVIATION_TYPE, NATURE_OF_ISSUE, 
		FORMAT(TDATE, 'dd-MMM-yyyy') AS CREATE_DATE, CONVERT(VARCHAR, LAST_APPR_DATE, 20) AS LAST_APPR_DATE, DATEDIFF(DAY, LAST_APPR_DATE, GETDATE()) AS PENDING_FROM_DAYS, APPRNAME AS PENDING_WITH
		FROM ( 
		SELECT A.REQNO, A.PLANT, A.REQID, A.DEPTCODE, A.CONTACTNO, A.VALIDITY, A.DEVIATION_TYPE, A.NATURE_OF_ISSUE, A.TDATE, A.LAST_APPR_DATE, STRING_AGG(B.VALUE, ',') AS APPRID, STRING_AGG(dbo.FN_EMPNAME(B.VALUE), ',') AS APPRNAME
		FROM DEVIATION_MASTER A INNER JOIN MST_CONFIG B ON B.MODULE='DEVIATION' AND B.PLANT=A.PLANT AND B.CATEGORY1=A.PENDING_WITH
		WHERE STATUS=2 AND CONVERT(DATE, LAST_APPR_DATE)<=CONVERT(DATE, DATEADD(DAY, -2, GETDATE()))
		GROUP BY A.REQNO, A.PLANT, A.REQID, A.DEPTCODE, A.CONTACTNO, A.VALIDITY, A.DEVIATION_TYPE, A.NATURE_OF_ISSUE, A.TDATE, A.LAST_APPR_DATE
		) AS T1 WHERE T1.APPRID=@USERID
		ORDER BY 1
	END

	IF (@ACTIVITY = 'DEVIATION_HOD_ALERT')		--GET HOD TO SEND MAILS FOR THE DEVIATION PENDING FOR APPROVAL FROM PAST 7 DAYS
	BEGIN
		SELECT HODCODE, dbo.FN_EMPNAME(HODCODE) AS HODNAME, dbo.FN_EMPEMAIL(HODCODE) AS HOD_EMAILID
		FROM (
		SELECT dbo.FN_EMPAPPRCODE(B.VALUE) AS HODCODE
		FROM DEVIATION_MASTER A INNER JOIN MST_CONFIG B ON B.MODULE='DEVIATION' AND B.PLANT=A.PLANT AND B.CATEGORY1=A.PENDING_WITH
		WHERE STATUS=2 AND CONVERT(DATE, LAST_APPR_DATE)<=CONVERT(DATE, DATEADD(DAY, -7, GETDATE()))
		GROUP BY dbo.FN_EMPAPPRCODE(B.VALUE)
		) AS T1
	END

	IF (@ACTIVITY = 'DEVIATION_APPR_CC')		--GET MAIL ID OF APPROVERS PENDING FOR APPROVAL FROM PAST 7 DAYS
	BEGIN
		SELECT STRING_AGG(dbo.FN_EMPEMAIL(VALUE), ',') AS PENDING_WITH_EMAIL
		FROM (
		SELECT B.VALUE
		FROM DEVIATION_MASTER A INNER JOIN MST_CONFIG B ON B.MODULE='DEVIATION' AND B.PLANT=A.PLANT AND B.CATEGORY1=A.PENDING_WITH
		WHERE STATUS=2 AND CONVERT(DATE, LAST_APPR_DATE)<=CONVERT(DATE, DATEADD(DAY, -7, GETDATE()))
		AND dbo.FN_EMPAPPRCODE(B.VALUE)=@USERID
		GROUP BY B.VALUE
		) AS T1
	END

	IF (@ACTIVITY = 'DEVIATION_DETAILS_HOD')		--GET DEVIATION DETAILS FRO APPROVER HOD PENDING MORE THEN 7 DAYS
	BEGIN
		SELECT REQNO, PLANT, REQID, dbo.FN_EMPNAME(REQID) AS REQNAME, dbo.FN_DEPTNAME(DEPTCODE) AS DEPTNAME, CONTACTNO, VALIDITY, DEVIATION_TYPE, NATURE_OF_ISSUE, FORMAT(TDATE, 'dd-MMM-yyyy') AS CREATE_DATE, CONVERT(VARCHAR, LAST_APPR_DATE, 20) AS LAST_APPR_DATE, 
		DATEDIFF(DAY, LAST_APPR_DATE, GETDATE()) AS PENDING_FROM_DAYS, PENDING_WITH
		FROM (
		SELECT A.REQNO, A.PLANT, A.REQID, A.DEPTCODE, A.CONTACTNO, A.VALIDITY, A.DEVIATION_TYPE, A.NATURE_OF_ISSUE, A.TDATE, A.LAST_APPR_DATE, STRING_AGG(dbo.FN_EMPNAME(B.VALUE), ',') AS PENDING_WITH
		FROM DEVIATION_MASTER A INNER JOIN MST_CONFIG B ON B.MODULE='DEVIATION' AND B.PLANT=A.PLANT AND B.CATEGORY1=A.PENDING_WITH
		WHERE STATUS=2 AND CONVERT(DATE, LAST_APPR_DATE)<=CONVERT(DATE, DATEADD(DAY, -7, GETDATE()))
		AND dbo.FN_EMPAPPRCODE(B.VALUE)=@USERID
		GROUP BY A.REQNO, A.PLANT, A.REQID, A.DEPTCODE, A.CONTACTNO, A.VALIDITY, A.DEVIATION_TYPE, A.NATURE_OF_ISSUE, A.TDATE, A.LAST_APPR_DATE
		) AS T1
		ORDER BY 1
	END

	IF (@ACTIVITY = 'CALIBRATION_EMAILID')		--CALIBRATION EMAIL ID TO SENT MAILS TO USERS
	BEGIN
		SELECT CATEGORY2 AS TYPE, STRING_AGG(dbo.FN_EMPEMAIL(VALUE), ',') AS EMAILID FROM MST_CONFIG WHERE MODULE='CALIBRATION' AND CATEGORY1='SCHEDULER'
		GROUP BY CATEGORY2
	END

	IF (@ACTIVITY = 'CALIBRATION_OVERDUE')		--CALIBRATION OVER DUE
	BEGIN
		SELECT DOCNO, CATEGORY, PLANT, DIVISION, EQUIPID, FORMAT(CALI_DATE, 'dd-MMM-yyyy') AS CALI_DATE, FORMAT(CALI_DUE_DATE, 'dd-MMM-yyyy') AS CALI_DUE_DATE, DATEDIFF(DAY, GETDATE(), CALI_DUE_DATE) AS DUE_DAYS,
		DESCR, MAKE, AGENCY, EQUIP_MODEL, CALI_TYPE, LOCATION, MAC_NAME, LEAST_CNT, FULL_RANGE, OP_RANGE, UNIT	
		FROM CALIBRATION_MASTER WHERE ISACTIVE=1 AND DATEDIFF(DAY, GETDATE(), CALI_DUE_DATE) <= 15
		ORDER BY 1
	END

	IF (@ACTIVITY = 'SAMPLE_SCRAP_EMAILID')		--SAMPLE SCRAP EMAIL ID 
	BEGIN
		SELECT STRING_AGG(dbo.FN_EMPEMAIL(VALUE), ',') AS EMAILID FROM MST_CONFIG WHERE MODULE='SAMPLE_SCRAP_QA' AND CATEGORY1='SCHEDULER'
	END

	IF (@ACTIVITY = 'SAMPLE_SCRAP_PENDING')		--PENDING SAMPLE SCRAP
	BEGIN
		SELECT DOCNO, BOXID, PLANT, DIVISION, MODEL_NAME, CUSTOMER_NAME, FORMAT(TEST_COMP_DATE, 'dd-MMM-yyyy') AS TEST_COMP_DATE, FORMAT(SAMPLE_DISP_DATE, 'dd-MMM-yyyy') AS SAMPLE_DISP_DATE, 
		DATEDIFF(DAY, GETDATE(), SAMPLE_DISP_DATE) AS DUE_DAYS, RETENTION_PERIOD, SAMPLE_QTY, STORAGE_LOC, PRODUCT
		FROM SAMPLE_SCRAP WHERE ISSCRAP='N' AND DATEDIFF(DAY, GETDATE(), SAMPLE_DISP_DATE) <= 7
		ORDER BY 1
	END

	IF (@ACTIVITY = 'KAIZEN_PENDING_EMAILID')		--GET KAIZEN PENDING MAIL ID's
	BEGIN
		SELECT STRING_AGG(dbo.FN_EMPEMAIL(PENDING_WITH), ',') AS EMAILID
		FROM (
		SELECT DISTINCT IIF(STATUS=2, APPRID, USERID) AS PENDING_WITH
		FROM KAIZEN_MASTER WHERE STATUS IN (1,2)) AS T1
	END

	IF (@ACTIVITY = 'KAIZEN_PENDING_LIST')		--GET PENDING KAIZEN LIST
	BEGIN
		SELECT DOCNO, dbo.FN_CODEDEF(31, STATUS) AS STATUS, dbo.FN_EMPNAME(IIF(STATUS=2, APPRID, USERID)) AS PENDING_WITH, KAIZEN_NAME, KAIZEN_TYPE, EMPCODE, EMPNAME, PLANT, IMPACT, FINYEAR, YR, MON, TDATE
		FROM KAIZEN_MASTER WHERE STATUS IN (1,2) ORDER BY 3,1
	END

	IF (@ACTIVITY = 'MES_WO_EMAILID')		--MES OPEN WO MAIL ID'S OF USERS
	BEGIN
		SELECT STRING_AGG(dbo.FN_EMPEMAIL(VALUE), ',') AS EMAILID FROM MST_CONFIG WHERE MODULE='MES_WO_SCHEDULER' AND CATEGORY1='TO'
	END

	IF (@ACTIVITY = 'OHC_PATIENT_LIST')		--PATIENT REPORTED TO OHC LIST
	BEGIN
		SELECT DEPT, INJURY_TYPE AS ILLNESS, COUNT(*) AS HEADCOUNTS FROM OHC WHERE CONVERT(DATE, TDATE)=CONVERT(DATE, DATEADD(DAY, -1, GETDATE())) 
		GROUP BY DEPT, INJURY_TYPE
		ORDER BY 1
	END

	IF (@ACTIVITY = 'OHC_ALERT_EMAILID')		--ALERT MAIL TO OHC REPORTED EMPLOYEES
	BEGIN
		SELECT STRING_AGG(dbo.FN_EMPEMAIL(VALUE), ',') AS EMAILID FROM MST_CONFIG WHERE MODULE='OHC' AND CATEGORY1='SCHEDULER' ORDER BY 1
	END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Scheduler_Cursor]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_Scheduler_Cursor]
@ACTIVITY				VARCHAR(50)=''
AS
BEGIN
SET NOCOUNT ON;
DECLARE @DOCNO INT=0, @L_NO INT=0

	IF (@ACTIVITY = 'ITHELPDESK_UAT')		--AUTO CLOSE UAT REQUESTS AFTER 48 HOURS
	BEGIN
		DECLARE Cursor1 CURSOR FOR
		SELECT REQNO FROM ITHELPDESK_MASTER WHERE STATUS=6 AND DATEDIFF(HOUR, FINISH_DATE, GETDATE()) > 48

		OPEN Cursor1

		FETCH NEXT FROM Cursor1  INTO  @DOCNO

		WHILE @@FETCH_STATUS = 0
		BEGIN
			UPDATE ITHELPDESK_MASTER SET STATUS=7, PENDING_WITH='', APPRTYPE='' WHERE REQNO=@DOCNO 

			SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  ITHELPDESK_HISTORY WHERE REQNO=@DOCNO
			INSERT INTO ITHELPDESK_HISTORY (REQNO, SRNO, USERTYPE,			REMARKS,			 STATUS, STATUSDESCR, TDATE)
								VALUES (@DOCNO, @L_NO, 'SYSTEM',  'Auto Close by System Scheduler', 7, 'Finish', GETDATE())

			FETCH NEXT FROM Cursor1 INTO @DOCNO
		END
		CLOSE Cursor1;
		DEALLOCATE Cursor1;
	END	

	IF (@ACTIVITY = 'DEVIATION_CLOSE')		--AUTO CLOSE DEVIATION ON LAST DATE
	BEGIN
		DECLARE Cursor1 CURSOR FOR
		SELECT REQNO FROM DEVIATION_MASTER A WHERE STATUS=2 AND CONVERT(DATE, VALIDITY) < CONVERT(DATE, GETDATE())

		OPEN Cursor1

		FETCH NEXT FROM Cursor1  INTO  @DOCNO

		WHILE @@FETCH_STATUS = 0
		BEGIN
			UPDATE DEVIATION_MASTER SET STATUS=4, PENDING_WITH='' WHERE REQNO=@DOCNO

			SELECT @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  DEVIATION_HISTORY WHERE REQNO=@DOCNO
			INSERT INTO DEVIATION_HISTORY (REQNO, SRNO, USERTYPE, REMARKS, STATUS,  STATUSDESCR, TDATE)
								VALUES (@DOCNO, @L_NO, 'SYSTEM', 'Validity Date is expired, System has Rejected By Auto Scheduler', 4, 'Rejected', GETDATE())

			FETCH NEXT FROM Cursor1 INTO @DOCNO
		END
		CLOSE Cursor1;
		DEALLOCATE Cursor1;
	END	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Scheduler_EIS]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_Scheduler_EIS]
@ACTIVITY				VARCHAR(50)='',
@PLANT					VARCHAR(20)='',
@DIVISION				VARCHAR(20)='',
@CUSTOMER				VARCHAR(20)='',
@LINENO					VARCHAR(20)='',
@LINETYPE				VARCHAR(20)='',
@ITEMID					VARCHAR(50)='',

@DATE1					DATETIME,
@DATE2					DATETIME,
@VAL1					NUMERIC(18,2),
@VAL2					NUMERIC(18,2),
@VAL3					NUMERIC(18,2),
@VAL4					NUMERIC(18,2),
@VAL5					NUMERIC(18,2),
@VAL6					NUMERIC(18,2),
@PARAM1					VARCHAR(100)='',
@PARAM2					VARCHAR(100)='',
@PARAM3					VARCHAR(100)='',
@PARAM4					VARCHAR(100)=''
AS
BEGIN
SET NOCOUNT ON;
DECLARE @L_P1 VARCHAR(50), @L_P2 VARCHAR(50), @L_NO INT=0;

	-------------- UPH ---------------

	IF (@ACTIVITY = 'DELETE_UPH')		--ADD/UPDATE UPH DATA
	BEGIN
		DELETE FROM EIS_UPH_ACTUAL WHERE PLANT=@PLANT AND DATA_DATE=@DATE1 
	END

	IF (@ACTIVITY = 'ADD_UPH')		--ADD/UPDATE UPH DATA
	BEGIN
		INSERT INTO EIS_UPH_ACTUAL (PLANT, DIVISION, DATA_DATE, LINE_NO, LINE_TYPE, TOTAL_PACKING, AVLBL_TIME_MINTS, UDATE)
						     VALUES(@PLANT, @DIVISION, @DATE1, @LINENO, @LINETYPE,     @VAL1,			@VAL2,	GETDATE())
	END

	-------------- UPPH ---------------

	IF (@ACTIVITY = 'DELETE_UPPH')		--ADD/UPDATE UPPH DATA
	BEGIN
		DELETE FROM EIS_UPPH_ACTUAL WHERE PLANT=@PLANT AND DATA_DATE=@DATE1 
	END

	IF (@ACTIVITY = 'ADD_UPPH')		--ADD/UPDATE UPPH DATA
	BEGIN
		INSERT INTO EIS_UPPH_ACTUAL (PLANT, DIVISION, CUSTOMER, LINE_NO, LINE_TYPE, MODEL_NAME, STD_HC, ACTUAL_HC, ACTUAL_PACKING, SHIFT, AVLBL_TIME_MINTS, DATA_DATE, UDATE)
						   VALUES(@PLANT, @DIVISION, @CUSTOMER, @LINENO, @LINETYPE, @ITEMID, @VAL1,	@VAL2,		@VAL3,		  @PARAM1,	     @VAL4,			@DATE1, GETDATE() )
	END

	-------------- PACKING RECORD ---------------

	IF (@ACTIVITY = 'DELETE_PACKING')		--ADD/UPDATE PACKING DATA
	BEGIN
		DELETE FROM EIS_PACKING WHERE PLANT=@PLANT AND DATA_DATE=@DATE1 
	END

	IF (@ACTIVITY = 'ADD_PACKING')		--ADD/UPDATE PACKING DATA
	BEGIN
		INSERT INTO EIS_PACKING (PLANT, DIVISION, LINE_NO, LINE_TYPE, MODEL_NAME, PACKING, DATA_DATE, UDATE)
						   VALUES(@PLANT, @DIVISION, @LINENO, @LINETYPE, @ITEMID, @VAL1,	@DATE1,	 GETDATE() )
	END

	-------------- OQA CONFIRMATION ---------------

	IF (@ACTIVITY = 'DELETE_OQA_CONFIRMATION')		--DELETE OQA CONFIRMATION
	BEGIN
		DELETE FROM EIS_OQA_CONFIRM WHERE DATEDIFF(DAY, DATA_DATE, GETDATE()) > 30	--DELETE RECORDS MORE THEN 30 DAYS
		DELETE FROM EIS_OQA_CONFIRM WHERE DATA_DATE=@DATE1 
	END
	
	IF (@ACTIVITY = 'ADD_OQA_CONFIRMATION')		--ADD/UPDATE OQA CONFIRMATION DATA
	BEGIN
		INSERT INTO EIS_OQA_CONFIRM (PLANT, DATA_DATE, ITEMID, TOTAL_QTY, UDATE)
							VALUES(@PLANT, @DATE1, @ITEMID, @VAL1, GETDATE() )
			
		SELECT 1 AS FLAG
	END

	-------------- OQA TO WAREHOUSE ---------------

	IF (@ACTIVITY = 'DELETE_OQA_TO_WAREHOUSE')		--DELETE OQA TO WAREHOUSE
	BEGIN
		DELETE FROM EIS_OQA_WAREHOUSE WHERE DATEDIFF(DAY, DATA_DATE, GETDATE()) > 30	--DELETE RECORDS MORE THEN 30 DAYS
		DELETE FROM EIS_OQA_WAREHOUSE WHERE DATA_DATE=@DATE1
	END

	IF (@ACTIVITY = 'ADD_OQA_TO_WAREHOUSE')		--ADD/UPDATE OQA TO WAREHOUSE DATA
	BEGIN
		INSERT INTO EIS_OQA_WAREHOUSE (PLANT, DATA_DATE, ITEMID, TOTAL_QTY, UDATE)
							    VALUES(@PLANT, @DATE1, @ITEMID, @VAL1, GETDATE() )
			
		SELECT 1 AS FLAG
	END

	-------------- SHIPMENT ---------------

	IF (@ACTIVITY = 'DELETE_SHIPMENT')		--DELETE SHIPMENT
	BEGIN
		DELETE FROM EIS_SHIPMENT WHERE DATA_DATE=@DATE1
	END

	IF (@ACTIVITY = 'ADD_SHIPMENT')		--ADD/UPDATE SHIPMENT
	BEGIN
		INSERT INTO EIS_SHIPMENT (PLANT, DATA_DATE, ITEMID, INVOICENO, TOTAL_QTY, TOTAL_AMT, UDATE)
						   VALUES(@PLANT, @DATE1, @ITEMID, @PARAM1, @VAL1,	@VAL2,	GETDATE() )
			
		SELECT 1 AS FLAG
	END

	-------------- WAREHOUSE INVENTORY ---------------

	IF (@ACTIVITY = 'DELETE_WAREHOUSE_INVENTORY')		--DELETE WAREHOUSE INVENTORY
	BEGIN
		DELETE FROM EIS_WAREHOUSE_INVENTORY WHERE DATEDIFF(DAY, DATA_DATE, GETDATE()) > 7	--DELETE RECORDS MORE THEN 7 DAYS
		DELETE FROM EIS_WAREHOUSE_INVENTORY WHERE DATA_DATE=@DATE1
	END

	IF (@ACTIVITY = 'ADD_WAREHOUSE_INVENTORY')		--ADD/UPDATE WAREHOUSE INVENTORY
	BEGIN
		INSERT INTO EIS_WAREHOUSE_INVENTORY (PLANT, DATA_DATE, LOCATION, ITEMID, TOTAL_QTY, TOTAL_AMT, UDATE)
								  VALUES(@PLANT, @DATE1, @PARAM1, @ITEMID, @VAL1, @VAL2, GETDATE() )
			
		SELECT 1 AS FLAG
	END

	-------------- RFC DATA ---------------

	IF (@ACTIVITY = 'DELETE_RFC_DATA')		--DELETE RFC DATA
	BEGIN
		DELETE FROM EIS_RFC_DATA WHERE TTYPE='SAP' AND YEAR(FROM_DATE)=@PARAM1 AND MONTH(FROM_DATE)=@PARAM2  --DELETE ONLY SAP ENTRIES
	END

	IF (@ACTIVITY = 'ADD_RFC_DATA')		--ADD/UPDATE RFC DATA
	BEGIN
		INSERT INTO EIS_RFC_DATA (FROM_DATE, TO_DATE, GLCODE, COST_CENTER, PLANT_CODE, GL_TYPE, DESCR, TTYPE, AMOUNT, UDATE)
							VALUES (@DATE1, @DATE2, @PARAM1, @PARAM2, @PLANT, @PARAM3, @PARAM4, 'SAP', @VAL1, GETDATE())
			
		SELECT 1 AS FLAG
	END


END
GO
/****** Object:  StoredProcedure [dbo].[usp_SMT]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_SMT]
(
	@ACTIVITY		VARCHAR(200)	= '',
	@PARAM1			VARCHAR(100)	= '',
	@PARAM2			VARCHAR(100)	= '',
	@MATERIALNO		VARCHAR(100)	= '',
	@VENDORNAME		VARCHAR(50)		='', 
	@CATEGORY		VARCHAR(100)	='',
	@PARTNO			VARCHAR(50)		='',
	@QRCODE			VARCHAR(100)	='',
	@SUBQRCODE		VARCHAR(100)	='',
	@SUBSEQNO		VARCHAR(10)		='',
	@USERID			VARCHAR(20)		='',
	@DATE1			DATETIME		=NULL,
	@DATE2			DATETIME		=NULL
)
AS
BEGIN
DECLARE @L_NO INT=0, @L_NO2 INT=0, @L_P1 VARCHAR(100), @L_P2 VARCHAR(100), @L_P3 VARCHAR(100), @L_DATE1 DATETIME , @SQL NVARCHAR(MAX);

	IF(@ACTIVITY = 'GET_SMT_DASHBOARD')
	BEGIN
		IF(@PARAM1='OVERVIEW')
		BEGIN
			DECLARE @TOTALSTOREMATERIAL INT=0, @TOTALDISPATCHMATERIAL INT=0,@TOTALSMTRECEIVED INT=0,@TOTALSMTCONSUMED INT=0
			SELECT @TOTALSTOREMATERIAL=COUNT(ID) FROM SMT_MATERIAL_CONTROL
			SELECT @TOTALDISPATCHMATERIAL=COUNT(ID) FROM SMT_MATERIAL_CONTROL WHERE STORE_DISPATCH='Y'
			SELECT @TOTALSMTRECEIVED=COUNT(ID) FROM SMT_MATERIAL_CONTROL WHERE SMT_RECD='Y'
			SELECT @TOTALSMTCONSUMED=COUNT(ID) FROM SMT_MATERIAL_CONTROL WHERE SMT_CONSUME='Y'
			SELECT @TOTALSTOREMATERIAL TOTALSTOREMATERIAL,@TOTALDISPATCHMATERIAL TOTALDISPATCHMATERIAL,@TOTALSMTRECEIVED TOTALSMTRECEIVED,@TOTALSMTCONSUMED TOTALSMTCONSUMED
		END
		IF(@PARAM1='MATERIAL_FLOW')
		BEGIN
			DECLARE @MYTABLE TABLE (MON VARCHAR(MAX),REC VARCHAR(MAX),CON VARCHAR(MAX))
			DECLARE @COUNT INT;
			DECLARE @L_MON VARCHAR(MAX),@L_REC VARCHAR(MAX),@L_CON VARCHAR(MAX)
			SET @COUNT = @PARAM2;

			WHILE @COUNT<= 0
			BEGIN
				SELECT @L_MON=FORMAT(DATEADD(MONTH, @COUNT, GETDATE()), 'MMM') + '-' + FORMAT(DATEADD(MONTH, @COUNT, GETDATE()), 'yyyy')
				SELECT @L_REC=COUNT(ID) FROM SMT_MATERIAL_CONTROL WHERE SMT_RECD='Y'AND MONTH(DATEADD(MONTH, @COUNT, GETDATE())) = MONTH(SMT_RECD_DATE)  AND YEAR(DATEADD(MONTH,@COUNT, GETDATE())) = YEAR(SMT_RECD_DATE)
				SELECT @L_CON=COUNT(ID) FROM SMT_MATERIAL_CONTROL WHERE SMT_CONSUME='Y'AND MONTH(DATEADD(MONTH, @COUNT, GETDATE())) = MONTH(SMT_CONSUME_DATE)  AND YEAR(DATEADD(MONTH,@COUNT, GETDATE())) = YEAR(SMT_CONSUME_DATE)    
				INSERT INTO @MYTABLE(MON,REC,CON)
				VALUES(@L_MON,@L_REC,@L_CON)       
				SET @COUNT = @COUNT + 1;   
			END;
			SELECT * FROM @MYTABLE
		END
	END
	
	IF(@ACTIVITY = 'STORE_ADMIN')
	BEGIN
		SELECT @SQL = 'SELECT ID MATERIALID,VENDOR_NAME VENDORNAME,CATEGORY MATERIALCATEGORY,PARTNO,REPLACE(CONVERT(NVARCHAR,MFG_DATE, 106), '' '', ''-'') MFGDATE, 
		REPLACE(CONVERT(NVARCHAR,EXP_DATE, 106), '' '', ''-'') EXPDATE,BARCODE QRCODE,[WEEK] WEEKNO,ISNULL(REPLACE(CONVERT(NVARCHAR,STORE_RECD_DATE, 106), '' '', ''-''),'''') STORERECDDATE,
		ISNULL(STORE_DISPATCH,'''') STOREDISPATCH,ISNULL(REPLACE(CONVERT(NVARCHAR,STORE_DISPATCH_DATE, 106), '' '', ''-''),'''') STOREDISPATCHDATE,
		ISNULL(REPLACE(CONVERT(NVARCHAR,SMT_RECD_DATE, 106), '' '', ''-''),'''') SMTRECDDATE,ISNULL(REPLACE(CONVERT(NVARCHAR,SMT_CONSUME_DATE, 106), '' '', ''-''),'''') SMTCONSUMEDATE,
		ISNULL(SMT_CONSUME,'''') SMTCONSUME,ISNULL(IS_BLOCKED,'''') ISBLOCKED,ISNULL(REPLACE(CONVERT(NVARCHAR,BLOCK_DATE, 106), '' '', ''-''),'''') BLOCKDATE,MATERIALID MATERIALNO 
		FROM SMT_MATERIAL_CONTROL WHERE 1=1';

		IF(@PARAM1 = '0')
		BEGIN
		SELECT @SQL += ' AND CAST(STORE_RECD_DATE AS DATE) >= GETDATE()-30';
		END
		IF(@PARAM1 = '1')
		BEGIN
		SELECT @SQL += ' AND CAST(STORE_RECD_DATE AS DATE) >= GETDATE()-90';
		END
		IF(@PARAM1 = '2')
		BEGIN
		SELECT @SQL += ' AND CAST(STORE_RECD_DATE AS DATE) >= GETDATE()-180';
		END
		IF(@PARAM1 = '3')
		BEGIN
		SELECT @SQL += ' AND YEAR(STORE_RECD_DATE)=''' + @PARAM2 + '''';
		END
		IF(@QRCODE != '')
		BEGIN
		SELECT @SQL += ' AND BARCODE=''' + @QRCODE + '''';
		END
		IF(@CATEGORY != '')
		BEGIN
		SELECT @SQL += ' AND CATEGORY=''' + @CATEGORY + '''';
		END
		IF(@VENDORNAME != '')
		BEGIN
		SELECT @SQL += ' AND VENDOR_NAME=''' + @VENDORNAME + '''';
		END
		SELECT @SQL += ' ORDER BY STORE_RECD_DATE DESC';
		EXEC (@SQL)
	END

	IF(@ACTIVITY = 'SMT_ADMIN')
	BEGIN
		SELECT @SQL = 'SELECT ID MATERIALID, VENDOR_NAME VENDORNAME,CATEGORY MATERIALCATEGORY,PARTNO,REPLACE(CONVERT(NVARCHAR,MFG_DATE, 106), '' '', ''-'') MFGDATE,
		REPLACE(CONVERT(NVARCHAR,EXP_DATE, 106), '' '', ''-'') EXPDATE,BARCODE QRCODE,[WEEK] WEEKNO,REPLACE(CONVERT(NVARCHAR,STORE_RECD_DATE, 106), '' '', ''-'') STORERECDDATE, 
		STORE_DISPATCH STOREDISPATCH,REPLACE(CONVERT(NVARCHAR,STORE_DISPATCH_DATE, 106), '' '', ''-'') STOREDISPATCHDATE,
		ISNULL(REPLACE(CONVERT(NVARCHAR,SMT_RECD_DATE, 106), '' '', ''-''),'''') SMTRECDDATE,ISNULL(REPLACE(CONVERT(NVARCHAR,SMT_CONSUME_DATE, 106), '' '', ''-''),'''') SMTCONSUMEDATE,
		ISNULL(SMT_CONSUME,'''') SMTCONSUME,ISNULL(IS_BLOCKED,'''') ISBLOCKED,ISNULL(REPLACE(CONVERT(NVARCHAR,BLOCK_DATE, 106), '' '', ''-''),'''') BLOCKDATE ,MATERIALID FROM
		SMT_MATERIAL_CONTROL WHERE 1=1 AND STORE_DISPATCH =''Y''';

		IF(@PARAM1 = '0')
		BEGIN
		SELECT @SQL += ' AND CAST(STORE_DISPATCH_DATE AS DATE) >= GETDATE()-30';
		END
		IF(@PARAM1 = '1')
		BEGIN
		SELECT @SQL += ' AND CAST(STORE_DISPATCH_DATE AS DATE) >= GETDATE()-90';
		END
		IF(@PARAM1 = '2')
		BEGIN
		SELECT @SQL += ' AND CAST(STORE_DISPATCH_DATE AS DATE) >= GETDATE()-180';
		END
		IF(@PARAM1 = '3')
		BEGIN
		SELECT @SQL += ' AND YEAR(STORE_DISPATCH_DATE)=''' + @PARAM2 + '''';
		END
		IF(@QRCODE != '')
		BEGIN
		SELECT @SQL += ' AND BARCODE=''' + @QRCODE + '''';
		END
		IF(@CATEGORY != '')
		BEGIN
		SELECT @SQL += ' AND CATEGORY=''' + @CATEGORY + '''';
		END
		IF(@VENDORNAME != '')
		BEGIN
		SELECT @SQL += ' AND VENDOR_NAME=''' + @VENDORNAME + '''';
		END
		SELECT @SQL += ' ORDER BY STORE_DISPATCH_DATE DESC';
		EXEC (@SQL)
	END

	IF(@ACTIVITY = 'GET_REC_YEAR')
	BEGIN
		SELECT DISTINCT YEAR(STORE_RECD_DATE) AS CODE, YEAR(STORE_RECD_DATE) AS NAME FROM SMT_MATERIAL_CONTROL  WHERE STORE_RECD_DATE IS NOT NULL ORDER BY YEAR(STORE_RECD_DATE) DESC
	END

	IF(@ACTIVITY = 'FILL_VENDOR_CATG') --FILL VENDOR CATEGORY
    BEGIN
        SELECT DISTINCT CATEGORY AS CODE, CATEGORY AS NAME FROM SMT_VENDOR_LIST WHERE VALID=1 ORDER BY CATEGORY
    END

	IF(@ACTIVITY = 'FILL_VENDOR_BY_CATG') --FILL VENDOR BY CATEGORY
    BEGIN
        SELECT PARTNO AS CODE, VENDOR_NAME AS NAME FROM SMT_VENDOR_LIST WHERE VALID=1 AND CATEGORY=@CATEGORY ORDER BY VENDOR_NAME
    END

	IF(@ACTIVITY = 'LAST_50_TRAN')
    BEGIN
        SELECT TOP 50 PARTNO,CATEGORY AS MATERIALCATEGORY,LOCATION,BARCODE AS QRCODE, ACTION, REMARKS,DBO.FN_EMPNAME(USERID) EMPLOYEE,REPLACE(CONVERT(NVARCHAR,TDATE, 106), ' ', '-') TDATE 
		FROM SMT_MATERIAL_HIST WHERE LOCATION=@PARAM1 ORDER BY SMT_MATERIAL_HIST.TDATE DESC
    END

	IF(@ACTIVITY = 'MAT_BLOCK')  --MATERIAL BLOCKED BY STORE
    BEGIN
        SELECT @L_P1=BARCODE, @L_P2=ISNULL(NULLIF(SMT_CONSUME, ''), 'N'), @L_P3=ISNULL(NULLIF(IS_BLOCKED, ''), 'N') FROM SMT_MATERIAL_CONTROL WHERE BARCODE=@QRCODE
              
        IF(@L_P1 IS NOT NULL)
        BEGIN
            IF (@L_P2 = 'Y')
            BEGIN
                SELECT 2 AS FLAG, 'This Material is already Consumed by SMT' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF(@L_P3 = 'Y')
            BEGIN
                SELECT 2 AS FLAG, 'This Material is already Blocked' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END                
            BEGIN
                UPDATE SMT_MATERIAL_CONTROL SET IS_BLOCKED='Y', BLOCK_DATE=GETDATE(), USERID=@USERID, UDATE=GETDATE() WHERE BARCODE=@QRCODE
                                        
				IF(@PARAM1 = 'STORE')
				BEGIN
					INSERT INTO SMT_MATERIAL_HIST (PARTNO, CATEGORY, LOCATION, BARCODE,  ACTION,REMARKS,USERID )
					VALUES (@PARTNO, @CATEGORY, 'STORE',    @QRCODE, 'BLOCKED', 'Material Blocked by Store', @USERID )
				END
				ELSE 
				BEGIN
					INSERT INTO SMT_MATERIAL_HIST (PARTNO, CATEGORY, LOCATION, BARCODE,  ACTION,REMARKS,USERID )
					VALUES (@PARTNO, @CATEGORY, 'SMT',    @QRCODE, 'BLOCKED', 'Material Blocked by SMT', @USERID )
				END
                SELECT 1 AS FLAG, 'Material Blocked Successfully' AS MSG, '' AS QRCODE, '' AS WEEKNO
				UPDATE SMT_SUB_MATERIAL_CONTROL SET IS_BLOCKED='Y', BLOCK_DATE=GETDATE(), USERID=@USERID, UDATE=GETDATE() WHERE QRCODE=@QRCODE
            END
        END
        ELSE
        BEGIN
            SELECT 2 AS FLAG, 'Invalid Material' AS MSG, '' AS QRCODE, '' AS WEEKNO
        END
    END

	IF(@ACTIVITY = 'STORE_RECD') --STORE MATERIAL RECEIVE
	BEGIN
		IF NOT EXISTS (SELECT * FROM SMT_MATERIAL_CONTROL WHERE MATERIALID=@MATERIALNO)
		BEGIN
			SET @L_P1=CAST(RIGHT(YEAR(GETDATE()), 2) AS VARCHAR)											--CURRENT YEAR
			SET @L_P2=REPLACE(STR(CAST(DATEPART(WEEK, GETDATE()) AS VARCHAR), 2),' ','0')					--CURRENT WEEK

			SELECT @L_NO=ISNULL(MAX(SEQNO),0)+1 FROM SMT_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND YEAR=@L_P1
			SET @L_P3=(@PARTNO+'-'+@L_P1+@L_P2+'-'+CAST(@L_NO AS VARCHAR))									--BARCODE NO GENERATE
              
			INSERT INTO SMT_MATERIAL_CONTROL (VENDOR_NAME, CATEGORY, PARTNO, MATERIALID, MFG_DATE, EXP_DATE, YEAR, WEEK, SEQNO, BARCODE, STORE_RECD_DATE, USERID, UDATE )
			VALUES (@VENDORNAME, @CATEGORY, @PARTNO, @MATERIALNO, @DATE1, @DATE2, @L_P1, @L_P2, @L_NO, @L_P3, GETDATE(), @USERID, GETDATE() )
            
			INSERT INTO SMT_MATERIAL_HIST (PARTNO, MATERIALID, CATEGORY, LOCATION, BARCODE, ACTION, REMARKS, USERID )
			VALUES (@PARTNO, @MATERIALNO, @CATEGORY, 'STORE',    @L_P3, 'RECEIVE', 'Material Receive by Store', @USERID )
              
			SELECT 1 AS FLAG, @L_P3 AS QRCODE, 'Record Saved' MSG, @L_P2 AS WEEKNO
		END
		ELSE
		BEGIN
			SELECT 2 AS FLAG, '' AS QRCODE, 'This Material already exists' MSG, '' AS WEEKNO
		END
	END  
	
	IF(@ACTIVITY = 'STORE_DISP') --STORE MATERIAL DISPATCH
    BEGIN
		SELECT @L_NO=SEQNO, @L_NO2=YEAR, @L_DATE1=EXP_DATE, @L_P1=ISNULL(NULLIF(STORE_DISPATCH, ''), 'N'), @L_P2=ISNULL(NULLIF(IS_BLOCKED, ''), 'N')
		FROM SMT_MATERIAL_CONTROL WHERE CATEGORY=@CATEGORY AND PARTNO=@PARTNO AND BARCODE=@QRCODE              
        IF(@L_NO > 0)
        BEGIN
            IF (@L_P1 = 'Y')
            BEGIN
                SELECT 2 AS FLAG, 'This Material is already dispatched to SMT' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF(CONVERT(DATE, @L_DATE1) < CONVERT(DATE, GETDATE()))
            BEGIN
                SELECT 2 AS FLAG, 'This Material is expired' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF(@L_P2 = 'Y')
            BEGIN
                SELECT 2 AS FLAG, 'This Material is blocked' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF EXISTS (SELECT * FROM SMT_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND YEAR=@L_NO2-1 AND ISNULL(NULLIF(STORE_DISPATCH, ''), 'N')='N' AND ISNULL(NULLIF(IS_BLOCKED, ''), 'N')='N' )
            BEGIN
                SELECT 2 AS FLAG, 'Previous Year Material is pending for dispatch' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF EXISTS (SELECT * FROM SMT_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND YEAR=@L_NO2 AND SEQNO<@L_NO AND ISNULL(NULLIF(STORE_DISPATCH, ''), 'N')='N' AND ISNULL(NULLIF(IS_BLOCKED, ''), 'N')='N' )
            BEGIN
                SELECT 2 AS FLAG, 'Previous Material is not dispatched Yet' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE
            BEGIN
                UPDATE SMT_MATERIAL_CONTROL SET STORE_DISPATCH='Y', STORE_DISPATCH_DATE=GETDATE(), USERID=@USERID, UDATE=GETDATE() WHERE CATEGORY=@CATEGORY AND PARTNO=@PARTNO AND BARCODE=@QRCODE 
                
                INSERT INTO SMT_MATERIAL_HIST (PARTNO, CATEGORY, LOCATION, BARCODE,  ACTION,REMARKS,USERID )
                VALUES (@PARTNO, @CATEGORY, 'STORE',@QRCODE, 'DISPATCH', 'Material Dispatch by Store',@USERID )

                SELECT 1 AS FLAG, 'Material allocated Successfully' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
        END
        ELSE
        BEGIN
            SELECT 2 AS FLAG, 'Invalid Material' AS MSG, '' AS QRCODE, '' AS WEEKNO
        END
    END

	IF(@ACTIVITY = 'SMT_RECD') --SMT MATERIAL RECEIVE
    BEGIN
        SELECT @L_NO=SEQNO, @L_NO2=YEAR, @L_DATE1=EXP_DATE, @L_P1=ISNULL(NULLIF(STORE_DISPATCH, ''), 'N'), @L_P2=ISNULL(NULLIF(SMT_RECD, ''), 'N'), @L_P3=ISNULL(NULLIF(IS_BLOCKED, ''), 'N')
        FROM SMT_MATERIAL_CONTROL WHERE CATEGORY=@CATEGORY AND PARTNO=@PARTNO AND BARCODE=@QRCODE 
              
        IF(@L_NO > 0)
        BEGIN
            IF (@L_P1 = 'N')
            BEGIN
                SELECT 2 AS FLAG, 'This Material is not dispatched by Warehouse' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END                
            ELSE IF(@L_P2 = 'Y')
            BEGIN
                SELECT 2 AS FLAG, 'This Material is already received in SMT' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF(@L_P3 = 'Y')
            BEGIN
                SELECT 2 AS FLAG, 'This Material is blocked' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF(CONVERT(DATE, @L_DATE1) < CONVERT(DATE, GETDATE()))
            BEGIN
                SELECT 2 AS FLAG, 'This Material is expired' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END                  
            ELSE IF EXISTS (SELECT * FROM SMT_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND YEAR=@L_NO2-1 AND ISNULL(NULLIF(SMT_RECD, ''), 'N')='N' AND ISNULL(NULLIF(IS_BLOCKED, ''), 'N')='N' )
            BEGIN
                SELECT 2 AS FLAG, 'Previous Year Material is pending for receive' AS MSG , '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF EXISTS (SELECT * FROM SMT_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND YEAR=@L_NO2 AND SEQNO<@L_NO AND ISNULL(NULLIF(SMT_RECD, ''), 'N')='N' AND ISNULL(NULLIF(IS_BLOCKED, ''), 'N')='N' )
            BEGIN
                SELECT 2 AS FLAG, 'Previous Material is not received Yet' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE
            BEGIN
                UPDATE SMT_MATERIAL_CONTROL SET SMT_RECD='Y', SMT_RECD_DATE=GETDATE(), USERID=@USERID, UDATE=GETDATE() WHERE CATEGORY=@CATEGORY AND PARTNO=@PARTNO AND BARCODE=@QRCODE 
                           
                INSERT INTO SMT_MATERIAL_HIST(PARTNO,CATEGORY,LOCATION,BARCODE,ACTION,REMARKS,USERID)
				VALUES (@PARTNO, @CATEGORY, 'SMT',@QRCODE, 'RECEIVE', 'Material Received by SMT', @USERID )

                SELECT 1 AS FLAG, 'Material Received Successfully' AS MSG, '' AS QRCODE, (SELECT WEEK  FROM [NVTI].[dbo].[SMT_MATERIAL_CONTROL] where BARCODE=@QRCODE) AS WEEKNO
            END
        END
        ELSE
        BEGIN
            SELECT 2 AS FLAG, 'Invalid Material' AS MSG, '' AS QRCODE, '' AS WEEKNO
        END
    END

    IF(@ACTIVITY = 'SMT_CONSUME') --SMT MATERIAL CONSUME
    BEGIN
        SELECT @L_NO=SEQNO, @L_NO2=YEAR, @L_DATE1=EXP_DATE, @L_P1=ISNULL(NULLIF(SMT_RECD, ''), 'N'), @L_P2=ISNULL(NULLIF(SMT_CONSUME, ''), 'N'), @L_P3=ISNULL(NULLIF(IS_BLOCKED, ''), 'N')
        FROM SMT_MATERIAL_CONTROL WHERE CATEGORY=@CATEGORY AND PARTNO=@PARTNO AND BARCODE=@QRCODE 
              
        IF(@L_NO > 0)
        BEGIN
            IF (@L_P1 = 'N')
            BEGIN
                SELECT 2 AS FLAG, 'This Material is not received by SMT' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF(@L_P2 = 'Y')
            BEGIN
                SELECT 2 AS FLAG, 'This Material is already consumed in SMT' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF(@L_P3 = 'Y')
            BEGIN
                SELECT 2 AS FLAG, 'This Material is blocked' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF(CONVERT(DATE, @L_DATE1) < CONVERT(DATE, GETDATE()))
            BEGIN
                SELECT 2 AS FLAG, 'This Material is expired' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END                  
            ELSE IF EXISTS (SELECT * FROM SMT_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND YEAR=@L_NO2-1 AND ISNULL(NULLIF(SMT_CONSUME, ''), 'N')='N' AND ISNULL(NULLIF(IS_BLOCKED, ''), 'N')='N' )
            BEGIN
                SELECT 2 AS FLAG, 'Previous Year Material is pending for consume' AS MSG , '' AS QRCODE, '' AS WEEKNO
            END
            ELSE IF EXISTS (SELECT * FROM SMT_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND YEAR=@L_NO2 AND SEQNO<@L_NO AND ISNULL(NULLIF(SMT_CONSUME, ''), 'N')='N' AND ISNULL(NULLIF(IS_BLOCKED, ''), 'N')='N' )
            BEGIN
                SELECT 2 AS FLAG, 'Previous Material is not consumed Yet' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
            ELSE
            BEGIN
                UPDATE SMT_MATERIAL_CONTROL SET SMT_CONSUME='Y', SMT_CONSUME_DATE=GETDATE(), USERID=@USERID, UDATE=GETDATE() WHERE CATEGORY=@CATEGORY AND PARTNO=@PARTNO AND BARCODE=@QRCODE 
                           
                INSERT INTO SMT_MATERIAL_HIST (PARTNO, CATEGORY, LOCATION, BARCODE,  ACTION,REMARKS,USERID )
				VALUES (@PARTNO, @CATEGORY, 'SMT', @QRCODE, 'CONSUME', 'Material Consume by SMT', @USERID )

                SELECT 1 AS FLAG, 'Material Consumed Successfully' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
        END
        ELSE
        BEGIN
            SELECT 2 AS FLAG, 'Invalid Material' AS MSG, '' AS QRCODE, '' AS WEEKNO
        END
    END

	IF(@ACTIVITY = 'SMT_CONSUME_GLUE') --SMT GLUE MATERIAL CONSUME
    BEGIN
		IF EXISTS (SELECT * FROM SMT_SUB_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND SUB_QRCODE=@SUBQRCODE)
			BEGIN
				SELECT @L_NO=SEQNO, @L_NO2=YEAR, @L_DATE1=EXP_DATE, @L_P1=ISNULL(NULLIF(SMT_RECD, ''), 'N'), @L_P2=ISNULL(NULLIF(SMT_CONSUME, ''), 'N'), @L_P3=ISNULL(NULLIF(IS_BLOCKED, ''), 'N')
				FROM SMT_MATERIAL_CONTROL WHERE BARCODE IN (
				SELECT TOP 1 QRCODE FROM SMT_SUB_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND SUB_QRCODE=@SUBQRCODE)

				IF(@L_NO > 0)
				BEGIN	--MASTER MATERIAL CHECK
					IF (@L_P1 = 'N')
					BEGIN
						SELECT 2 AS FLAG, 'Material Packet is not received by SMT' AS MSG, '' AS QRCODE, '' AS WEEKNO
					END
					ELSE IF(@L_P2 = 'Y')
					BEGIN
						SELECT 2 AS FLAG, 'Material Packet is already consumed in SMT' AS MSG, '' AS QRCODE, '' AS WEEKNO
					END
					ELSE IF(@L_P3 = 'Y')
					BEGIN
						SELECT 2 AS FLAG, 'Material Packet is blocked' AS MSG, '' AS QRCODE, '' AS WEEKNO
					END
					ELSE IF(CONVERT(DATE, @L_DATE1) < CONVERT(DATE, GETDATE()))
					BEGIN
						SELECT 2 AS FLAG, 'Material Packet is expired' AS MSG, '' AS QRCODE, '' AS WEEKNO
					END                  
					ELSE IF EXISTS (SELECT * FROM SMT_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND YEAR=@L_NO2-1 AND ISNULL(NULLIF(SMT_CONSUME, ''), 'N')='N' AND ISNULL(NULLIF(IS_BLOCKED, ''), 'N')='N' )
					BEGIN
						SELECT 2 AS FLAG, 'Previous Year Material Packet is pending for consume' AS MSG , '' AS QRCODE, '' AS WEEKNO
					END
					ELSE IF EXISTS (SELECT * FROM SMT_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND YEAR=@L_NO2 AND SEQNO<@L_NO AND ISNULL(NULLIF(SMT_CONSUME, ''), 'N')='N' AND ISNULL(NULLIF(IS_BLOCKED, ''), 'N')='N' )
					BEGIN
						SELECT 2 AS FLAG, 'Previous Material Packet is not consumed Yet' AS MSG, '' AS QRCODE, '' AS WEEKNO
					END
					ELSE		--SUB MATERIAL CHECK
					BEGIN
						SELECT @L_NO=SUB_SEQNO, @L_P1=QRCODE, @L_P2=ISNULL(NULLIF(SMT_CONSUME, ''), 'N'), @L_P3=ISNULL(NULLIF(IS_BLOCKED, ''), 'N')
						FROM SMT_SUB_MATERIAL_CONTROL WHERE PARTNO=@PARTNO AND SUB_QRCODE=@SUBQRCODE

						IF(@L_NO > 0)
						BEGIN
							IF(@L_P2 = 'Y')
							BEGIN
								SELECT 2 AS FLAG, 'This Sub Material is already consumed in SMT' AS MSG, '' AS QRCODE, '' AS WEEKNO
							END
							ELSE IF(@L_P3 = 'Y')
							BEGIN
								SELECT 2 AS FLAG, 'This Sub Material is blocked' AS MSG, '' AS QRCODE, '' AS WEEKNO
							END							
							ELSE IF EXISTS (SELECT * FROM SMT_SUB_MATERIAL_CONTROL WHERE QRCODE=@L_P1 AND SUB_SEQNO<@L_NO AND ISNULL(NULLIF(SMT_CONSUME, ''), 'N')='N' AND ISNULL(NULLIF(IS_BLOCKED, ''), 'N')='N' )
							BEGIN
								SELECT 2 AS FLAG, 'Previous Sub Material is not consumed Yet' AS MSG, '' AS QRCODE, '' AS WEEKNO
							END
							ELSE
							BEGIN
								UPDATE SMT_SUB_MATERIAL_CONTROL SET SMT_CONSUME='Y', SMT_CONSUME_DATE=GETDATE(), USERID=@USERID, UDATE=GETDATE() WHERE CATEGORY=@CATEGORY AND PARTNO=@PARTNO AND SUB_QRCODE=@SUBQRCODE 
                           
								INSERT INTO SMT_MATERIAL_HIST (PARTNO, CATEGORY, LOCATION, BARCODE,  ACTION,REMARKS,USERID )
								VALUES (@PARTNO, @CATEGORY, 'SMT',@SUBQRCODE, 'CONSUME', 'Sub Material Consume by SMT', @USERID )

								SELECT 1 AS FLAG, 'Sub Material Consumed Successfully' AS MSG, '' AS BARCODE, '' AS WEEKNO

								IF NOT EXISTS (SELECT * FROM SMT_SUB_MATERIAL_CONTROL WHERE QRCODE=@L_P1 AND ISNULL(NULLIF(SMT_CONSUME, ''), 'N')='N' AND ISNULL(NULLIF(IS_BLOCKED, ''), 'N')='N')
								BEGIN
									UPDATE SMT_MATERIAL_CONTROL SET SMT_CONSUME='Y', SMT_CONSUME_DATE=GETDATE(), USERID=@USERID, UDATE=GETDATE() WHERE CATEGORY=@CATEGORY AND PARTNO=@PARTNO AND BARCODE=@L_P1 
                           
									INSERT INTO SMT_MATERIAL_HIST (PARTNO, CATEGORY, LOCATION, BARCODE,  ACTION,          REMARKS,           USERID )
									VALUES (@PARTNO, @CATEGORY, 'SMT',    @L_P1, 'CONSUME', 'Material Packet Consume by SMT', @USERID )
								END
							END
						END
						ELSE
						BEGIN
							SELECT 2 AS FLAG, 'Invalid Material' AS MSG, '' AS QRCODE, '' AS WEEKNO
						END
					END
				END
			END
		ELSE
		BEGIN
			SELECT 2 AS FLAG, 'Invalid Material' AS MSG, '' AS QRCODE, '' AS WEEKNO
		END
    END

	IF(@ACTIVITY = 'SPLIT_MATERIAL') --SPLIT_MATERIAL
    BEGIN
        INSERT INTO SMT_SUB_MATERIAL_CONTROL(VENDOR_NAME,CATEGORY,PARTNO,QRCODE,SUB_SEQNO,SUB_QRCODE)
		VALUES(@VENDORNAME,@CATEGORY,@PARTNO,@QRCODE,@SUBSEQNO,@SUBQRCODE)

		SELECT 1 AS FLAG, @L_P3 AS QRCODE, 'Record Saved' MSG, @L_P2 AS WEEKNO
    END

	IF (@ACTIVITY = 'GET_SUBQRCODE') --Sub material of the Material
       BEGIN
            SELECT SUB_QRCODE SUBQRCODE,M.WEEK WEEKNO,ISNULL(SM.IS_BLOCKED,'') ISBLOCKED,ISNULL(SM.SMT_CONSUME,'') SMTCONSUME,
			ISNULL(REPLACE(CONVERT(NVARCHAR,SM.BLOCK_DATE, 106), ' ', '-'),'') BLOCKDATE, 
			ISNULL(REPLACE(CONVERT(NVARCHAR,SM.SMT_CONSUME_DATE, 106), ' ', '-'),'') SMTCONSUMEDATE
			FROM SMT_SUB_MATERIAL_CONTROL SM
			LEFT JOIN SMT_MATERIAL_CONTROL M ON M.BARCODE = SM.QRCODE
			WHERE QRCODE = @QRCODE
       END

	IF (@ACTIVITY = 'SUBMAT_BLOCK') --sub material block
       BEGIN
            SELECT @L_P1=SUB_QRCODE, @L_P2=ISNULL(NULLIF(SMT_CONSUME, ''), 'N'), @L_P3=ISNULL(NULLIF(IS_BLOCKED, ''), 'N') FROM SMT_SUB_MATERIAL_CONTROL WHERE SUB_QRCODE=@SUBQRCODE
              
            IF(@L_P1 IS NOT NULL)
            BEGIN
                IF (@L_P2 = 'Y')
                BEGIN
                    SELECT 2 AS FLAG, 'This Sub-Material is already Consumed by SMT' AS MSG, '' AS QRCODE, '' AS WEEKNO
                END
                ELSE IF(@L_P3 = 'Y')
                BEGIN
                    SELECT 2 AS FLAG, 'This Sub-Material is already Blocked' AS MSG, '' AS QRCODE, '' AS WEEKNO
                END                
                BEGIN
                    UPDATE SMT_SUB_MATERIAL_CONTROL SET IS_BLOCKED='Y', BLOCK_DATE=GETDATE(), USERID=@USERID, UDATE=GETDATE() WHERE SUB_QRCODE=@SUBQRCODE
                                        
					INSERT INTO SMT_MATERIAL_HIST (PARTNO, CATEGORY, LOCATION, BARCODE,  ACTION, REMARKS, USERID )
					VALUES ('315130000024', 'GLUE', 'SMT',  @SUBQRCODE, 'BLOCKED', 'Sub-Material Blocked by SMT', @USERID )
					
                    SELECT 1 AS FLAG, 'Sub-Material Blocked Successfully' AS MSG, '' AS QRCODE, '' AS WEEKNO

					--check if all sub-material blocked then block master qr code
					IF NOT EXISTS (select * from SMT_SUB_MATERIAL_CONTROL where QRCODE=@QRCODE and IS_BLOCKED is null)
					begin
						 UPDATE SMT_MATERIAL_CONTROL SET IS_BLOCKED='Y', BLOCK_DATE=GETDATE(), USERID=@USERID, UDATE=GETDATE() WHERE BARCODE=@QRCODE
						 INSERT INTO SMT_MATERIAL_HIST (PARTNO, CATEGORY, LOCATION, BARCODE,  ACTION, REMARKS, USERID )
						 VALUES ('315130000024', 'GLUE', 'SMT', @QRCODE, 'BLOCKED', 'Material Blocked - All Sub Material Blocked', @USERID )
					end

                END
            END
            ELSE
            BEGIN
                SELECT 2 AS FLAG, 'Invalid Material' AS MSG, '' AS QRCODE, '' AS WEEKNO
            END
       END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_SMT_BAKING]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[usp_SMT_BAKING]
(
	@ACTIVITY		VARCHAR(200)='',
	@DOCNO			INT=0,
	@PARTNO			VARCHAR(100)='',
	@MODEL			VARCHAR(100)='',

	@USERID			VARCHAR(50)='',
	@DATE1			VARCHAR(30)		= NULL,
	@DATE2			VARCHAR(30)		= NULL,
	@PARAM1			VARCHAR(100)	= '',
	@PARAM2			VARCHAR(100)	= '',
	@PARAM3			VARCHAR(100)	= '',
	@PARAM4			VARCHAR(100)	= '',
	@PARAM5			VARCHAR(100)	= '',
	@PARAM6			VARCHAR(100)	= '',
	@PARAM7			VARCHAR(100)	= '',
	@PARAM8			VARCHAR(100)	= '',
	@PARAM9			VARCHAR(100)	= ''
)
AS
BEGIN
DECLARE @L_P1 INT=0, @L_P2 VARCHAR(100)='', @L_P3 INT=0

	IF (@ACTIVITY = 'ADD_UPD_BAKING_MODEL')
	BEGIN
		IF (@PARAM1 = 'ADD')
		BEGIN
			IF NOT EXISTS (SELECT * FROM SMT_BAKING_MODEL WHERE ISACTIVE=1 AND (PARTNO=@PARTNO OR MODELNAME=@MODEL))
			BEGIN
				INSERT INTO SMT_BAKING_MODEL(PARTNO, MODELNAME, ISACTIVE, CREATEDBY, TDATE, UPDATEDBY, UDATE)
									VALUES (@PARTNO, @MODEL, 1, @USERID, GETDATE(), @USERID, GETDATE())
				SELECT 1 AS FLAG
			END
			ELSE
			BEGIN
				SELECT 0 AS FLAG
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT * FROM SMT_BAKING_MODEL WHERE ISACTIVE=1 AND PARTNO<>@PARTNO AND MODELNAME=@MODEL)
			BEGIN			
				SELECT 0 AS FLAG
			END
			ELSE
			BEGIN
				UPDATE SMT_BAKING_MODEL SET MODELNAME=@MODEL, UPDATEDBY=@USERID, UDATE=GETDATE()
				WHERE PARTNO=@PARTNO
				SELECT 2 AS FLAG
			END
		END
	END

	IF (@ACTIVITY = 'FILL_LIST_BAKING_MODEL')
	BEGIN
		SELECT PARTNO, MODELNAME, CREATEDBY AS USERID, CAST(TDATE AS VARCHAR) DATE1, ISNULL(UPDATEDBY, '')AS PARAM1, CAST(UDATE AS VARCHAR) DATE2
		FROM SMT_BAKING_MODEL WHERE ISACTIVE=1 ORDER BY MODELNAME, PARTNO
	END

	IF (@ACTIVITY = 'FILL_BAKING_MODEL_BY_PARTNO')
	BEGIN
		SELECT PARTNO, MODELNAME FROM SMT_BAKING_MODEL WHERE PARTNO=@PARTNO
	END

	IF (@ACTIVITY = 'DELETE_BAKING_MODEL')
	BEGIN		
		UPDATE SMT_BAKING_MODEL SET ISACTIVE=0, DELETEDBY=@USERID, DDATE=GETDATE() WHERE PARTNO=@PARTNO
		SELECT 1 AS FLAG
	END

	IF (@ACTIVITY = 'DDL_PARTNO')
	BEGIN
		SELECT PARTNO AS CODE, PARTNO +' ( '+ MODELNAME + ')' AS NAME FROM SMT_BAKING_MODEL ORDER BY PARTNO ASC;
	END
	
	IF (@ACTIVITY = 'GET_BAKING_ITEM_LIST')
	BEGIN
		SELECT MATCODE, PARTNO, MODELNAME, CONVERT(VARCHAR, START_TIME, 23) AS DATE1, CONVERT(VARCHAR, START_TIME, 108) AS STARTTIME,
		DATEDIFF(MINUTE, DATEADD(MINUTE, 120, START_TIME), GETDATE()) AS LEFTTIME, ISNULL(IN_OPERATOR, '') AS INOPERATOR, ISNULL(OUT_OPERATOR, '') AS OUTOPERATOR
		FROM SMT_BAKING WHERE END_TIME IS NULL ORDER BY START_TIME DESC
	END

	IF (@ACTIVITY = 'FILL_BAKING_PROCESS')
	BEGIN
		SELECT MATCODE, ISNULL(REPLACE(CONVERT(VARCHAR,MFG_DATE, 106), ' ', '-'), '') AS MFG_DATE, LOT_NO AS LOTNO, PARTNO, MODELNAME, CAST(QUANTITY AS VARCHAR) AS QUANTITY,
		CONVERT(VARCHAR, START_TIME, 20) AS STARTTIME, CONVERT(VARCHAR, DATEADD(MI, 120, START_TIME), 20) AS PARAM1,
		ISNULL(CONVERT(VARCHAR, END_TIME, 20), '') AS ENDTIME, ISNULL(CAST(DATEDIFF(MINUTE, START_TIME, END_TIME) AS VARCHAR), '') AS PARAM3,
		ISNULL(REMARKS,'') AS REMARKS, IN_OPERATOR AS INOPERATOR, ISNULL(OUT_OPERATOR, '') AS OUTOPERATOR, CREATEDBY AS USERID, CONVERT(VARCHAR, TDATE, 23) AS DATE1 
		FROM SMT_BAKING WHERE CONVERT(DATE, START_TIME) BETWEEN ISNULL(@DATE1, '2021-10-01') AND ISNULL(@DATE2, GETDATE())
		AND ISNULL(LOT_NO, '')=IIF(@PARAM1='', ISNULL(LOT_NO, ''), @PARAM1)
		AND ISNULL(PARTNO, '')=IIF(@PARAM2='', ISNULL(PARTNO, ''), @PARAM2)
		ORDER BY TDATE DESC;
	END

	IF (@ACTIVITY = 'GET_BAKING_LIST_ALL')
	BEGIN
		SELECT MATCODE, ISNULL(REPLACE(CONVERT(VARCHAR,MFG_DATE, 106), ' ', '-'), '') AS MFG_DATE, LOT_NO AS LOTNO, PARTNO, MODELNAME,
		CONVERT(VARCHAR, START_TIME, 20) AS STARTTIME, CONVERT(VARCHAR, DATEADD(MI, 120, START_TIME), 20) AS PARAM1,
		ISNULL(CONVERT(VARCHAR, END_TIME, 20), '') AS ENDTIME, ISNULL(CAST(DATEDIFF(MINUTE, START_TIME, END_TIME) AS VARCHAR), '') AS PARAM3,
		ISNULL(REMARKS,'') AS REMARKS, IN_OPERATOR AS INOPERATOR, ISNULL(OUT_OPERATOR, '') AS OUTOPERATOR, CONVERT(VARCHAR, TDATE, 23) AS DATE1 
		FROM SMT_BAKING ORDER BY TDATE DESC
	END

	IF(@ACTIVITY = 'GET_FILTERED_LIST')
	BEGIN 
		SELECT MATCODE, ISNULL(REPLACE(CONVERT(VARCHAR,MFG_DATE, 106), ' ', '-'), '') AS MFG_DATE, LOT_NO AS LOTNO, PARTNO, MODELNAME,
		CONVERT(VARCHAR, START_TIME, 20) AS STARTTIME, CONVERT(VARCHAR, DATEADD(MI, 120, START_TIME), 20) AS PARAM1,
		ISNULL(CONVERT(VARCHAR, END_TIME, 20), '') AS ENDTIME, ISNULL(CAST(DATEDIFF(MINUTE, START_TIME, END_TIME) AS VARCHAR), '') AS PARAM3,
		ISNULL(REMARKS,'') AS REMARKS, IN_OPERATOR AS INOPERATOR, ISNULL(OUT_OPERATOR, '') AS OUTOPERATOR, CONVERT(VARCHAR, TDATE, 23) AS DATE1 
		FROM SMT_BAKING WHERE CONVERT(DATE, START_TIME) BETWEEN ISNULL(@DATE1, '2021-10-01') AND ISNULL(@DATE2, GETDATE())
		AND ISNULL(LOT_NO, '')=IIF(@PARAM1='', ISNULL(LOT_NO, ''), @PARAM1)
		AND ISNULL(PARTNO, '')=IIF(@PARAM2='', ISNULL(PARTNO, ''), @PARAM2)
		ORDER BY TDATE DESC;
	END

	IF (@ACTIVITY = 'GET_ITEM_DETAIL')
	BEGIN
		SELECT  @L_P3=DATEDIFF(MINUTE, DATEADD(MINUTE, 120, START_TIME), GETDATE()) FROM SMT_BAKING WHERE MATCODE=@PARAM1
		SELECT MATCODE, @L_P3 AS PARAM1, LOT_NO AS LOTNO, PARTNO AS PARTNO, REPLACE(CONVERT(NVARCHAR,MFG_DATE, 106), ' ', '-')MFGDATE, 
		ISNULL(CAST(QUANTITY AS VARCHAR),'')QUANTITY, ISNULL(IN_OPERATOR, '') AS INOPERATOR
		FROM SMT_BAKING WHERE MATCODE=@PARAM1 ORDER BY START_TIME DESC
	END

	IF (@ACTIVITY = 'ADD_UPD_BAKING_ITEM')
	BEGIN
		SELECT  @L_P2= MODELNAME FROM SMT_BAKING_MODEL WHERE PARTNO=@PARAM4
		SELECT  @L_P3=DATEDIFF(MINUTE, START_TIME, GETDATE()) FROM SMT_BAKING WHERE MATCODE=@PARAM1

		IF (@PARAM7 = 'ADD')
		BEGIN
			IF NOT EXISTS (SELECT * FROM SMT_BAKING WHERE MATCODE=@PARAM1)
			BEGIN
				INSERT INTO SMT_BAKING(MATCODE, MFG_DATE, LOT_NO, PARTNO, MODELNAME, QUANTITY, IN_OPERATOR, CREATEDBY, TDATE)
								VALUES (@PARAM1, @PARAM2, @PARAM3, @PARAM4, @L_P2, @PARAM5, @PARAM9, @PARAM6, GETDATE())
				SELECT 1 AS FLAG
			END
			ELSE
			BEGIN
				SELECT 0 AS FLAG
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT * FROM SMT_BAKING WHERE MATCODE=@PARAM1)
			BEGIN			
				--SELECT 0 AS FLAG
				IF(@L_P3 >= 120)
				BEGIN
					IF(@L_P3<=125)
					BEGIN
						UPDATE SMT_BAKING SET END_TIME=GETDATE(), REMARKS=@PARAM8, OUT_OPERATOR=@PARAM9, UPDATEDBY=@PARAM6, UDATE=GETDATE() WHERE MATCODE=@PARAM1 
						SELECT 2 AS FLAG, 'MATERIAL BAKED SUCCESSFULLY' AS MSG
					END
					ELSE		--DEFAULT FIX END_TIME=123 MORE THEN TO START_TIME TO AVOID AUDIT
					BEGIN
						UPDATE SMT_BAKING SET END_TIME=DATEADD(MINUTE, 123, START_TIME), REMARKS=@PARAM8, OUT_OPERATOR=@PARAM9, UPDATEDBY=@PARAM6, UDATE=GETDATE() WHERE MATCODE=@PARAM1 
						SELECT 2 AS FLAG, 'MATERIAL BAKED SUCCESSFULLY, BUT TIME EXCEEDS !' AS MSG
					END
				END
				ELSE
				BEGIN
					SELECT 3 AS FLAG, 'MATERIAL IS NOT BAKED YET !' AS MSG
				END
			END
			ELSE
			BEGIN
				SELECT 0 AS FLAG, 'MATERIAL DOES NOT EXISTS !' AS MSG
			END
		END
	END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Taxi]    Script Date: 8/22/2022 11:42:15 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_Taxi]
@ACTIVITY				VARCHAR(200)='',
@DOCNO					INT=0,
@EMPCODE				VARCHAR(50)='',
@NAME					VARCHAR(50)='',
@EMAILID				VARCHAR(50)='',
@GRADE					VARCHAR(20)='',
@DEPTCODE				INT=0,
@DEPTNAME				VARCHAR(50)='',
@DESCR					VARCHAR(2000)='',

@REMARKS				VARCHAR(1000)='',
@STATUS					INT=0,
@STATUS_DESCR			VARCHAR(50)='',
@APPID					VARCHAR(50)='',
@APPTYPE				VARCHAR(50)='',
@USERID					VARCHAR(50)='',
@UNAME					VARCHAR(50)='',
@DATE1					DATETIME,
@DATE2					DATETIME,
@PARAM1					VARCHAR(100)='',
@PARAM2					VARCHAR(100)='',
@PARAM3					VARCHAR(100)='',
@PARAM4					VARCHAR(100)='',
@PARAM5					VARCHAR(100)=''
AS
BEGIN
SET NOCOUNT ON;
DECLARE @L_NO INT, @L_APPID1 VARCHAR(20), @L_APPID2 VARCHAR(20), @L_APPID3 VARCHAR(20) 

	IF (@ACTIVITY = 'GET_HOD')		--GET DEPT HOD 
	BEGIN
		SELECT HOD_ADID AS DEPT_HOD, dbo.FN_EMPNAME(HOD_ADID) AS HOD_NAME FROM MST_DEPARTMENT WHERE HOD_ADID<>'' AND DEPTCODE=@DEPTCODE
	END

	IF (@ACTIVITY = 'ADD_REQUEST')		--ADD/UPDATE TAXI REQUEST DATA	
	BEGIN		
		SELECT @L_APPID1=VALUE FROM MST_CONFIG WHERE MODULE='TAXI_REQUEST' AND CATEGORY1='HR'				--GET HR USER
		SELECT @L_APPID2=VALUE FROM MST_CONFIG WHERE MODULE='TAXI_REQUEST' AND CATEGORY1='ADMIN' AND LVL=1	--GET ADMIN APPROVER
		SELECT @L_APPID3=VALUE FROM MST_CONFIG WHERE MODULE='TAXI_REQUEST' AND CATEGORY1='ADMIN' AND LVL=2	--GET ADMIN FINAL APPROVER

		IF (@DOCNO > 0)	
		BEGIN
			UPDATE TAXIREQ_MASTER SET EMPCODE=@EMPCODE, EMPNAME=@NAME, DEPTCODE=@DEPTCODE, DEPTNAME=@DEPTNAME, GRADE=@GRADE, EMAILID=@EMAILID, REQUIRED_DATE=@DATE1, 
			FROM_LOCATION=@PARAM1, TO_LOCATION=@PARAM2, PURPOSE=@DESCR, ISURGENT=@PARAM3, STATUS=@STATUS, DEPT_HOD=@APPID, HR=@L_APPID1, ADMIN=@L_APPID2, FINAL_APPR=@L_APPID3
			WHERE REQUESTNO=@DOCNO
			SELECT @DOCNO AS REQUESTNO, 2 AS FLAG
		END
		ELSE		
		BEGIN
			SELECT  @DOCNO=ISNULL(MAX(REQUESTNO),0)+1 FROM  TAXIREQ_MASTER
			INSERT INTO TAXIREQ_MASTER(REQUESTNO, EMPCODE, EMPNAME, DEPTCODE, DEPTNAME, GRADE, EMAILID, REQUIRED_DATE, FROM_LOCATION, TO_LOCATION, PURPOSE, ISURGENT, STATUS, DEPT_HOD, HR, ADMIN, FINAL_APPR, USERID, UNAME )
										VALUES (@DOCNO, @EMPCODE, @NAME, @DEPTCODE, @DEPTNAME, @GRADE, @EMAILID, @DATE1, @PARAM1, @PARAM2, @DESCR, @PARAM3, @STATUS, @APPID, @L_APPID1, @L_APPID2, @L_APPID3, @USERID, @UNAME )
			SELECT @DOCNO AS REQUESTNO, 1 AS FLAG
		END

		------- INSERT HISTORY --------

		IF (@STATUS > 1)
		BEGIN
			SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  TAXIREQ_HISTORY WHERE REQUESTNO=@DOCNO
			INSERT INTO TAXIREQ_HISTORY(REQUESTNO, SRNO, APP_TYPE, USERID, UNAME, REMARKS, STATUS, STATUS_DESCR, TDATE )
								VALUES (@DOCNO, @L_NO, 'REQUESTOR', @USERID, @UNAME, @DESCR, @STATUS, 'Post', GETDATE() )
		END
	END	

	IF (@ACTIVITY = 'FILL_DATA')		--FILL FORM TAXI REQUEST DATA BY REQUESTNO
	BEGIN
		SELECT REQUESTNO, EMPCODE, EMPNAME, DEPTCODE, DEPTNAME, GRADE, EMAILID, REQUIRED_DATE, FROM_LOCATION, TO_LOCATION, 
		PURPOSE, ISURGENT, STATUS, DEPT_HOD, dbo.FN_EMPNAME(DEPT_HOD) AS HOD_NAME, HR, ADMIN, FINAL_APPR, USERID, UNAME, TDATE 
		FROM TAXIREQ_MASTER WHERE REQUESTNO=@DOCNO
	END

	IF (@ACTIVITY = 'FILL_USER_REQ')		--FILL GRID TAXI REQUEST DATA FOR REQUESTOR
	BEGIN
		SELECT REQUESTNO, EMPCODE, EMPNAME, DEPTCODE, DEPTNAME, GRADE, EMAILID, CONVERT(VARCHAR, REQUIRED_DATE, 20) AS REQUIRED_DATE, FROM_LOCATION, TO_LOCATION, PURPOSE, 
		ISURGENT, STATUS, dbo.FN_CODEDEF(22, STATUS) AS STATUS_DESCR, DEPT_HOD, HR, ADMIN, FINAL_APPR, USERID, UNAME, CONVERT(VARCHAR, TDATE, 23) AS TDATE
		FROM TAXIREQ_MASTER WHERE (EMPCODE=@USERID OR USERID=@USERID)
		AND REQUESTNO=IIF(@DOCNO > 0, @DOCNO, REQUESTNO)
		AND UPPER(EMPCODE+EMPNAME) LIKE '%'+@NAME+'%'
		AND DEPTCODE=IIF(@DEPTCODE > 0, @DEPTCODE, DEPTCODE)
		AND STATUS=CASE WHEN @STATUS=0 THEN STATUS WHEN @STATUS=10 THEN STATUS ELSE @STATUS END 
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-03-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY 1 DESC
	END

	IF (@ACTIVITY = 'CANCEL_REQ')		--CANCEL TAXI REQUEST
	BEGIN
		UPDATE TAXIREQ_MASTER SET STATUS=@STATUS WHERE REQUESTNO=@DOCNO
		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  TAXIREQ_HISTORY WHERE REQUESTNO=@DOCNO
		INSERT INTO TAXIREQ_HISTORY(REQUESTNO, SRNO, USERID, UNAME, REMARKS, STATUS, STATUS_DESCR, TDATE, APP_TYPE)
						VALUES (@DOCNO, @L_NO, @USERID, @UNAME, @REMARKS, @STATUS, 'CANCELLED', GETDATE(), 'REQUESTOR')
		SELECT 1 AS FLAG
	END

	IF (@ACTIVITY = 'FILL_HISTORY')		--FILL GRID HISTORY
	BEGIN
		SELECT REQUESTNO, SRNO, USERID, UNAME, REMARKS, STATUS, STATUS_DESCR, CONVERT(VARCHAR, TDATE, 20) AS TDATE, APP_TYPE 
		FROM TAXIREQ_HISTORY WHERE REQUESTNO=@DOCNO ORDER BY SRNO
	END

	IF (@ACTIVITY = 'FILL_PENDING_REQ')		--FILL GRID TAXI REQUEST DATA FOR APPROVER
	BEGIN
		SELECT DISTINCT REQUESTNO, EMPCODE, EMPNAME, DEPTCODE, DEPTNAME, GRADE, EMAILID, CONVERT(VARCHAR, REQUIRED_DATE, 20) AS REQUIRED_DATE, FROM_LOCATION, TO_LOCATION, PURPOSE, 
		ISURGENT, STATUS, dbo.FN_CODEDEF(22, STATUS) AS STATUS_DESCR, DEPT_HOD, HR, ADMIN, FINAL_APPR, USERID, UNAME, CONVERT(VARCHAR, TDATE, 23) AS TDATE, 'DEPT_HOD' AS APP_TYPE
		FROM TAXIREQ_MASTER WHERE (DEPT_HOD=@USERID OR HR=@USERID)		--FOR DEPT HEAD OR HR
		AND REQUESTNO=IIF(@DOCNO > 0, @DOCNO, REQUESTNO)
		AND UPPER(EMPCODE+EMPNAME) LIKE '%'+@NAME+'%'
		AND DEPTCODE=IIF(@DEPTCODE > 0, @DEPTCODE, DEPTCODE)
		AND STATUS=CASE WHEN @STATUS=0 THEN 2 WHEN @STATUS=10 THEN STATUS ELSE @STATUS END 
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-03-01') AND ISNULL(@DATE2, GETDATE())
		UNION
		SELECT DISTINCT REQUESTNO, EMPCODE, EMPNAME, DEPTCODE, DEPTNAME, GRADE, EMAILID, CONVERT(VARCHAR, REQUIRED_DATE, 20) AS REQUIRED_DATE, FROM_LOCATION, TO_LOCATION, PURPOSE, 
		ISURGENT, STATUS, dbo.FN_CODEDEF(22, STATUS) AS STATUS_DESCR, DEPT_HOD, HR, ADMIN, FINAL_APPR, USERID, UNAME, CONVERT(VARCHAR, TDATE, 23) AS TDATE, 'ADMIN' AS APP_TYPE
		FROM TAXIREQ_MASTER WHERE ADMIN=@USERID							--FOR ADMIN
		AND REQUESTNO=IIF(@DOCNO > 0, @DOCNO, REQUESTNO)
		AND UPPER(EMPCODE+EMPNAME) LIKE '%'+@NAME+'%'
		AND DEPTCODE=IIF(@DEPTCODE > 0, @DEPTCODE, DEPTCODE)
		AND STATUS=CASE WHEN @STATUS=0 THEN 3 WHEN @STATUS=10 THEN STATUS ELSE @STATUS END 
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-03-01') AND ISNULL(@DATE2, GETDATE())
		UNION
		SELECT DISTINCT REQUESTNO, EMPCODE, EMPNAME, DEPTCODE, DEPTNAME, GRADE, EMAILID, CONVERT(VARCHAR, REQUIRED_DATE, 20) AS REQUIRED_DATE, FROM_LOCATION, TO_LOCATION, PURPOSE, 
		ISURGENT, STATUS, dbo.FN_CODEDEF(22, STATUS) AS STATUS_DESCR, DEPT_HOD, HR, ADMIN, FINAL_APPR, USERID, UNAME, CONVERT(VARCHAR, TDATE, 23) AS TDATE, 'FINAL_APPR' AS APP_TYPE
		FROM TAXIREQ_MASTER WHERE FINAL_APPR=@USERID					--FOR FINAL APPROVAL
		AND REQUESTNO=IIF(@DOCNO > 0, @DOCNO, REQUESTNO)
		AND UPPER(EMPCODE+EMPNAME) LIKE '%'+@NAME+'%'
		AND DEPTCODE=IIF(@DEPTCODE > 0, @DEPTCODE, DEPTCODE)
		AND STATUS=CASE WHEN @STATUS=0 THEN 4 WHEN @STATUS=10 THEN STATUS ELSE @STATUS END 
		AND CONVERT(DATE, TDATE) BETWEEN ISNULL(@DATE1, '2020-03-01') AND ISNULL(@DATE2, GETDATE())
		ORDER BY 1 DESC
	END

	IF (@ACTIVITY = 'APPR_REQ')		--APPROVE TAXI REQUEST	
	BEGIN
		UPDATE TAXIREQ_MASTER SET STATUS=@STATUS WHERE REQUESTNO=@DOCNO
		
		SELECT  @L_NO=ISNULL(MAX(SRNO),0)+1 FROM  TAXIREQ_HISTORY WHERE REQUESTNO=@DOCNO
		INSERT INTO TAXIREQ_HISTORY(REQUESTNO, SRNO, APP_TYPE, USERID, UNAME, REMARKS, STATUS, STATUS_DESCR, TDATE )
							VALUES (@DOCNO, @L_NO, @APPTYPE, @USERID, @UNAME, @REMARKS, @STATUS, @STATUS_DESCR, GETDATE() )

		SELECT 1 AS FLAG
	END	

END

GO
